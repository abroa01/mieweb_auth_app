{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","inputSourceMap":{"version":3,"names":["getValueTransition","noop","animateSingleValue","getOptimisedAppearId","cancelFrame","frameData","frameSteps","frame","microtask","time","isSVGElement","FlatTree","clamp","delay","mixNumber","SubscriptionManager","resolveMotionValue","mixValues","copyBoxInto","copyAxisDeltaInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","boxEqualsRounded","isDeltaZero","axisDeltaEquals","aspectRatio","boxEquals","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","globalProjectionState","metrics","type","totalNodes","resolvedTargetDeltas","recalculatedProjection","isDebug","window","MotionDebug","undefined","transformAxes","hiddenVisibility","visibility","animationTarget","id","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","setStaticValue","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","root","options","appearId","MotionHasOptimisedAnimation","layout","layoutId","MotionCancelOptimisedAnimation","parent","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","animationId","children","Set","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","scheduleUpdate","update","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","record","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","depth","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","args","subscriptionManager","notify","hasListeners","mount","instance","current","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","node","updateScroll","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","timestamp","isProcessing","process","preRender","render","didUpdate","read","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","_a","box","measureViewportBox","wasInScrollRoot","some","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","prevProjectionDelta","createProjectionDeltas","hide","show","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasDistortingTransform","z","rotate","rotateX","rotateY","rotateZ","skewX","skewY","resetValues","getProjectionStyles","styleProp","_b","styles","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","clear","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","roundAxis"],"sources":["node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { getValueTransition } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { cancelFrame, frameData, frameSteps, frame } from '../../frameloop/frame.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nconst isDebug = typeof window !== \"undefined\" && window.MotionDebug !== undefined;\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (isDebug) {\n                    metrics.totalNodes =\n                        metrics.resolvedTargetDeltas =\n                            metrics.recalculatedProjection =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (isDebug) {\n                    window.MotionDebug.record(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            var _a;\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            var _a;\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (isDebug) {\n                metrics.resolvedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (isDebug) {\n                metrics.recalculatedProjection++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a;\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (isDebug) {\n        metrics.totalNodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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","ignoreList":[]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","inputSourceMap":{"version":3,"names":["getValueTransition","noop","animateSingleValue","getOptimisedAppearId","cancelFrame","frameData","frameSteps","frame","microtask","time","isSVGElement","FlatTree","clamp","delay","mixNumber","SubscriptionManager","resolveMotionValue","mixValues","copyBoxInto","copyAxisDeltaInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","boxEqualsRounded","isDeltaZero","axisDeltaEquals","aspectRatio","boxEquals","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","globalProjectionState","metrics","type","totalNodes","resolvedTargetDeltas","recalculatedProjection","isDebug","window","MotionDebug","undefined","transformAxes","hiddenVisibility","visibility","animationTarget","id","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","setStaticValue","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","root","options","appearId","MotionHasOptimisedAnimation","layout","layoutId","MotionCancelOptimisedAnimation","parent","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","animationId","children","Set","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","scheduleUpdate","update","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","record","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","depth","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","args","subscriptionManager","notify","hasListeners","mount","instance","current","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","node","updateScroll","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","timestamp","isProcessing","process","preRender","render","didUpdate","read","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","_a","box","measureViewportBox","wasInScrollRoot","some","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","prevProjectionDelta","createProjectionDeltas","hide","show","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasDistortingTransform","z","rotate","rotateX","rotateY","rotateZ","skewX","skewY","resetValues","getProjectionStyles","styleProp","_b","styles","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","clear","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","roundAxis"],"sources":["node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { getValueTransition } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { cancelFrame, frameData, frameSteps, frame } from '../../frameloop/frame.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nconst isDebug = typeof window !== \"undefined\" && window.MotionDebug !== undefined;\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (isDebug) {\n                    metrics.totalNodes =\n                        metrics.resolvedTargetDeltas =\n                            metrics.recalculatedProjection =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (isDebug) {\n                    window.MotionDebug.record(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            var _a;\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            var _a;\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (isDebug) {\n                metrics.resolvedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (isDebug) {\n                metrics.recalculatedProjection++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a;\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (isDebug) {\n        metrics.totalNodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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","ignoreList":[]}}},"code":"!function (module1) {\n  let _objectSpread;\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n  }, 0);\n  module1.export({\n    cleanDirtyNodes: () => cleanDirtyNodes,\n    createProjectionNode: () => createProjectionNode,\n    mixAxis: () => mixAxis,\n    mixAxisDelta: () => mixAxisDelta,\n    mixBox: () => mixBox,\n    propagateDirtyNodes: () => propagateDirtyNodes\n  });\n  let getValueTransition;\n  module1.link(\"motion-dom\", {\n    getValueTransition(v) {\n      getValueTransition = v;\n    }\n  }, 0);\n  let noop;\n  module1.link(\"motion-utils\", {\n    noop(v) {\n      noop = v;\n    }\n  }, 1);\n  let animateSingleValue;\n  module1.link(\"../../animation/animate/single-value.mjs\", {\n    animateSingleValue(v) {\n      animateSingleValue = v;\n    }\n  }, 2);\n  let getOptimisedAppearId;\n  module1.link(\"../../animation/optimized-appear/get-appear-id.mjs\", {\n    getOptimisedAppearId(v) {\n      getOptimisedAppearId = v;\n    }\n  }, 3);\n  let cancelFrame, frameData, frameSteps, frame;\n  module1.link(\"../../frameloop/frame.mjs\", {\n    cancelFrame(v) {\n      cancelFrame = v;\n    },\n    frameData(v) {\n      frameData = v;\n    },\n    frameSteps(v) {\n      frameSteps = v;\n    },\n    frame(v) {\n      frame = v;\n    }\n  }, 4);\n  let microtask;\n  module1.link(\"../../frameloop/microtask.mjs\", {\n    microtask(v) {\n      microtask = v;\n    }\n  }, 5);\n  let time;\n  module1.link(\"../../frameloop/sync-time.mjs\", {\n    time(v) {\n      time = v;\n    }\n  }, 6);\n  let isSVGElement;\n  module1.link(\"../../render/dom/utils/is-svg-element.mjs\", {\n    isSVGElement(v) {\n      isSVGElement = v;\n    }\n  }, 7);\n  let FlatTree;\n  module1.link(\"../../render/utils/flat-tree.mjs\", {\n    FlatTree(v) {\n      FlatTree = v;\n    }\n  }, 8);\n  let clamp;\n  module1.link(\"../../utils/clamp.mjs\", {\n    clamp(v) {\n      clamp = v;\n    }\n  }, 9);\n  let delay;\n  module1.link(\"../../utils/delay.mjs\", {\n    delay(v) {\n      delay = v;\n    }\n  }, 10);\n  let mixNumber;\n  module1.link(\"../../utils/mix/number.mjs\", {\n    mixNumber(v) {\n      mixNumber = v;\n    }\n  }, 11);\n  let SubscriptionManager;\n  module1.link(\"../../utils/subscription-manager.mjs\", {\n    SubscriptionManager(v) {\n      SubscriptionManager = v;\n    }\n  }, 12);\n  let resolveMotionValue;\n  module1.link(\"../../value/utils/resolve-motion-value.mjs\", {\n    resolveMotionValue(v) {\n      resolveMotionValue = v;\n    }\n  }, 13);\n  let mixValues;\n  module1.link(\"../animation/mix-values.mjs\", {\n    mixValues(v) {\n      mixValues = v;\n    }\n  }, 14);\n  let copyBoxInto, copyAxisDeltaInto;\n  module1.link(\"../geometry/copy.mjs\", {\n    copyBoxInto(v) {\n      copyBoxInto = v;\n    },\n    copyAxisDeltaInto(v) {\n      copyAxisDeltaInto = v;\n    }\n  }, 15);\n  let translateAxis, transformBox, applyBoxDelta, applyTreeDeltas;\n  module1.link(\"../geometry/delta-apply.mjs\", {\n    translateAxis(v) {\n      translateAxis = v;\n    },\n    transformBox(v) {\n      transformBox = v;\n    },\n    applyBoxDelta(v) {\n      applyBoxDelta = v;\n    },\n    applyTreeDeltas(v) {\n      applyTreeDeltas = v;\n    }\n  }, 16);\n  let calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear;\n  module1.link(\"../geometry/delta-calc.mjs\", {\n    calcRelativePosition(v) {\n      calcRelativePosition = v;\n    },\n    calcRelativeBox(v) {\n      calcRelativeBox = v;\n    },\n    calcBoxDelta(v) {\n      calcBoxDelta = v;\n    },\n    calcLength(v) {\n      calcLength = v;\n    },\n    isNear(v) {\n      isNear = v;\n    }\n  }, 17);\n  let removeBoxTransforms;\n  module1.link(\"../geometry/delta-remove.mjs\", {\n    removeBoxTransforms(v) {\n      removeBoxTransforms = v;\n    }\n  }, 18);\n  let createBox, createDelta;\n  module1.link(\"../geometry/models.mjs\", {\n    createBox(v) {\n      createBox = v;\n    },\n    createDelta(v) {\n      createDelta = v;\n    }\n  }, 19);\n  let boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals;\n  module1.link(\"../geometry/utils.mjs\", {\n    boxEqualsRounded(v) {\n      boxEqualsRounded = v;\n    },\n    isDeltaZero(v) {\n      isDeltaZero = v;\n    },\n    axisDeltaEquals(v) {\n      axisDeltaEquals = v;\n    },\n    aspectRatio(v) {\n      aspectRatio = v;\n    },\n    boxEquals(v) {\n      boxEquals = v;\n    }\n  }, 20);\n  let NodeStack;\n  module1.link(\"../shared/stack.mjs\", {\n    NodeStack(v) {\n      NodeStack = v;\n    }\n  }, 21);\n  let scaleCorrectors;\n  module1.link(\"../styles/scale-correction.mjs\", {\n    scaleCorrectors(v) {\n      scaleCorrectors = v;\n    }\n  }, 22);\n  let buildProjectionTransform;\n  module1.link(\"../styles/transform.mjs\", {\n    buildProjectionTransform(v) {\n      buildProjectionTransform = v;\n    }\n  }, 23);\n  let eachAxis;\n  module1.link(\"../utils/each-axis.mjs\", {\n    eachAxis(v) {\n      eachAxis = v;\n    }\n  }, 24);\n  let hasTransform, hasScale, has2DTranslate;\n  module1.link(\"../utils/has-transform.mjs\", {\n    hasTransform(v) {\n      hasTransform = v;\n    },\n    hasScale(v) {\n      hasScale = v;\n    },\n    has2DTranslate(v) {\n      has2DTranslate = v;\n    }\n  }, 25);\n  let globalProjectionState;\n  module1.link(\"./state.mjs\", {\n    globalProjectionState(v) {\n      globalProjectionState = v;\n    }\n  }, 26);\n  ___INIT_METEOR_FAST_REFRESH(module);\n  const metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0\n  };\n  const isDebug = typeof window !== \"undefined\" && window.MotionDebug !== undefined;\n  const transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n  const hiddenVisibility = {\n    visibility: \"hidden\"\n  };\n  /**\n   * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n   * which has a noticeable difference in spring animations\n   */\n  const animationTarget = 1000;\n  let id = 0;\n  function resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const {\n      latestValues\n    } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n      values[key] = latestValues[key];\n      visualElement.setStaticValue(key, 0);\n      if (sharedAnimationValues) {\n        sharedAnimationValues[key] = 0;\n      }\n    }\n  }\n  function cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode) return;\n    const {\n      visualElement\n    } = projectionNode.options;\n    if (!visualElement) return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n      const {\n        layout,\n        layoutId\n      } = projectionNode.options;\n      window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const {\n      parent\n    } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n      cancelTreeOptimisedTransformAnimations(parent);\n    }\n  }\n  function createProjectionNode(_ref) {\n    let {\n      attachResizeListener,\n      defaultParent,\n      measureScroll,\n      checkIsScrollRoot,\n      resetTransform\n    } = _ref;\n    return class ProjectionNode {\n      constructor() {\n        let latestValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n        /**\n         * A unique ID generated for every projection node.\n         */\n        this.id = id++;\n        /**\n         * An id that represents a unique session instigated by startUpdate.\n         */\n        this.animationId = 0;\n        /**\n         * A Set containing all this component's children. This is used to iterate\n         * through the children.\n         *\n         * TODO: This could be faster to iterate as a flat array stored on the root node.\n         */\n        this.children = new Set();\n        /**\n         * Options for the node. We use this to configure what kind of layout animations\n         * we should perform (if any).\n         */\n        this.options = {};\n        /**\n         * We use this to detect when its safe to shut down part of a projection tree.\n         * We have to keep projecting children for scale correction and relative projection\n         * until all their parents stop performing layout animations.\n         */\n        this.isTreeAnimating = false;\n        this.isAnimationBlocked = false;\n        /**\n         * Flag to true if we think this layout has been changed. We can't always know this,\n         * currently we set it to true every time a component renders, or if it has a layoutDependency\n         * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n         * and if one node is dirtied, they all are.\n         */\n        this.isLayoutDirty = false;\n        /**\n         * Flag to true if we think the projection calculations for this node needs\n         * recalculating as a result of an updated transform or layout animation.\n         */\n        this.isProjectionDirty = false;\n        /**\n         * Flag to true if the layout *or* transform has changed. This then gets propagated\n         * throughout the projection tree, forcing any element below to recalculate on the next frame.\n         */\n        this.isSharedProjectionDirty = false;\n        /**\n         * Flag transform dirty. This gets propagated throughout the whole tree but is only\n         * respected by shared nodes.\n         */\n        this.isTransformDirty = false;\n        /**\n         * Block layout updates for instant layout transitions throughout the tree.\n         */\n        this.updateManuallyBlocked = false;\n        this.updateBlockedByResize = false;\n        /**\n         * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n         * call.\n         */\n        this.isUpdating = false;\n        /**\n         * If this is an SVG element we currently disable projection transforms\n         */\n        this.isSVG = false;\n        /**\n         * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n         * its projection styles.\n         */\n        this.needsReset = false;\n        /**\n         * Flags whether this node should have its transform reset prior to measuring.\n         */\n        this.shouldResetTransform = false;\n        /**\n         * Store whether this node has been checked for optimised appear animations. As\n         * effects fire bottom-up, and we want to look up the tree for appear animations,\n         * this makes sure we only check each path once, stopping at nodes that\n         * have already been checked.\n         */\n        this.hasCheckedOptimisedAppear = false;\n        /**\n         * An object representing the calculated contextual/accumulated/tree scale.\n         * This will be used to scale calculcated projection transforms, as these are\n         * calculated in screen-space but need to be scaled for elements to layoutly\n         * make it to their calculated destinations.\n         *\n         * TODO: Lazy-init\n         */\n        this.treeScale = {\n          x: 1,\n          y: 1\n        };\n        /**\n         *\n         */\n        this.eventHandlers = new Map();\n        this.hasTreeAnimated = false;\n        // Note: Currently only running on root node\n        this.updateScheduled = false;\n        this.scheduleUpdate = () => this.update();\n        this.projectionUpdateScheduled = false;\n        this.checkUpdateFailed = () => {\n          if (this.isUpdating) {\n            this.isUpdating = false;\n            this.clearAllSnapshots();\n          }\n        };\n        /**\n         * This is a multi-step process as shared nodes might be of different depths. Nodes\n         * are sorted by depth order, so we need to resolve the entire tree before moving to\n         * the next step.\n         */\n        this.updateProjection = () => {\n          this.projectionUpdateScheduled = false;\n          /**\n           * Reset debug counts. Manually resetting rather than creating a new\n           * object each frame.\n           */\n          if (isDebug) {\n            metrics.totalNodes = metrics.resolvedTargetDeltas = metrics.recalculatedProjection = 0;\n          }\n          this.nodes.forEach(propagateDirtyNodes);\n          this.nodes.forEach(resolveTargetDelta);\n          this.nodes.forEach(calcProjection);\n          this.nodes.forEach(cleanDirtyNodes);\n          if (isDebug) {\n            window.MotionDebug.record(metrics);\n          }\n        };\n        /**\n         * Frame calculations\n         */\n        this.resolvedRelativeTargetAt = 0.0;\n        this.hasProjected = false;\n        this.isVisible = true;\n        this.animationProgress = 0;\n        /**\n         * Shared layout\n         */\n        // TODO Only running on root node\n        this.sharedNodes = new Map();\n        this.latestValues = latestValues;\n        this.root = parent ? parent.root || parent : this;\n        this.path = parent ? [...parent.path, parent] : [];\n        this.parent = parent;\n        this.depth = parent ? parent.depth + 1 : 0;\n        for (let i = 0; i < this.path.length; i++) {\n          this.path[i].shouldResetTransform = true;\n        }\n        if (this.root === this) this.nodes = new FlatTree();\n      }\n      addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n        return this.eventHandlers.get(name).add(handler);\n      }\n      notifyListeners(name) {\n        const subscriptionManager = this.eventHandlers.get(name);\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        subscriptionManager && subscriptionManager.notify(...args);\n      }\n      hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n      /**\n       * Lifecycles\n       */\n      mount(instance) {\n        let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.hasTreeAnimated;\n        if (this.instance) return;\n        this.isSVG = isSVGElement(instance);\n        this.instance = instance;\n        const {\n          layoutId,\n          layout,\n          visualElement\n        } = this.options;\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n        this.root.nodes.add(this);\n        this.parent && this.parent.children.add(this);\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n        if (attachResizeListener) {\n          let cancelDelay;\n          const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n          attachResizeListener(instance, () => {\n            this.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = delay(resizeUnblockUpdate, 250);\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n              this.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        }\n        // Only register the handler if it requires layout animation\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", _ref2 => {\n            let {\n              delta,\n              hasLayoutChanged,\n              hasRelativeTargetChanged,\n              layout: newLayout\n            } = _ref2;\n            if (this.isTreeAnimationBlocked()) {\n              this.target = undefined;\n              this.relativeTarget = undefined;\n              return;\n            }\n            // TODO: Check here if an animation exists\n            const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n            const {\n              onLayoutAnimationStart,\n              onLayoutAnimationComplete\n            } = visualElement.getProps();\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n            const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n            const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n            if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n              if (this.resumeFrom) {\n                this.resumingFrom = this.resumeFrom;\n                this.resumingFrom.resumingFrom = undefined;\n              }\n              this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n              const animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n              if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n              this.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged) {\n                finishAnimation(this);\n              }\n              if (this.isLead() && this.options.onExitComplete) {\n                this.options.onExitComplete();\n              }\n            }\n            this.targetLayout = newLayout;\n          });\n        }\n      }\n      unmount() {\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        const stack = this.getStack();\n        stack && stack.remove(this);\n        this.parent && this.parent.children.delete(this);\n        this.instance = undefined;\n        cancelFrame(this.updateProjection);\n      }\n      // only on the root\n      blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n      unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n      isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n      isTreeAnimationBlocked() {\n        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n      }\n      // Note: currently only running on root node\n      startUpdate() {\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        this.nodes && this.nodes.forEach(resetSkewAndRotation);\n        this.animationId++;\n      }\n      getTransformTemplate() {\n        const {\n          visualElement\n        } = this.options;\n        return visualElement && visualElement.getProps().transformTemplate;\n      }\n      willUpdate() {\n        let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.root.hasTreeAnimated = true;\n        if (this.root.isUpdateBlocked()) {\n          this.options.onExitComplete && this.options.onExitComplete();\n          return;\n        }\n        /**\n         * If we're running optimised appear animations then these must be\n         * cancelled before measuring the DOM. This is so we can measure\n         * the true layout of the element rather than the WAAPI animation\n         * which will be unaffected by the resetSkewAndRotate step.\n         *\n         * Note: This is a DOM write. Worst case scenario is this is sandwiched\n         * between other snapshot reads which will cause unnecessary style recalculations.\n         * This has to happen here though, as we don't yet know which nodes will need\n         * snapshots in startUpdate(), but we only want to cancel optimised animations\n         * if a layout animation measurement is actually going to be affected by them.\n         */\n        if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear) {\n          cancelTreeOptimisedTransformAnimations(this);\n        }\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.shouldResetTransform = true;\n          node.updateScroll(\"snapshot\");\n          if (node.options.layoutRoot) {\n            node.willUpdate(false);\n          }\n        }\n        const {\n          layoutId,\n          layout\n        } = this.options;\n        if (layoutId === undefined && !layout) return;\n        const transformTemplate = this.getTransformTemplate();\n        this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      }\n      update() {\n        this.updateScheduled = false;\n        const updateWasBlocked = this.isUpdateBlocked();\n        // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n        if (!this.isUpdating) {\n          this.nodes.forEach(clearIsLayoutDirty);\n        }\n        this.isUpdating = false;\n        /**\n         * Write\n         */\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        /**\n         * Manually flush any pending updates. Ideally\n         * we could leave this to the following requestAnimationFrame but this seems\n         * to leave a flash of incorrectly styled content.\n         */\n        const now = time.now();\n        frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n        frameData.timestamp = now;\n        frameData.isProcessing = true;\n        frameSteps.update.process(frameData);\n        frameSteps.preRender.process(frameData);\n        frameSteps.render.process(frameData);\n        frameData.isProcessing = false;\n      }\n      didUpdate() {\n        if (!this.updateScheduled) {\n          this.updateScheduled = true;\n          microtask.read(this.scheduleUpdate);\n        }\n      }\n      clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n      scheduleUpdateProjection() {\n        if (!this.projectionUpdateScheduled) {\n          this.projectionUpdateScheduled = true;\n          frame.preRender(this.updateProjection, false, true);\n        }\n      }\n      scheduleCheckAfterUnmount() {\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        frame.postRender(() => {\n          if (this.isLayoutDirty) {\n            this.root.didUpdate();\n          } else {\n            this.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n      updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n      updateLayout() {\n        if (!this.instance) return;\n        // TODO: Incorporate into a forwarded scroll offset\n        this.updateScroll();\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (let i = 0; i < this.path.length; i++) {\n            const node = this.path[i];\n            node.updateScroll();\n          }\n        }\n        const prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        const {\n          visualElement\n        } = this.options;\n        visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n      }\n      updateScroll() {\n        let phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n        let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n          needsMeasurement = false;\n        }\n        if (needsMeasurement) {\n          const isRoot = checkIsScrollRoot(this.instance);\n          this.scroll = {\n            animationId: this.root.animationId,\n            phase,\n            isRoot,\n            offset: measureScroll(this.instance),\n            wasRoot: this.scroll ? this.scroll.isRoot : isRoot\n          };\n        }\n      }\n      resetTransform() {\n        if (!resetTransform) return;\n        const isResetRequested = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout;\n        const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        const transformTemplate = this.getTransformTemplate();\n        const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n      measure() {\n        let removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        const pageBox = this.measurePageBox();\n        let layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n        roundBox(layoutBox);\n        return {\n          animationId: this.root.animationId,\n          measuredBox: pageBox,\n          layoutBox,\n          latestValues: {},\n          source: this.id\n        };\n      }\n      measurePageBox() {\n        var _a;\n        const {\n          visualElement\n        } = this.options;\n        if (!visualElement) return createBox();\n        const box = visualElement.measureViewportBox();\n        const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n        if (!wasInScrollRoot) {\n          // Remove viewport scroll to give page-relative coordinates\n          const {\n            scroll\n          } = this.root;\n          if (scroll) {\n            translateAxis(box.x, scroll.offset.x);\n            translateAxis(box.y, scroll.offset.y);\n          }\n        }\n        return box;\n      }\n      removeElementScroll(box) {\n        var _a;\n        const boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n          return boxWithoutScroll;\n        }\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          const {\n            scroll,\n            options\n          } = node;\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (scroll.wasRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n            }\n            translateAxis(boxWithoutScroll.x, scroll.offset.x);\n            translateAxis(boxWithoutScroll.y, scroll.offset.y);\n          }\n        }\n        return boxWithoutScroll;\n      }\n      applyTransform(box) {\n        let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        const withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.offset.x,\n              y: -node.scroll.offset.y\n            });\n          }\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n        return withTransforms;\n      }\n      removeTransform(box) {\n        const boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          const sourceBox = createBox();\n          const nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n        }\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n        return boxWithoutTransform;\n      }\n      setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n        this.isProjectionDirty = true;\n      }\n      setOptions(options) {\n        this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n      clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n      forceRelativeParentToResolveTarget() {\n        if (!this.relativeParent) return;\n        /**\n         * If the parent target isn't up-to-date, force it to update.\n         * This is an unfortunate de-optimisation as it means any updating relative\n         * projection will cause all the relative parents to recalculate back\n         * up the tree.\n         */\n        if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {\n          this.relativeParent.resolveTargetDelta(true);\n        }\n      }\n      resolveTargetDelta() {\n        let forceRecalculation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var _a;\n        /**\n         * Once the dirty status of nodes has been spread through the tree, we also\n         * need to check if we have a shared node of a different depth that has itself\n         * been dirtied.\n         */\n        const lead = this.getLead();\n        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n        this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n        const isShared = Boolean(this.resumingFrom) || this !== lead;\n        /**\n         * We don't use transform for this step of processing so we don't\n         * need to check whether any nodes have changed transform.\n         */\n        const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget || this.root.updateBlockedByResize);\n        if (canSkip) return;\n        const {\n          layout,\n          layoutId\n        } = this.options;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n        if (!this.layout || !(layout || layoutId)) return;\n        this.resolvedRelativeTargetAt = frameData.timestamp;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        if (!this.targetDelta && !this.relativeTarget) {\n          const relativeParent = this.getClosestProjectingParent();\n          if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n            this.relativeParent = relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n        if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n          this.forceRelativeParentToResolveTarget();\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          const relativeParent = this.getClosestProjectingParent();\n          if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {\n            this.relativeParent = relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * Increase debug counter for resolved target deltas\n         */\n        if (isDebug) {\n          metrics.resolvedTargetDeltas++;\n        }\n      }\n      getClosestProjectingParent() {\n        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n          return undefined;\n        }\n        if (this.parent.isProjecting()) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n      isProjecting() {\n        return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n      }\n      calcProjection() {\n        var _a;\n        const lead = this.getLead();\n        const isShared = Boolean(this.resumingFrom) || this !== lead;\n        let canSkip = true;\n        /**\n         * If this is a normal layout animation and neither this node nor its nearest projecting\n         * is dirty then we can't skip.\n         */\n        if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If this is a shared layout animation and this node's shared projection is dirty then\n         * we can't skip.\n         */\n        if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If we have resolved the target this frame we must recalculate the\n         * projection to ensure it visually represents the internal calculations.\n         */\n        if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n          canSkip = false;\n        }\n        if (canSkip) return;\n        const {\n          layout,\n          layoutId\n        } = this.options;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n        this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Record previous tree scales before updating.\n         */\n        const prevTreeScaleX = this.treeScale.x;\n        const prevTreeScaleY = this.treeScale.y;\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n        /**\n         * If this layer needs to perform scale correction but doesn't have a target,\n         * use the layout as the target.\n         */\n        if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n          lead.target = lead.layout.layoutBox;\n          lead.targetWithTransforms = createBox();\n        }\n        const {\n          target\n        } = lead;\n        if (!target) {\n          /**\n           * If we don't have a target to project into, but we were previously\n           * projecting, we want to remove the stored transform and schedule\n           * a render to ensure the elements reflect the removed transform.\n           */\n          if (this.prevProjectionDelta) {\n            this.createProjectionDeltas();\n            this.scheduleRender();\n          }\n          return;\n        }\n        if (!this.projectionDelta || !this.prevProjectionDelta) {\n          this.createProjectionDeltas();\n        } else {\n          copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n          copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n        }\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        if (this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY || !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) || !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n        /**\n         * Increase debug counter for recalculated projections\n         */\n        if (isDebug) {\n          metrics.recalculatedProjection++;\n        }\n      }\n      hide() {\n        this.isVisible = false;\n        // TODO: Schedule render\n      }\n      show() {\n        this.isVisible = true;\n        // TODO: Schedule render\n      }\n      scheduleRender() {\n        let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var _a;\n        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n        if (notifyAll) {\n          const stack = this.getStack();\n          stack && stack.scheduleRender();\n        }\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n      createProjectionDeltas() {\n        this.prevProjectionDelta = createDelta();\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n      setAnimationOrigin(delta) {\n        let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        const snapshot = this.snapshot;\n        const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n        const mixedValues = _objectSpread({}, this.latestValues);\n        const targetDelta = createDelta();\n        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n          this.relativeTarget = this.relativeTargetOrigin = undefined;\n        }\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        const relativeLayout = createBox();\n        const snapshotSource = snapshot ? snapshot.source : undefined;\n        const layoutSource = this.layout ? this.layout.source : undefined;\n        const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n        const stack = this.getStack();\n        const isOnlyMember = !stack || stack.members.length <= 1;\n        const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        let prevRelativeTarget;\n        this.mixTargetDelta = latest => {\n          const progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n          this.setTargetDelta(targetDelta);\n          if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n            calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n            mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n            /**\n             * If this is an unchanged relative target we can consider the\n             * projection not dirty.\n             */\n            if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {\n              this.isProjectionDirty = false;\n            }\n            if (!prevRelativeTarget) prevRelativeTarget = createBox();\n            copyBoxInto(prevRelativeTarget, this.relativeTarget);\n          }\n          if (isSharedLayoutAnimation) {\n            this.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n          this.root.scheduleUpdateProjection();\n          this.scheduleRender();\n          this.animationProgress = progress;\n        };\n        this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n      }\n      startAnimation(options) {\n        this.notifyListeners(\"animationStart\");\n        this.currentAnimation && this.currentAnimation.stop();\n        if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n          this.resumingFrom.currentAnimation.stop();\n        }\n        if (this.pendingAnimation) {\n          cancelFrame(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n        this.pendingAnimation = frame.update(() => {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          this.currentAnimation = animateSingleValue(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n            onUpdate: latest => {\n              this.mixTargetDelta(latest);\n              options.onUpdate && options.onUpdate(latest);\n            },\n            onComplete: () => {\n              options.onComplete && options.onComplete();\n              this.completeAnimation();\n            }\n          }));\n          if (this.resumingFrom) {\n            this.resumingFrom.currentAnimation = this.currentAnimation;\n          }\n          this.pendingAnimation = undefined;\n        });\n      }\n      completeAnimation() {\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n        const stack = this.getStack();\n        stack && stack.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n      finishAnimation() {\n        if (this.currentAnimation) {\n          this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n          this.currentAnimation.stop();\n        }\n        this.completeAnimation();\n      }\n      applyTransformsToTarget() {\n        const lead = this.getLead();\n        let {\n          targetWithTransforms,\n          target,\n          layout,\n          latestValues\n        } = lead;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || createBox();\n          const xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          const yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n      registerSharedNode(layoutId, node) {\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n        const stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        const config = node.options.initialPromotionConfig;\n        node.promote({\n          transition: config ? config.transition : undefined,\n          preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n        });\n      }\n      isLead() {\n        const stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n      getLead() {\n        var _a;\n        const {\n          layoutId\n        } = this.options;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n      getPrevLead() {\n        var _a;\n        const {\n          layoutId\n        } = this.options;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n      getStack() {\n        const {\n          layoutId\n        } = this.options;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n      promote() {\n        let {\n          needsReset,\n          transition,\n          preserveFollowOpacity\n        } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n        if (transition) this.setOptions({\n          transition\n        });\n      }\n      relegate() {\n        const stack = this.getStack();\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n      resetSkewAndRotation() {\n        const {\n          visualElement\n        } = this.options;\n        if (!visualElement) return;\n        // If there's no detected skew or rotation values, we can early return without a forced render.\n        let hasDistortingTransform = false;\n        /**\n         * An unrolled check for rotation values. Most elements don't have any rotation and\n         * skipping the nested loop and new object creation is 50% faster.\n         */\n        const {\n          latestValues\n        } = visualElement;\n        if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {\n          hasDistortingTransform = true;\n        }\n        // If there's no distorting values, we don't need to do any more.\n        if (!hasDistortingTransform) return;\n        const resetValues = {};\n        if (latestValues.z) {\n          resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n        }\n        // Check the skew and rotate value of all axes and reset to 0\n        for (let i = 0; i < transformAxes.length; i++) {\n          resetDistortingTransform(\"rotate\".concat(transformAxes[i]), visualElement, resetValues, this.animationValues);\n          resetDistortingTransform(\"skew\".concat(transformAxes[i]), visualElement, resetValues, this.animationValues);\n        }\n        // Force a render of this element to apply the transform with all skews and rotations\n        // set to 0.\n        visualElement.render();\n        // Put back all the values we reset\n        for (const key in resetValues) {\n          visualElement.setStaticValue(key, resetValues[key]);\n          if (this.animationValues) {\n            this.animationValues[key] = resetValues[key];\n          }\n        }\n        // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n        visualElement.scheduleRender();\n      }\n      getProjectionStyles(styleProp) {\n        var _a, _b;\n        if (!this.instance || this.isSVG) return undefined;\n        if (!this.isVisible) {\n          return hiddenVisibility;\n        }\n        const styles = {\n          visibility: \"\"\n        };\n        const transformTemplate = this.getTransformTemplate();\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n        const lead = this.getLead();\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          const emptyStyles = {};\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n          }\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n          return emptyStyles;\n        }\n        const valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n        const {\n          x,\n          y\n        } = this.projectionDelta;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n        for (const key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          const {\n            correct,\n            applyTo\n          } = scaleCorrectors[key];\n          /**\n           * Only apply scale correction to the value if we have an\n           * active projection transform. Otherwise these values become\n           * vulnerable to distortion if the element changes size without\n           * a corresponding layout animation.\n           */\n          const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n          if (applyTo) {\n            const num = applyTo.length;\n            for (let i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n        }\n        return styles;\n      }\n      clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      }\n      // Only run on root\n      resetTree() {\n        this.root.nodes.forEach(node => {\n          var _a;\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    };\n  }\n  function updateLayout(node) {\n    node.updateLayout();\n  }\n  function notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n      const {\n        layoutBox: layout,\n        measuredBox: measuredLayout\n      } = node.layout;\n      const {\n        animationType\n      } = node.options;\n      const isShared = snapshot.source !== node.layout.source;\n      // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n      // animations for instance if layout=\"size\" and an element has only changed position\n      if (animationType === \"size\") {\n        eachAxis(axis => {\n          const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n          const length = calcLength(axisSnapshot);\n          axisSnapshot.min = layout[axis].min;\n          axisSnapshot.max = axisSnapshot.min + length;\n        });\n      } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n        eachAxis(axis => {\n          const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n          const length = calcLength(layout[axis]);\n          axisSnapshot.max = axisSnapshot.min + length;\n          /**\n           * Ensure relative target gets resized and rerendererd\n           */\n          if (node.relativeTarget && !node.currentAnimation) {\n            node.isProjectionDirty = true;\n            node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n          }\n        });\n      }\n      const layoutDelta = createDelta();\n      calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n      const visualDelta = createDelta();\n      if (isShared) {\n        calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n      } else {\n        calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n      }\n      const hasLayoutChanged = !isDeltaZero(layoutDelta);\n      let hasRelativeTargetChanged = false;\n      if (!node.resumeFrom) {\n        const relativeParent = node.getClosestProjectingParent();\n        /**\n         * If the relativeParent is itself resuming from a different element then\n         * the relative snapshot is not relavent\n         */\n        if (relativeParent && !relativeParent.resumeFrom) {\n          const {\n            snapshot: parentSnapshot,\n            layout: parentLayout\n          } = relativeParent;\n          if (parentSnapshot && parentLayout) {\n            const relativeSnapshot = createBox();\n            calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n            const relativeLayout = createBox();\n            calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n            if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n              hasRelativeTargetChanged = true;\n            }\n            if (relativeParent.options.layoutRoot) {\n              node.relativeTarget = relativeLayout;\n              node.relativeTargetOrigin = relativeSnapshot;\n              node.relativeParent = relativeParent;\n            }\n          }\n        }\n      }\n      node.notifyListeners(\"didUpdate\", {\n        layout,\n        snapshot,\n        delta: visualDelta,\n        layoutDelta,\n        hasLayoutChanged,\n        hasRelativeTargetChanged\n      });\n    } else if (node.isLead()) {\n      const {\n        onExitComplete\n      } = node.options;\n      onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n  }\n  function propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (isDebug) {\n      metrics.totalNodes++;\n    }\n    if (!node.parent) return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n      node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n  }\n  function cleanDirtyNodes(node) {\n    node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n  }\n  function clearSnapshot(node) {\n    node.clearSnapshot();\n  }\n  function clearMeasurements(node) {\n    node.clearMeasurements();\n  }\n  function clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n  }\n  function resetTransformStyle(node) {\n    const {\n      visualElement\n    } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n      visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n  }\n  function finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n  }\n  function resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n  }\n  function calcProjection(node) {\n    node.calcProjection();\n  }\n  function resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n  }\n  function removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n  }\n  function mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n  }\n  function mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n  }\n  function mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n  }\n  function hasOpacityCrossfade(node) {\n    return node.animationValues && node.animationValues.opacityExit !== undefined;\n  }\n  const defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1]\n  };\n  const userAgentContains = string => typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);\n  /**\n   * Measured bounding boxes must be rounded in Safari and\n   * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n   * can appear to jump.\n   */\n  const roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : noop;\n  function roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n  }\n  function roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n  }\n  function shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n  }\n  function checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n  }\n}.call(this, module);","map":{"version":3,"names":["metrics","type","totalNodes","resolvedTargetDeltas","recalculatedProjection","isDebug","window","MotionDebug","undefined","transformAxes","hiddenVisibility","visibility","animationTarget","id","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","setStaticValue","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","root","options","appearId","getOptimisedAppearId","MotionHasOptimisedAnimation","layout","layoutId","MotionCancelOptimisedAnimation","frame","parent","createProjectionNode","_ref","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","arguments","length","animationId","children","Set","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","scheduleUpdate","update","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","record","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","depth","i","FlatTree","addEventListener","name","handler","has","set","SubscriptionManager","get","add","notifyListeners","subscriptionManager","_len","args","Array","_key","notify","hasListeners","mount","instance","isSVGElement","current","cancelDelay","resizeUnblockUpdate","delay","globalProjectionState","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","_ref2","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","boxEqualsRounded","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","_objectSpread","getValueTransition","onPlay","onComplete","shouldReduceMotion","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","delete","cancelFrame","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","node","updateScroll","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","time","frameData","clamp","timestamp","isProcessing","frameSteps","process","preRender","render","didUpdate","microtask","read","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","createBox","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","wasRoot","isResetRequested","hasProjection","isDeltaZero","transformTemplateValue","transformTemplateHasChanged","hasTransform","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","_a","box","measureViewportBox","wasInScrollRoot","some","checkNodeWasScrollRoot","translateAxis","boxWithoutScroll","copyBoxInto","applyTransform","transformOnly","withTransforms","transformBox","boxWithoutTransform","hasScale","sourceBox","nodeBox","removeBoxTransforms","setTargetDelta","targetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","calcRelativePosition","targetWithTransforms","calcRelativeBox","applyBoxDelta","has2DTranslate","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","prevProjectionDelta","createProjectionDeltas","copyAxisDeltaInto","calcBoxDelta","axisDeltaEquals","hide","show","notifyAll","createDelta","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","boxEquals","animationValues","mixValues","stop","animateSingleValue","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","calcLength","min","max","yLength","NodeStack","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasDistortingTransform","z","rotate","rotateX","rotateY","rotateZ","skewX","skewY","resetValues","concat","getProjectionStyles","styleProp","_b","styles","opacity","pointerEvents","resolveMotionValue","transform","emptyStyles","valuesToRender","buildProjectionTransform","transformOrigin","origin","opacityExit","scaleCorrectors","correct","applyTo","corrected","num","resetTree","clear","measuredLayout","eachAxis","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","mixNumber","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","noop","roundAxis","isNear","aspectRatio","call","module"],"sources":["node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { getValueTransition } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { cancelFrame, frameData, frameSteps, frame } from '../../frameloop/frame.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nconst isDebug = typeof window !== \"undefined\" && window.MotionDebug !== undefined;\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (isDebug) {\n                    metrics.totalNodes =\n                        metrics.resolvedTargetDeltas =\n                            metrics.recalculatedProjection =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (isDebug) {\n                    window.MotionDebug.record(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            var _a;\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            var _a;\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (isDebug) {\n                metrics.resolvedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (isDebug) {\n                metrics.recalculatedProjection++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a;\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (isDebug) {\n        metrics.totalNodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d5e7c7da92456dc9ab1cde1cc9424f5c5e6b5ff4"}
