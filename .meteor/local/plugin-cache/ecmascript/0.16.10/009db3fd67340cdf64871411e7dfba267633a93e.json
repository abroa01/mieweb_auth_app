{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/accounts-base/accounts_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/accounts-base/accounts_server.js","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/accounts-base/accounts_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/accounts-base/accounts_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_server.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 2);\n    var _Package$oauthEncryp;\n    const _excluded = [\"token\"];\n    module.export({\n      AccountsServer: () => AccountsServer\n    });\n    let crypto;\n    module.link(\"crypto\", {\n      default(v) {\n        crypto = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    let AccountsCommon, EXPIRE_TOKENS_INTERVAL_MS;\n    module.link(\"./accounts_common.js\", {\n      AccountsCommon(v) {\n        AccountsCommon = v;\n      },\n      EXPIRE_TOKENS_INTERVAL_MS(v) {\n        EXPIRE_TOKENS_INTERVAL_MS = v;\n      }\n    }, 2);\n    let URL;\n    module.link(\"meteor/url\", {\n      URL(v) {\n        URL = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const hasOwn = Object.prototype.hasOwnProperty;\n\n    // XXX maybe this belongs in the check package\n    const NonEmptyString = Match.Where(x => {\n      check(x, String);\n      return x.length > 0;\n    });\n\n    /**\n     * @summary Constructor for the `Accounts` namespace on the server.\n     * @locus Server\n     * @class AccountsServer\n     * @extends AccountsCommon\n     * @instancename accountsServer\n     * @param {Object} server A server object such as `Meteor.server`.\n     */\n    class AccountsServer extends AccountsCommon {\n      // Note that this constructor is less likely to be instantiated multiple\n      // times than the `AccountsClient` constructor, because a single server\n      // can provide only one set of methods.\n      constructor(server, _options) {\n        var _this;\n        super(_options || {});\n        _this = this;\n        ///\n        /// CREATE USER HOOKS\n        ///\n        /**\n         * @summary Customize login token creation.\n         * @locus Server\n         * @param {Function} func Called whenever a new token is created.\n         * Return the sequence and the user object. Return true to keep sending the default email, or false to override the behavior.\n         */\n        this.onCreateLoginToken = function (func) {\n          if (this._onCreateLoginTokenHook) {\n            throw new Error('Can only call onCreateLoginToken once');\n          }\n          this._onCreateLoginTokenHook = func;\n        };\n        // Generates a MongoDB selector that can be used to perform a fast case\n        // insensitive lookup for the given fieldName and string. Since MongoDB does\n        // not support case insensitive indexes, and case insensitive regex queries\n        // are slow, we construct a set of prefix selectors for all permutations of\n        // the first 4 characters ourselves. We first attempt to matching against\n        // these, and because 'prefix expression' regex queries do use indexes (see\n        // http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n        // this has been found to greatly improve performance (from 1200ms to 5ms in a\n        // test with 1.000.000 users).\n        this._selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n          // Performance seems to improve up to 4 prefix characters\n          const prefix = string.substring(0, Math.min(string.length, 4));\n          const orClause = generateCasePermutationsForString(prefix).map(prefixPermutation => {\n            const selector = {};\n            selector[fieldName] = new RegExp(\"^\".concat(Meteor._escapeRegExp(prefixPermutation)));\n            return selector;\n          });\n          const caseInsensitiveClause = {};\n          caseInsensitiveClause[fieldName] = new RegExp(\"^\".concat(Meteor._escapeRegExp(string), \"$\"), 'i');\n          return {\n            $and: [{\n              $or: orClause\n            }, caseInsensitiveClause]\n          };\n        };\n        this._findUserByQuery = async (query, options) => {\n          let user = null;\n          if (query.id) {\n            // default field selector is added within getUserById()\n            user = await Meteor.users.findOneAsync(query.id, this._addDefaultFieldSelector(options));\n          } else {\n            options = this._addDefaultFieldSelector(options);\n            let fieldName;\n            let fieldValue;\n            if (query.username) {\n              fieldName = 'username';\n              fieldValue = query.username;\n            } else if (query.email) {\n              fieldName = 'emails.address';\n              fieldValue = query.email;\n            } else {\n              throw new Error(\"shouldn't happen (validation missed something)\");\n            }\n            let selector = {};\n            selector[fieldName] = fieldValue;\n            user = await Meteor.users.findOneAsync(selector, options);\n            // If user is not found, try a case insensitive lookup\n            if (!user) {\n              selector = this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n              const candidateUsers = await Meteor.users.find(selector, _objectSpread(_objectSpread({}, options), {}, {\n                limit: 2\n              })).fetchAsync();\n              // No match if multiple candidates are found\n              if (candidateUsers.length === 1) {\n                user = candidateUsers[0];\n              }\n            }\n          }\n          return user;\n        };\n        this._handleError = function (msg) {\n          var _this$_options$ambigu;\n          let throwError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          let errorCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 403;\n          const isErrorAmbiguous = (_this$_options$ambigu = _this._options.ambiguousErrorMessages) !== null && _this$_options$ambigu !== void 0 ? _this$_options$ambigu : true;\n          const error = new Meteor.Error(errorCode, isErrorAmbiguous ? 'Something went wrong. Please check your credentials.' : msg);\n          if (throwError) {\n            throw error;\n          }\n          return error;\n        };\n        this._userQueryValidator = Match.Where(user => {\n          check(user, {\n            id: Match.Optional(NonEmptyString),\n            username: Match.Optional(NonEmptyString),\n            email: Match.Optional(NonEmptyString)\n          });\n          if (Object.keys(user).length !== 1) throw new Match.Error(\"User property must have exactly one field\");\n          return true;\n        });\n        this._server = server || Meteor.server;\n        // Set up the server's methods, as if by calling Meteor.methods.\n        this._initServerMethods();\n        this._initAccountDataHooks();\n\n        // If autopublish is on, publish these user fields. Login service\n        // packages (eg accounts-google) add to these by calling\n        // addAutopublishFields.  Notably, this isn't implemented with multiple\n        // publishes since DDP only merges only across top-level fields, not\n        // subfields (such as 'services.facebook.accessToken')\n        this._autopublishFields = {\n          loggedInUser: ['profile', 'username', 'emails'],\n          otherUsers: ['profile', 'username']\n        };\n\n        // use object to keep the reference when used in functions\n        // where _defaultPublishFields is destructured into lexical scope\n        // for publish callbacks that need `this`\n        this._defaultPublishFields = {\n          projection: {\n            profile: 1,\n            username: 1,\n            emails: 1\n          }\n        };\n        this._initServerPublications();\n\n        // connectionId -> {connection, loginToken}\n        this._accountData = {};\n\n        // connection id -> observe handle for the login token that this connection is\n        // currently associated with, or a number. The number indicates that we are in\n        // the process of setting up the observe (using a number instead of a single\n        // sentinel allows multiple attempts to set up the observe to identify which\n        // one was theirs).\n        this._userObservesForConnections = {};\n        this._nextUserObserveNumber = 1; // for the number described above.\n\n        // list of all registered handlers.\n        this._loginHandlers = [];\n        setupDefaultLoginHandlers(this);\n        setExpireTokensInterval(this);\n        this._validateLoginHook = new Hook({\n          bindEnvironment: false\n        });\n        this._validateNewUserHooks = [defaultValidateNewUserHook.bind(this)];\n        this._deleteSavedTokensForAllUsersOnStartup();\n        this._skipCaseInsensitiveChecksForTest = {};\n        this.urls = {\n          resetPassword: (token, extraParams) => this.buildEmailUrl(\"#/reset-password/\".concat(token), extraParams),\n          verifyEmail: (token, extraParams) => this.buildEmailUrl(\"#/verify-email/\".concat(token), extraParams),\n          loginToken: (selector, token, extraParams) => this.buildEmailUrl(\"/?loginToken=\".concat(token, \"&selector=\").concat(selector), extraParams),\n          enrollAccount: (token, extraParams) => this.buildEmailUrl(\"#/enroll-account/\".concat(token), extraParams)\n        };\n        this.addDefaultRateLimit();\n        this.buildEmailUrl = function (path) {\n          let extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          const url = new URL(Meteor.absoluteUrl(path));\n          const params = Object.entries(extraParams);\n          if (params.length > 0) {\n            // Add additional parameters to the url\n            for (const [key, value] of params) {\n              url.searchParams.append(key, value);\n            }\n          }\n          return url.toString();\n        };\n      }\n\n      ///\n      /// CURRENT USER\n      ///\n\n      // @override of \"abstract\" non-implementation in accounts_common.js\n      userId() {\n        // This function only works if called inside a method or a pubication.\n        // Using any of the information from Meteor.user() in a method or\n        // publish function will always use the value from when the function first\n        // runs. This is likely not what the user expects. The way to make this work\n        // in a method or publish function is to do Meteor.find(this.userId).observe\n        // and recompute when the user record changes.\n        const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n        if (!currentInvocation) throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n        return currentInvocation.userId;\n      }\n      async init() {\n        await setupUsersCollection(this.users);\n      }\n\n      ///\n      /// LOGIN HOOKS\n      ///\n\n      /**\n       * @summary Validate login attempts.\n       * @locus Server\n       * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n       */\n      validateLoginAttempt(func) {\n        // Exceptions inside the hook callback are passed up to us.\n        return this._validateLoginHook.register(func);\n      }\n\n      /**\n       * @summary Set restrictions on new user creation.\n       * @locus Server\n       * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n       */\n      validateNewUser(func) {\n        this._validateNewUserHooks.push(func);\n      }\n\n      /**\n       * @summary Validate login from external service\n       * @locus Server\n       * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n       */\n      beforeExternalLogin(func) {\n        if (this._beforeExternalLoginHook) {\n          throw new Error(\"Can only call beforeExternalLogin once\");\n        }\n        this._beforeExternalLoginHook = func;\n      }\n      /**\n       * @summary Customize new user creation.\n       * @locus Server\n       * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n       */\n      onCreateUser(func) {\n        if (this._onCreateUserHook) {\n          throw new Error(\"Can only call onCreateUser once\");\n        }\n        this._onCreateUserHook = Meteor.wrapFn(func);\n      }\n\n      /**\n       * @summary Customize oauth user profile updates\n       * @locus Server\n       * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n       */\n      onExternalLogin(func) {\n        if (this._onExternalLoginHook) {\n          throw new Error(\"Can only call onExternalLogin once\");\n        }\n        this._onExternalLoginHook = func;\n      }\n\n      /**\n       * @summary Customize user selection on external logins\n       * @locus Server\n       * @param {Function} func Called whenever a user is logged in via oauth and a\n       * user is not found with the service id. Return the user or undefined.\n       */\n      setAdditionalFindUserOnExternalLogin(func) {\n        if (this._additionalFindUserOnExternalLogin) {\n          throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n        }\n        this._additionalFindUserOnExternalLogin = func;\n      }\n      async _validateLogin(connection, attempt) {\n        await this._validateLoginHook.forEachAsync(async callback => {\n          let ret;\n          try {\n            ret = await callback(cloneAttemptWithConnection(connection, attempt));\n          } catch (e) {\n            attempt.allowed = false;\n            // XXX this means the last thrown error overrides previous error\n            // messages. Maybe this is surprising to users and we should make\n            // overriding errors more explicit. (see\n            // https://github.com/meteor/meteor/issues/1960)\n            attempt.error = e;\n            return true;\n          }\n          if (!ret) {\n            attempt.allowed = false;\n            // don't override a specific error provided by a previous\n            // validator or the initial attempt (eg \"incorrect password\").\n            if (!attempt.error) attempt.error = new Meteor.Error(403, \"Login forbidden\");\n          }\n          return true;\n        });\n      }\n      async _successfulLogin(connection, attempt) {\n        await this._onLoginHook.forEachAsync(async callback => {\n          await callback(cloneAttemptWithConnection(connection, attempt));\n          return true;\n        });\n      }\n      async _failedLogin(connection, attempt) {\n        await this._onLoginFailureHook.forEachAsync(async callback => {\n          await callback(cloneAttemptWithConnection(connection, attempt));\n          return true;\n        });\n      }\n      async _successfulLogout(connection, userId) {\n        // don't fetch the user object unless there are some callbacks registered\n        let user;\n        await this._onLogoutHook.forEachAsync(async callback => {\n          if (!user && userId) user = await this.users.findOneAsync(userId, {\n            fields: this._options.defaultFieldSelector\n          });\n          callback({\n            user,\n            connection\n          });\n          return true;\n        });\n      }\n      ///\n      /// LOGIN METHODS\n      ///\n\n      // Login methods return to the client an object containing these\n      // fields when the user was logged in successfully:\n      //\n      //   id: userId\n      //   token: *\n      //   tokenExpires: *\n      //\n      // tokenExpires is optional and intends to provide a hint to the\n      // client as to when the token will expire. If not provided, the\n      // client will call Accounts._tokenExpiration, passing it the date\n      // that it received the token.\n      //\n      // The login method will throw an error back to the client if the user\n      // failed to log in.\n      //\n      //\n      // Login handlers and service specific login methods such as\n      // `createUser` internally return a `result` object containing these\n      // fields:\n      //\n      //   type:\n      //     optional string; the service name, overrides the handler\n      //     default if present.\n      //\n      //   error:\n      //     exception; if the user is not allowed to login, the reason why.\n      //\n      //   userId:\n      //     string; the user id of the user attempting to login (if\n      //     known), required for an allowed login.\n      //\n      //   options:\n      //     optional object merged into the result returned by the login\n      //     method; used by HAMK from SRP.\n      //\n      //   stampedLoginToken:\n      //     optional object with `token` and `when` indicating the login\n      //     token is already present in the database, returned by the\n      //     \"resume\" login handler.\n      //\n      // For convenience, login methods can also throw an exception, which\n      // is converted into an {error} result.  However, if the id of the\n      // user attempting the login is known, a {userId, error} result should\n      // be returned instead since the user id is not captured when an\n      // exception is thrown.\n      //\n      // This internal `result` object is automatically converted into the\n      // public {id, token, tokenExpires} object returned to the client.\n\n      // Try a login method, converting thrown exceptions into an {error}\n      // result.  The `type` argument is a default, inserted into the result\n      // object if not explicitly returned.\n      //\n      // Log in a user on a connection.\n      //\n      // We use the method invocation to set the user id on the connection,\n      // not the connection object directly. setUserId is tied to methods to\n      // enforce clear ordering of method application (using wait methods on\n      // the client, and a no setUserId after unblock restriction on the\n      // server)\n      //\n      // The `stampedLoginToken` parameter is optional.  When present, it\n      // indicates that the login token has already been inserted into the\n      // database and doesn't need to be inserted again.  (It's used by the\n      // \"resume\" login handler).\n      async _loginUser(methodInvocation, userId, stampedLoginToken) {\n        if (!stampedLoginToken) {\n          stampedLoginToken = this._generateStampedLoginToken();\n          await this._insertLoginToken(userId, stampedLoginToken);\n        }\n\n        // This order (and the avoidance of yields) is important to make\n        // sure that when publish functions are rerun, they see a\n        // consistent view of the world: the userId is set and matches\n        // the login token on the connection (not that there is\n        // currently a public API for reading the login token on a\n        // connection).\n        Meteor._noYieldsAllowed(() => this._setLoginToken(userId, methodInvocation.connection, this._hashLoginToken(stampedLoginToken.token)));\n        await methodInvocation.setUserId(userId);\n        return {\n          id: userId,\n          token: stampedLoginToken.token,\n          tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n        };\n      }\n      // After a login method has completed, call the login hooks.  Note\n      // that `attemptLogin` is called for *all* login attempts, even ones\n      // which aren't successful (such as an invalid password, etc).\n      //\n      // If the login is allowed and isn't aborted by a validate login hook\n      // callback, log in the user.\n      //\n      async _attemptLogin(methodInvocation, methodName, methodArgs, result) {\n        if (!result) throw new Error(\"result is required\");\n\n        // XXX A programming error in a login handler can lead to this occurring, and\n        // then we don't call onLogin or onLoginFailure callbacks. Should\n        // tryLoginMethod catch this case and turn it into an error?\n        if (!result.userId && !result.error) throw new Error(\"A login method must specify a userId or an error\");\n        let user;\n        if (result.userId) user = await this.users.findOneAsync(result.userId, {\n          fields: this._options.defaultFieldSelector\n        });\n        const attempt = {\n          type: result.type || \"unknown\",\n          allowed: !!(result.userId && !result.error),\n          methodName: methodName,\n          methodArguments: Array.from(methodArgs)\n        };\n        if (result.error) {\n          attempt.error = result.error;\n        }\n        if (user) {\n          attempt.user = user;\n        }\n\n        // _validateLogin may mutate `attempt` by adding an error and changing allowed\n        // to false, but that's the only change it can make (and the user's callbacks\n        // only get a clone of `attempt`).\n        await this._validateLogin(methodInvocation.connection, attempt);\n        if (attempt.allowed) {\n          const o = await this._loginUser(methodInvocation, result.userId, result.stampedLoginToken);\n          const ret = _objectSpread(_objectSpread({}, o), result.options);\n          ret.type = attempt.type;\n          await this._successfulLogin(methodInvocation.connection, attempt);\n          return ret;\n        } else {\n          await this._failedLogin(methodInvocation.connection, attempt);\n          throw attempt.error;\n        }\n      }\n      // All service specific login methods should go through this function.\n      // Ensure that thrown exceptions are caught and that login hook\n      // callbacks are still called.\n      //\n      async _loginMethod(methodInvocation, methodName, methodArgs, type, fn) {\n        return await this._attemptLogin(methodInvocation, methodName, methodArgs, await tryLoginMethod(type, fn));\n      }\n      // Report a login attempt failed outside the context of a normal login\n      // method. This is for use in the case where there is a multi-step login\n      // procedure (eg SRP based password login). If a method early in the\n      // chain fails, it should call this function to report a failure. There\n      // is no corresponding method for a successful login; methods that can\n      // succeed at logging a user in should always be actual login methods\n      // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n      async _reportLoginFailure(methodInvocation, methodName, methodArgs, result) {\n        const attempt = {\n          type: result.type || \"unknown\",\n          allowed: false,\n          error: result.error,\n          methodName: methodName,\n          methodArguments: Array.from(methodArgs)\n        };\n        if (result.userId) {\n          attempt.user = this.users.findOneAsync(result.userId, {\n            fields: this._options.defaultFieldSelector\n          });\n        }\n        await this._validateLogin(methodInvocation.connection, attempt);\n        await this._failedLogin(methodInvocation.connection, attempt);\n\n        // _validateLogin may mutate attempt to set a new error message. Return\n        // the modified version.\n        return attempt;\n      }\n      ///\n      /// LOGIN HANDLERS\n      ///\n\n      /**\n       * @summary Registers a new login handler.\n       * @locus Server\n       * @param {String} [name] The type of login method like oauth, password, etc.\n       * @param {Function} handler A function that receives an options object\n       * (as passed as an argument to the `login` method) and returns one of\n       * `undefined`, meaning don't handle or a login method result object.\n       */\n      registerLoginHandler(name, handler) {\n        if (!handler) {\n          handler = name;\n          name = null;\n        }\n        this._loginHandlers.push({\n          name: name,\n          handler: Meteor.wrapFn(handler)\n        });\n      }\n      // Checks a user's credentials against all the registered login\n      // handlers, and returns a login token if the credentials are valid. It\n      // is like the login method, except that it doesn't set the logged-in\n      // user on the connection. Throws a Meteor.Error if logging in fails,\n      // including the case where none of the login handlers handled the login\n      // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n      //\n      // For example, if you want to login with a plaintext password, `options` could be\n      //   { user: { username: <username> }, password: <password> }, or\n      //   { user: { email: <email> }, password: <password> }.\n\n      // Try all of the registered login handlers until one of them doesn't\n      // return `undefined`, meaning it handled this call to `login`. Return\n      // that return value.\n      async _runLoginHandlers(methodInvocation, options) {\n        for (let handler of this._loginHandlers) {\n          const result = await tryLoginMethod(handler.name, async () => await handler.handler.call(methodInvocation, options));\n          if (result) {\n            return result;\n          }\n          if (result !== undefined) {\n            throw new Meteor.Error(400, 'A login handler should return a result or undefined');\n          }\n        }\n        return {\n          type: null,\n          error: new Meteor.Error(400, \"Unrecognized options for login request\")\n        };\n      }\n      // Deletes the given loginToken from the database.\n      //\n      // For new-style hashed token, this will cause all connections\n      // associated with the token to be closed.\n      //\n      // Any connections associated with old-style unhashed tokens will be\n      // in the process of becoming associated with hashed tokens and then\n      // they'll get closed.\n      async destroyToken(userId, loginToken) {\n        await this.users.updateAsync(userId, {\n          $pull: {\n            \"services.resume.loginTokens\": {\n              $or: [{\n                hashedToken: loginToken\n              }, {\n                token: loginToken\n              }]\n            }\n          }\n        });\n      }\n      _initServerMethods() {\n        // The methods created in this function need to be created here so that\n        // this variable is available in their scope.\n        const accounts = this;\n\n        // This object will be populated with methods and then passed to\n        // accounts._server.methods further below.\n        const methods = {};\n\n        // @returns {Object|null}\n        //   If successful, returns {token: reconnectToken, id: userId}\n        //   If unsuccessful (for example, if the user closed the oauth login popup),\n        //     throws an error describing the reason\n        methods.login = async function (options) {\n          // Login handlers should really also check whatever field they look at in\n          // options, but we don't enforce it.\n          check(options, Object);\n          const result = await accounts._runLoginHandlers(this, options);\n          //console.log({result});\n\n          return await accounts._attemptLogin(this, \"login\", arguments, result);\n        };\n        methods.logout = async function () {\n          const token = accounts._getLoginToken(this.connection.id);\n          accounts._setLoginToken(this.userId, this.connection, null);\n          if (token && this.userId) {\n            await accounts.destroyToken(this.userId, token);\n          }\n          await accounts._successfulLogout(this.connection, this.userId);\n          await this.setUserId(null);\n        };\n\n        // Generates a new login token with the same expiration as the\n        // connection's current token and saves it to the database. Associates\n        // the connection with this new token and returns it. Throws an error\n        // if called on a connection that isn't logged in.\n        //\n        // @returns Object\n        //   If successful, returns { token: <new token>, id: <user id>,\n        //   tokenExpires: <expiration date> }.\n        methods.getNewToken = async function () {\n          const user = await accounts.users.findOneAsync(this.userId, {\n            fields: {\n              \"services.resume.loginTokens\": 1\n            }\n          });\n          if (!this.userId || !user) {\n            throw new Meteor.Error(\"You are not logged in.\");\n          }\n          // Be careful not to generate a new token that has a later\n          // expiration than the curren token. Otherwise, a bad guy with a\n          // stolen token could use this method to stop his stolen token from\n          // ever expiring.\n          const currentHashedToken = accounts._getLoginToken(this.connection.id);\n          const currentStampedToken = user.services.resume.loginTokens.find(stampedToken => stampedToken.hashedToken === currentHashedToken);\n          if (!currentStampedToken) {\n            // safety belt: this should never happen\n            throw new Meteor.Error(\"Invalid login token\");\n          }\n          const newStampedToken = accounts._generateStampedLoginToken();\n          newStampedToken.when = currentStampedToken.when;\n          await accounts._insertLoginToken(this.userId, newStampedToken);\n          return await accounts._loginUser(this, this.userId, newStampedToken);\n        };\n\n        // Removes all tokens except the token associated with the current\n        // connection. Throws an error if the connection is not logged\n        // in. Returns nothing on success.\n        methods.removeOtherTokens = async function () {\n          if (!this.userId) {\n            throw new Meteor.Error(\"You are not logged in.\");\n          }\n          const currentToken = accounts._getLoginToken(this.connection.id);\n          await accounts.users.updateAsync(this.userId, {\n            $pull: {\n              \"services.resume.loginTokens\": {\n                hashedToken: {\n                  $ne: currentToken\n                }\n              }\n            }\n          });\n        };\n\n        // Allow a one-time configuration for a login service. Modifications\n        // to this collection are also allowed in insecure mode.\n        methods.configureLoginService = async options => {\n          check(options, Match.ObjectIncluding({\n            service: String\n          }));\n          // Don't let random users configure a service we haven't added yet (so\n          // that when we do later add it, it's set up with their configuration\n          // instead of ours).\n          // XXX if service configuration is oauth-specific then this code should\n          //     be in accounts-oauth; if it's not then the registry should be\n          //     in this package\n          if (!(accounts.oauth && accounts.oauth.serviceNames().includes(options.service))) {\n            throw new Meteor.Error(403, \"Service unknown\");\n          }\n          if (Package['service-configuration']) {\n            const {\n              ServiceConfiguration\n            } = Package['service-configuration'];\n            const service = await ServiceConfiguration.configurations.findOneAsync({\n              service: options.service\n            });\n            if (service) throw new Meteor.Error(403, \"Service \".concat(options.service, \" already configured\"));\n            if (Package[\"oauth-encryption\"]) {\n              const {\n                OAuthEncryption\n              } = Package[\"oauth-encryption\"];\n              if (hasOwn.call(options, 'secret') && OAuthEncryption.keyIsLoaded()) options.secret = OAuthEncryption.seal(options.secret);\n            }\n            await ServiceConfiguration.configurations.insertAsync(options);\n          }\n        };\n        accounts._server.methods(methods);\n      }\n      _initAccountDataHooks() {\n        this._server.onConnection(connection => {\n          this._accountData[connection.id] = {\n            connection: connection\n          };\n          connection.onClose(() => {\n            this._removeTokenFromConnection(connection.id);\n            delete this._accountData[connection.id];\n          });\n        });\n      }\n      _initServerPublications() {\n        // Bring into lexical scope for publish callbacks that need `this`\n        const {\n          users,\n          _autopublishFields,\n          _defaultPublishFields\n        } = this;\n\n        // Publish all login service configuration fields other than secret.\n        this._server.publish(\"meteor.loginServiceConfiguration\", function () {\n          if (Package['service-configuration']) {\n            const {\n              ServiceConfiguration\n            } = Package['service-configuration'];\n            return ServiceConfiguration.configurations.find({}, {\n              fields: {\n                secret: 0\n              }\n            });\n          }\n          this.ready();\n        }, {\n          is_auto: true\n        }); // not technically autopublish, but stops the warning.\n\n        // Use Meteor.startup to give other packages a chance to call\n        // setDefaultPublishFields.\n        Meteor.startup(() => {\n          // Merge custom fields selector and default publish fields so that the client\n          // gets all the necessary fields to run properly\n          const customFields = this._addDefaultFieldSelector().fields || {};\n          const keys = Object.keys(customFields);\n          // If the custom fields are negative, then ignore them and only send the necessary fields\n          const fields = keys.length > 0 && customFields[keys[0]] ? _objectSpread(_objectSpread({}, this._addDefaultFieldSelector().fields), _defaultPublishFields.projection) : _defaultPublishFields.projection;\n          // Publish the current user's record to the client.\n          this._server.publish(null, function () {\n            if (this.userId) {\n              return users.find({\n                _id: this.userId\n              }, {\n                fields\n              });\n            } else {\n              return null;\n            }\n          }, /*suppress autopublish warning*/{\n            is_auto: true\n          });\n        });\n\n        // Use Meteor.startup to give other packages a chance to call\n        // addAutopublishFields.\n        Package.autopublish && Meteor.startup(() => {\n          // ['profile', 'username'] -> {profile: 1, username: 1}\n          const toFieldSelector = fields => fields.reduce((prev, field) => _objectSpread(_objectSpread({}, prev), {}, {\n            [field]: 1\n          }), {});\n          this._server.publish(null, function () {\n            if (this.userId) {\n              return users.find({\n                _id: this.userId\n              }, {\n                fields: toFieldSelector(_autopublishFields.loggedInUser)\n              });\n            } else {\n              return null;\n            }\n          }, /*suppress autopublish warning*/{\n            is_auto: true\n          });\n\n          // XXX this publish is neither dedup-able nor is it optimized by our special\n          // treatment of queries on a specific _id. Therefore this will have O(n^2)\n          // run-time performance every time a user document is changed (eg someone\n          // logging in). If this is a problem, we can instead write a manual publish\n          // function which filters out fields based on 'this.userId'.\n          this._server.publish(null, function () {\n            const selector = this.userId ? {\n              _id: {\n                $ne: this.userId\n              }\n            } : {};\n            return users.find(selector, {\n              fields: toFieldSelector(_autopublishFields.otherUsers)\n            });\n          }, /*suppress autopublish warning*/{\n            is_auto: true\n          });\n        });\n      }\n      // Add to the list of fields or subfields to be automatically\n      // published if autopublish is on. Must be called from top-level\n      // code (ie, before Meteor.startup hooks run).\n      //\n      // @param opts {Object} with:\n      //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n      //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n      addAutopublishFields(opts) {\n        this._autopublishFields.loggedInUser.push.apply(this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n        this._autopublishFields.otherUsers.push.apply(this._autopublishFields.otherUsers, opts.forOtherUsers);\n      }\n      // Replaces the fields to be automatically\n      // published when the user logs in\n      //\n      // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n      setDefaultPublishFields(fields) {\n        this._defaultPublishFields.projection = fields;\n      }\n      ///\n      /// ACCOUNT DATA\n      ///\n\n      // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n      // connection. Maybe there should be a public way to do that.\n      _getAccountData(connectionId, field) {\n        const data = this._accountData[connectionId];\n        return data && data[field];\n      }\n      _setAccountData(connectionId, field, value) {\n        const data = this._accountData[connectionId];\n\n        // safety belt. shouldn't happen. accountData is set in onConnection,\n        // we don't have a connectionId until it is set.\n        if (!data) return;\n        if (value === undefined) delete data[field];else data[field] = value;\n      }\n      ///\n      /// RECONNECT TOKENS\n      ///\n      /// support reconnecting using a meteor login token\n\n      _hashLoginToken(loginToken) {\n        const hash = crypto.createHash('sha256');\n        hash.update(loginToken);\n        return hash.digest('base64');\n      }\n      // {token, when} => {hashedToken, when}\n      _hashStampedToken(stampedToken) {\n        const {\n            token\n          } = stampedToken,\n          hashedStampedToken = _objectWithoutProperties(stampedToken, _excluded);\n        return _objectSpread(_objectSpread({}, hashedStampedToken), {}, {\n          hashedToken: this._hashLoginToken(token)\n        });\n      }\n      // Using $addToSet avoids getting an index error if another client\n      // logging in simultaneously has already inserted the new hashed\n      // token.\n      async _insertHashedLoginToken(userId, hashedToken, query) {\n        query = query ? _objectSpread({}, query) : {};\n        query._id = userId;\n        await this.users.updateAsync(query, {\n          $addToSet: {\n            \"services.resume.loginTokens\": hashedToken\n          }\n        });\n      }\n      // Exported for tests.\n      async _insertLoginToken(userId, stampedToken, query) {\n        await this._insertHashedLoginToken(userId, this._hashStampedToken(stampedToken), query);\n      }\n      /**\n       *\n       * @param userId\n       * @private\n       * @returns {Promise<void>}\n       */\n      _clearAllLoginTokens(userId) {\n        this.users.updateAsync(userId, {\n          $set: {\n            'services.resume.loginTokens': []\n          }\n        });\n      }\n      // test hook\n      _getUserObserve(connectionId) {\n        return this._userObservesForConnections[connectionId];\n      }\n      // Clean up this connection's association with the token: that is, stop\n      // the observe that we started when we associated the connection with\n      // this token.\n      _removeTokenFromConnection(connectionId) {\n        if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n          const observe = this._userObservesForConnections[connectionId];\n          if (typeof observe === 'number') {\n            // We're in the process of setting up an observe for this connection. We\n            // can't clean up that observe yet, but if we delete the placeholder for\n            // this connection, then the observe will get cleaned up as soon as it has\n            // been set up.\n            delete this._userObservesForConnections[connectionId];\n          } else {\n            delete this._userObservesForConnections[connectionId];\n            observe.stop();\n          }\n        }\n      }\n      _getLoginToken(connectionId) {\n        return this._getAccountData(connectionId, 'loginToken');\n      }\n      // newToken is a hashed token.\n      _setLoginToken(userId, connection, newToken) {\n        this._removeTokenFromConnection(connection.id);\n        this._setAccountData(connection.id, 'loginToken', newToken);\n        if (newToken) {\n          // Set up an observe for this token. If the token goes away, we need\n          // to close the connection.  We defer the observe because there's\n          // no need for it to be on the critical path for login; we just need\n          // to ensure that the connection will get closed at some point if\n          // the token gets deleted.\n          //\n          // Initially, we set the observe for this connection to a number; this\n          // signifies to other code (which might run while we yield) that we are in\n          // the process of setting up an observe for this connection. Once the\n          // observe is ready to go, we replace the number with the real observe\n          // handle (unless the placeholder has been deleted or replaced by a\n          // different placehold number, signifying that the connection was closed\n          // already -- in this case we just clean up the observe that we started).\n          const myObserveNumber = ++this._nextUserObserveNumber;\n          this._userObservesForConnections[connection.id] = myObserveNumber;\n          Meteor.defer(async () => {\n            // If something else happened on this connection in the meantime (it got\n            // closed, or another call to _setLoginToken happened), just do\n            // nothing. We don't need to start an observe for an old connection or old\n            // token.\n            if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n              return;\n            }\n            let foundMatchingUser;\n            // Because we upgrade unhashed login tokens to hashed tokens at\n            // login time, sessions will only be logged in with a hashed\n            // token. Thus we only need to observe hashed tokens here.\n            const observe = await this.users.find({\n              _id: userId,\n              'services.resume.loginTokens.hashedToken': newToken\n            }, {\n              fields: {\n                _id: 1\n              }\n            }).observeChanges({\n              added: () => {\n                foundMatchingUser = true;\n              },\n              removed: connection.close\n              // The onClose callback for the connection takes care of\n              // cleaning up the observe handle and any other state we have\n              // lying around.\n            }, {\n              nonMutatingCallbacks: true\n            });\n\n            // If the user ran another login or logout command we were waiting for the\n            // defer or added to fire (ie, another call to _setLoginToken occurred),\n            // then we let the later one win (start an observe, etc) and just stop our\n            // observe now.\n            //\n            // Similarly, if the connection was already closed, then the onClose\n            // callback would have called _removeTokenFromConnection and there won't\n            // be an entry in _userObservesForConnections. We can stop the observe.\n            if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n              observe.stop();\n              return;\n            }\n            this._userObservesForConnections[connection.id] = observe;\n            if (!foundMatchingUser) {\n              // We've set up an observe on the user associated with `newToken`,\n              // so if the new token is removed from the database, we'll close\n              // the connection. But the token might have already been deleted\n              // before we set up the observe, which wouldn't have closed the\n              // connection because the observe wasn't running yet.\n              connection.close();\n            }\n          });\n        }\n      }\n      // (Also used by Meteor Accounts server and tests).\n      //\n      _generateStampedLoginToken() {\n        return {\n          token: Random.secret(),\n          when: new Date()\n        };\n      }\n      ///\n      /// TOKEN EXPIRATION\n      ///\n\n      // Deletes expired password reset tokens from the database.\n      //\n      // Exported for tests. Also, the arguments are only used by\n      // tests. oldestValidDate is simulate expiring tokens without waiting\n      // for them to actually expire. userId is used by tests to only expire\n      // tokens for the test user.\n      async _expirePasswordResetTokens(oldestValidDate, userId) {\n        const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n        // when calling from a test with extra arguments, you must specify both!\n        if (oldestValidDate && !userId || !oldestValidDate && userId) {\n          throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n        }\n        oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n        const tokenFilter = {\n          $or: [{\n            \"services.password.reset.reason\": \"reset\"\n          }, {\n            \"services.password.reset.reason\": {\n              $exists: false\n            }\n          }]\n        };\n        await expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n      }\n\n      // Deletes expired password enroll tokens from the database.\n      //\n      // Exported for tests. Also, the arguments are only used by\n      // tests. oldestValidDate is simulate expiring tokens without waiting\n      // for them to actually expire. userId is used by tests to only expire\n      // tokens for the test user.\n      async _expirePasswordEnrollTokens(oldestValidDate, userId) {\n        const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n        // when calling from a test with extra arguments, you must specify both!\n        if (oldestValidDate && !userId || !oldestValidDate && userId) {\n          throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n        }\n        oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n        const tokenFilter = {\n          \"services.password.enroll.reason\": \"enroll\"\n        };\n        await expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n      }\n\n      // Deletes expired tokens from the database and closes all open connections\n      // associated with these tokens.\n      //\n      // Exported for tests. Also, the arguments are only used by\n      // tests. oldestValidDate is simulate expiring tokens without waiting\n      // for them to actually expire. userId is used by tests to only expire\n      // tokens for the test user.\n      /**\n       *\n       * @param oldestValidDate\n       * @param userId\n       * @private\n       * @return {Promise<void>}\n       */\n      async _expireTokens(oldestValidDate, userId) {\n        const tokenLifetimeMs = this._getTokenLifetimeMs();\n\n        // when calling from a test with extra arguments, you must specify both!\n        if (oldestValidDate && !userId || !oldestValidDate && userId) {\n          throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n        }\n        oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n        const userFilter = userId ? {\n          _id: userId\n        } : {};\n\n        // Backwards compatible with older versions of meteor that stored login token\n        // timestamps as numbers.\n        await this.users.updateAsync(_objectSpread(_objectSpread({}, userFilter), {}, {\n          $or: [{\n            \"services.resume.loginTokens.when\": {\n              $lt: oldestValidDate\n            }\n          }, {\n            \"services.resume.loginTokens.when\": {\n              $lt: +oldestValidDate\n            }\n          }]\n        }), {\n          $pull: {\n            \"services.resume.loginTokens\": {\n              $or: [{\n                when: {\n                  $lt: oldestValidDate\n                }\n              }, {\n                when: {\n                  $lt: +oldestValidDate\n                }\n              }]\n            }\n          }\n        }, {\n          multi: true\n        });\n        // The observe on Meteor.users will take care of closing connections for\n        // expired tokens.\n      }\n      // @override from accounts_common.js\n      config(options) {\n        // Call the overridden implementation of the method.\n        const superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n        // If the user set loginExpirationInDays to null, then we need to clear the\n        // timer that periodically expires tokens.\n        if (hasOwn.call(this._options, 'loginExpirationInDays') && this._options.loginExpirationInDays === null && this.expireTokenInterval) {\n          Meteor.clearInterval(this.expireTokenInterval);\n          this.expireTokenInterval = null;\n        }\n        return superResult;\n      }\n      // Called by accounts-password\n      async insertUserDoc(options, user) {\n        // - clone user document, to protect from modification\n        // - add createdAt timestamp\n        // - prepare an _id, so that you can modify other collections (eg\n        // create a first task for every new user)\n        //\n        // XXX If the onCreateUser or validateNewUser hooks fail, we might\n        // end up having modified some other collection\n        // inappropriately. The solution is probably to have onCreateUser\n        // accept two callbacks - one that gets called before inserting\n        // the user document (in which you can modify its contents), and\n        // one that gets called after (in which you should change other\n        // collections)\n        user = _objectSpread({\n          createdAt: new Date(),\n          _id: Random.id()\n        }, user);\n        if (user.services) {\n          Object.keys(user.services).forEach(service => pinEncryptedFieldsToUser(user.services[service], user._id));\n        }\n        let fullUser;\n        if (this._onCreateUserHook) {\n          // Allows _onCreateUserHook to be a promise returning func\n          fullUser = await this._onCreateUserHook(options, user);\n\n          // This is *not* part of the API. We need this because we can't isolate\n          // the global server environment between tests, meaning we can't test\n          // both having a create user hook set and not having one set.\n          if (fullUser === 'TEST DEFAULT HOOK') fullUser = defaultCreateUserHook(options, user);\n        } else {\n          fullUser = defaultCreateUserHook(options, user);\n        }\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(this._validateNewUserHooks), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const hook = _step.value;\n            {\n              if (!(await hook(fullUser))) throw new Meteor.Error(403, \"User validation failed\");\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        let userId;\n        try {\n          userId = await this.users.insertAsync(fullUser);\n        } catch (e) {\n          // XXX string parsing sucks, maybe\n          // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n          // https://jira.mongodb.org/browse/SERVER-4637\n          if (!e.errmsg) throw e;\n          if (e.errmsg.includes('emails.address')) throw new Meteor.Error(403, \"Email already exists.\");\n          if (e.errmsg.includes('username')) throw new Meteor.Error(403, \"Username already exists.\");\n          throw e;\n        }\n        return userId;\n      }\n      // Helper function: returns false if email does not match company domain from\n      // the configuration.\n      _testEmailDomain(email) {\n        const domain = this._options.restrictCreationByEmailDomain;\n        return !domain || typeof domain === 'function' && domain(email) || typeof domain === 'string' && new RegExp(\"@\".concat(Meteor._escapeRegExp(domain), \"$\"), 'i').test(email);\n      }\n      ///\n      /// CLEAN UP FOR `logoutOtherClients`\n      ///\n\n      async _deleteSavedTokensForUser(userId, tokensToDelete) {\n        if (tokensToDelete) {\n          await this.users.updateAsync(userId, {\n            $unset: {\n              \"services.resume.haveLoginTokensToDelete\": 1,\n              \"services.resume.loginTokensToDelete\": 1\n            },\n            $pullAll: {\n              \"services.resume.loginTokens\": tokensToDelete\n            }\n          });\n        }\n      }\n      _deleteSavedTokensForAllUsersOnStartup() {\n        // If we find users who have saved tokens to delete on startup, delete\n        // them now. It's possible that the server could have crashed and come\n        // back up before new tokens are found in localStorage, but this\n        // shouldn't happen very often. We shouldn't put a delay here because\n        // that would give a lot of power to an attacker with a stolen login\n        // token and the ability to crash the server.\n        Meteor.startup(async () => {\n          const users = await this.users.find({\n            \"services.resume.haveLoginTokensToDelete\": true\n          }, {\n            fields: {\n              \"services.resume.loginTokensToDelete\": 1\n            }\n          });\n          users.forEach(user => {\n            this._deleteSavedTokensForUser(user._id, user.services.resume.loginTokensToDelete)\n            // We don't need to wait for this to complete.\n            .then(_ => _).catch(err => {\n              console.log(err);\n            });\n          });\n        });\n      }\n      ///\n      /// MANAGING USER OBJECTS\n      ///\n\n      // Updates or creates a user after we authenticate with a 3rd party.\n      //\n      // @param serviceName {String} Service name (eg, twitter).\n      // @param serviceData {Object} Data to store in the user's record\n      //        under services[serviceName]. Must include an \"id\" field\n      //        which is a unique identifier for the user in the service.\n      // @param options {Object, optional} Other options to pass to insertUserDoc\n      //        (eg, profile)\n      // @returns {Object} Object with token and id keys, like the result\n      //        of the \"login\" method.\n      //\n      async updateOrCreateUserFromExternalService(serviceName, serviceData, options) {\n        options = _objectSpread({}, options);\n        if (serviceName === \"password\" || serviceName === \"resume\") {\n          throw new Error(\"Can't use updateOrCreateUserFromExternalService with internal service \" + serviceName);\n        }\n        if (!hasOwn.call(serviceData, 'id')) {\n          throw new Error(\"Service data for service \".concat(serviceName, \" must include id\"));\n        }\n\n        // Look for a user with the appropriate service user id.\n        const selector = {};\n        const serviceIdKey = \"services.\".concat(serviceName, \".id\");\n\n        // XXX Temporary special case for Twitter. (Issue #629)\n        //   The serviceData.id will be a string representation of an integer.\n        //   We want it to match either a stored string or int representation.\n        //   This is to cater to earlier versions of Meteor storing twitter\n        //   user IDs in number form, and recent versions storing them as strings.\n        //   This can be removed once migration technology is in place, and twitter\n        //   users stored with integer IDs have been migrated to string IDs.\n        if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n          selector[\"$or\"] = [{}, {}];\n          selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n          selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n        } else {\n          selector[serviceIdKey] = serviceData.id;\n        }\n        let user = await this.users.findOneAsync(selector, {\n          fields: this._options.defaultFieldSelector\n        });\n        // Check to see if the developer has a custom way to find the user outside\n        // of the general selectors above.\n        if (!user && this._additionalFindUserOnExternalLogin) {\n          user = await this._additionalFindUserOnExternalLogin({\n            serviceName,\n            serviceData,\n            options\n          });\n        }\n\n        // Before continuing, run user hook to see if we should continue\n        if (this._beforeExternalLoginHook && !(await this._beforeExternalLoginHook(serviceName, serviceData, user))) {\n          throw new Meteor.Error(403, \"Login forbidden\");\n        }\n\n        // When creating a new user we pass through all options. When updating an\n        // existing user, by default we only process/pass through the serviceData\n        // (eg, so that we keep an unexpired access token and don't cache old email\n        // addresses in serviceData.email). The onExternalLogin hook can be used when\n        // creating or updating a user, to modify or pass through more options as\n        // needed.\n        let opts = user ? {} : options;\n        if (this._onExternalLoginHook) {\n          opts = await this._onExternalLoginHook(options, user);\n        }\n        if (user) {\n          await pinEncryptedFieldsToUser(serviceData, user._id);\n          let setAttrs = {};\n          Object.keys(serviceData).forEach(key => setAttrs[\"services.\".concat(serviceName, \".\").concat(key)] = serviceData[key]);\n\n          // XXX Maybe we should re-use the selector above and notice if the update\n          //     touches nothing?\n          setAttrs = _objectSpread(_objectSpread({}, setAttrs), opts);\n          await this.users.updateAsync(user._id, {\n            $set: setAttrs\n          });\n          return {\n            type: serviceName,\n            userId: user._id\n          };\n        } else {\n          // Create a new user with the service data.\n          user = {\n            services: {}\n          };\n          user.services[serviceName] = serviceData;\n          const userId = await this.insertUserDoc(opts, user);\n          return {\n            type: serviceName,\n            userId\n          };\n        }\n      }\n      /**\n       * @summary Removes default rate limiting rule\n       * @locus Server\n       * @importFromPackage accounts-base\n       */\n      removeDefaultRateLimit() {\n        const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n        this.defaultRateLimiterRuleId = null;\n        return resp;\n      }\n      /**\n       * @summary Add a default rule of limiting logins, creating new users and password reset\n       * to 5 times every 10 seconds per connection.\n       * @locus Server\n       * @importFromPackage accounts-base\n       */\n      addDefaultRateLimit() {\n        if (!this.defaultRateLimiterRuleId) {\n          this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n            userId: null,\n            clientAddress: null,\n            type: 'method',\n            name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword'].includes(name),\n            connectionId: connectionId => true\n          }, 5, 10000);\n        }\n      }\n      /**\n       * @summary Creates options for email sending for reset password and enroll account emails.\n       * You can use this function when customizing a reset password or enroll account email sending.\n       * @locus Server\n       * @param {Object} email Which address of the user's to send the email to.\n       * @param {Object} user The user object to generate options for.\n       * @param {String} url URL to which user is directed to confirm the email.\n       * @param {String} reason `resetPassword` or `enrollAccount`.\n       * @returns {Object} Options which can be passed to `Email.send`.\n       * @importFromPackage accounts-base\n       */\n      async generateOptionsForEmail(email, user, url, reason) {\n        let extra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        const options = {\n          to: email,\n          from: this.emailTemplates[reason].from ? await this.emailTemplates[reason].from(user) : this.emailTemplates.from,\n          subject: await this.emailTemplates[reason].subject(user, url, extra)\n        };\n        if (typeof this.emailTemplates[reason].text === 'function') {\n          options.text = await this.emailTemplates[reason].text(user, url, extra);\n        }\n        if (typeof this.emailTemplates[reason].html === 'function') {\n          options.html = await this.emailTemplates[reason].html(user, url, extra);\n        }\n        if (typeof this.emailTemplates.headers === 'object') {\n          options.headers = this.emailTemplates.headers;\n        }\n        return options;\n      }\n      async _checkForCaseInsensitiveDuplicates(fieldName, displayName, fieldValue, ownUserId) {\n        // Some tests need the ability to add users with the same case insensitive\n        // value, hence the _skipCaseInsensitiveChecksForTest check\n        const skipCheck = Object.prototype.hasOwnProperty.call(this._skipCaseInsensitiveChecksForTest, fieldValue);\n        if (fieldValue && !skipCheck) {\n          const matchedUsers = await Meteor.users.find(this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue), {\n            fields: {\n              _id: 1\n            },\n            // we only need a maximum of 2 users for the logic below to work\n            limit: 2\n          }).fetchAsync();\n          if (matchedUsers.length > 0 && (\n          // If we don't have a userId yet, any match we find is a duplicate\n          !ownUserId ||\n          // Otherwise, check to see if there are multiple matches or a match\n          // that is not us\n          matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)) {\n            this._handleError(\"\".concat(displayName, \" already exists.\"));\n          }\n        }\n      }\n      async _createUserCheckingDuplicates(_ref) {\n        let {\n          user,\n          email,\n          username,\n          options\n        } = _ref;\n        const newUser = _objectSpread(_objectSpread(_objectSpread({}, user), username ? {\n          username\n        } : {}), email ? {\n          emails: [{\n            address: email,\n            verified: false\n          }]\n        } : {});\n\n        // Perform a case insensitive check before insert\n        await this._checkForCaseInsensitiveDuplicates('username', 'Username', username);\n        await this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n        const userId = await this.insertUserDoc(options, newUser);\n        // Perform another check after insert, in case a matching user has been\n        // inserted in the meantime\n        try {\n          await this._checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n          await this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n        } catch (ex) {\n          // Remove inserted user if the check fails\n          await Meteor.users.removeAsync(userId);\n          throw ex;\n        }\n        return userId;\n      }\n    }\n    // Give each login hook callback a fresh cloned copy of the attempt\n    // object, but don't clone the connection.\n    //\n    const cloneAttemptWithConnection = (connection, attempt) => {\n      const clonedAttempt = EJSON.clone(attempt);\n      clonedAttempt.connection = connection;\n      return clonedAttempt;\n    };\n    const tryLoginMethod = async (type, fn) => {\n      let result;\n      try {\n        result = await fn();\n      } catch (e) {\n        result = {\n          error: e\n        };\n      }\n      if (result && !result.type && type) result.type = type;\n      return result;\n    };\n    const setupDefaultLoginHandlers = accounts => {\n      accounts.registerLoginHandler(\"resume\", function (options) {\n        return defaultResumeLoginHandler.call(this, accounts, options);\n      });\n    };\n\n    // Login handler for resume tokens.\n    const defaultResumeLoginHandler = async (accounts, options) => {\n      if (!options.resume) return undefined;\n      check(options.resume, String);\n      const hashedToken = accounts._hashLoginToken(options.resume);\n\n      // First look for just the new-style hashed login token, to avoid\n      // sending the unhashed token to the database in a query if we don't\n      // need to.\n      let user = await accounts.users.findOneAsync({\n        \"services.resume.loginTokens.hashedToken\": hashedToken\n      }, {\n        fields: {\n          \"services.resume.loginTokens.$\": 1\n        }\n      });\n      if (!user) {\n        // If we didn't find the hashed login token, try also looking for\n        // the old-style unhashed token.  But we need to look for either\n        // the old-style token OR the new-style token, because another\n        // client connection logging in simultaneously might have already\n        // converted the token.\n        user = await accounts.users.findOneAsync({\n          $or: [{\n            \"services.resume.loginTokens.hashedToken\": hashedToken\n          }, {\n            \"services.resume.loginTokens.token\": options.resume\n          }]\n        },\n        // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n        {\n          fields: {\n            \"services.resume.loginTokens\": 1\n          }\n        });\n      }\n      if (!user) return {\n        error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n      };\n\n      // Find the token, which will either be an object with fields\n      // {hashedToken, when} for a hashed token or {token, when} for an\n      // unhashed token.\n      let oldUnhashedStyleToken;\n      let token = await user.services.resume.loginTokens.find(token => token.hashedToken === hashedToken);\n      if (token) {\n        oldUnhashedStyleToken = false;\n      } else {\n        token = await user.services.resume.loginTokens.find(token => token.token === options.resume);\n        oldUnhashedStyleToken = true;\n      }\n      const tokenExpires = accounts._tokenExpiration(token.when);\n      if (new Date() >= tokenExpires) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n      };\n\n      // Update to a hashed token when an unhashed token is encountered.\n      if (oldUnhashedStyleToken) {\n        // Only add the new hashed token if the old unhashed token still\n        // exists (this avoids resurrecting the token if it was deleted\n        // after we read it).  Using $addToSet avoids getting an index\n        // error if another client logging in simultaneously has already\n        // inserted the new hashed token.\n        await accounts.users.updateAsync({\n          _id: user._id,\n          \"services.resume.loginTokens.token\": options.resume\n        }, {\n          $addToSet: {\n            \"services.resume.loginTokens\": {\n              \"hashedToken\": hashedToken,\n              \"when\": token.when\n            }\n          }\n        });\n\n        // Remove the old token *after* adding the new, since otherwise\n        // another client trying to login between our removing the old and\n        // adding the new wouldn't find a token to login with.\n        await accounts.users.updateAsync(user._id, {\n          $pull: {\n            \"services.resume.loginTokens\": {\n              \"token\": options.resume\n            }\n          }\n        });\n      }\n      return {\n        userId: user._id,\n        stampedLoginToken: {\n          token: options.resume,\n          when: token.when\n        }\n      };\n    };\n    const expirePasswordToken = async (accounts, oldestValidDate, tokenFilter, userId) => {\n      // boolean value used to determine if this method was called from enroll account workflow\n      let isEnroll = false;\n      const userFilter = userId ? {\n        _id: userId\n      } : {};\n      // check if this method was called from enroll account workflow\n      if (tokenFilter['services.password.enroll.reason']) {\n        isEnroll = true;\n      }\n      let resetRangeOr = {\n        $or: [{\n          \"services.password.reset.when\": {\n            $lt: oldestValidDate\n          }\n        }, {\n          \"services.password.reset.when\": {\n            $lt: +oldestValidDate\n          }\n        }]\n      };\n      if (isEnroll) {\n        resetRangeOr = {\n          $or: [{\n            \"services.password.enroll.when\": {\n              $lt: oldestValidDate\n            }\n          }, {\n            \"services.password.enroll.when\": {\n              $lt: +oldestValidDate\n            }\n          }]\n        };\n      }\n      const expireFilter = {\n        $and: [tokenFilter, resetRangeOr]\n      };\n      if (isEnroll) {\n        await accounts.users.updateAsync(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n          $unset: {\n            \"services.password.enroll\": \"\"\n          }\n        }, {\n          multi: true\n        });\n      } else {\n        await accounts.users.updateAsync(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n          $unset: {\n            \"services.password.reset\": \"\"\n          }\n        }, {\n          multi: true\n        });\n      }\n    };\n    const setExpireTokensInterval = accounts => {\n      accounts.expireTokenInterval = Meteor.setInterval(async () => {\n        await accounts._expireTokens();\n        await accounts._expirePasswordResetTokens();\n        await accounts._expirePasswordEnrollTokens();\n      }, EXPIRE_TOKENS_INTERVAL_MS);\n    };\n    const OAuthEncryption = (_Package$oauthEncryp = Package[\"oauth-encryption\"]) === null || _Package$oauthEncryp === void 0 ? void 0 : _Package$oauthEncryp.OAuthEncryption;\n\n    // OAuth service data is temporarily stored in the pending credentials\n    // collection during the oauth authentication process.  Sensitive data\n    // such as access tokens are encrypted without the user id because\n    // we don't know the user id yet.  We re-encrypt these fields with the\n    // user id included when storing the service data permanently in\n    // the users collection.\n    //\n    const pinEncryptedFieldsToUser = (serviceData, userId) => {\n      Object.keys(serviceData).forEach(key => {\n        let value = serviceData[key];\n        if (OAuthEncryption !== null && OAuthEncryption !== void 0 && OAuthEncryption.isSealed(value)) value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n        serviceData[key] = value;\n      });\n    };\n\n    // XXX see comment on Accounts.createUser in passwords_server about adding a\n    // second \"server options\" argument.\n    const defaultCreateUserHook = (options, user) => {\n      if (options.profile) user.profile = options.profile;\n      return user;\n    };\n\n    // Validate new user's email or Google/Facebook/GitHub account's email\n    function defaultValidateNewUserHook(user) {\n      const domain = this._options.restrictCreationByEmailDomain;\n      if (!domain) {\n        return true;\n      }\n      let emailIsGood = false;\n      if (user.emails && user.emails.length > 0) {\n        emailIsGood = user.emails.reduce((prev, email) => prev || this._testEmailDomain(email.address), false);\n      } else if (user.services && Object.values(user.services).length > 0) {\n        // Find any email of any service and check it\n        emailIsGood = Object.values(user.services).reduce((prev, service) => service.email && this._testEmailDomain(service.email), false);\n      }\n      if (emailIsGood) {\n        return true;\n      }\n      if (typeof domain === 'string') {\n        throw new Meteor.Error(403, \"@\".concat(domain, \" email required\"));\n      } else {\n        throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n      }\n    }\n    const setupUsersCollection = async users => {\n      ///\n      /// RESTRICTING WRITES TO USER OBJECTS\n      ///\n      users.allow({\n        // clients can modify the profile field of their own document, and\n        // nothing else.\n        update: (userId, user, fields, modifier) => {\n          // make sure it is our record\n          if (user._id !== userId) {\n            return false;\n          }\n\n          // user can only modify the 'profile' field. sets to multiple\n          // sub-keys (eg profile.foo and profile.bar) are merged into entry\n          // in the fields list.\n          if (fields.length !== 1 || fields[0] !== 'profile') {\n            return false;\n          }\n          return true;\n        },\n        updateAsync: (userId, user, fields, modifier) => {\n          // make sure it is our record\n          if (user._id !== userId) {\n            return false;\n          }\n\n          // user can only modify the 'profile' field. sets to multiple\n          // sub-keys (eg profile.foo and profile.bar) are merged into entry\n          // in the fields list.\n          if (fields.length !== 1 || fields[0] !== 'profile') {\n            return false;\n          }\n          return true;\n        },\n        fetch: ['_id'] // we only look at _id.\n      });\n\n      /// DEFAULT INDEXES ON USERS\n      await users.createIndexAsync('username', {\n        unique: true,\n        sparse: true\n      });\n      await users.createIndexAsync('emails.address', {\n        unique: true,\n        sparse: true\n      });\n      await users.createIndexAsync('services.resume.loginTokens.hashedToken', {\n        unique: true,\n        sparse: true\n      });\n      await users.createIndexAsync('services.resume.loginTokens.token', {\n        unique: true,\n        sparse: true\n      });\n      // For taking care of logoutOtherClients calls that crashed before the\n      // tokens were deleted.\n      await users.createIndexAsync('services.resume.haveLoginTokensToDelete', {\n        sparse: true\n      });\n      // For expiring login tokens\n      await users.createIndexAsync(\"services.resume.loginTokens.when\", {\n        sparse: true\n      });\n      // For expiring password tokens\n      await users.createIndexAsync('services.password.reset.when', {\n        sparse: true\n      });\n      await users.createIndexAsync('services.password.enroll.when', {\n        sparse: true\n      });\n    };\n\n    // Generates permutations of all case variations of a given string.\n    const generateCasePermutationsForString = string => {\n      let permutations = [''];\n      for (let i = 0; i < string.length; i++) {\n        const ch = string.charAt(i);\n        permutations = [].concat(...permutations.map(prefix => {\n          const lowerCaseChar = ch.toLowerCase();\n          const upperCaseChar = ch.toUpperCase();\n          // Don't add unnecessary permutations when ch is not a letter\n          if (lowerCaseChar === upperCaseChar) {\n            return [prefix + ch];\n          } else {\n            return [prefix + lowerCaseChar, prefix + upperCaseChar];\n          }\n        }));\n      }\n      return permutations;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_asyncIterator","_Package$oauthEncryp","_excluded","export","AccountsServer","crypto","Meteor","AccountsCommon","EXPIRE_TOKENS_INTERVAL_MS","URL","__reifyWaitForDeps__","hasOwn","Object","prototype","hasOwnProperty","NonEmptyString","Match","Where","x","check","String","length","constructor","server","options","_this","this","onCreateLoginToken","func","_onCreateLoginTokenHook","Error","_selectorForFastCaseInsensitiveLookup","fieldName","string","prefix","substring","Math","min","orClause","generateCasePermutationsForString","map","prefixPermutation","selector","RegExp","concat","_escapeRegExp","caseInsensitiveClause","$and","$or","_findUserByQuery","query","user","id","users","findOneAsync","_addDefaultFieldSelector","fieldValue","username","email","candidateUsers","find","limit","fetchAsync","_handleError","msg","_this$_options$ambigu","throwError","arguments","undefined","errorCode","isErrorAmbiguous","_options","ambiguousErrorMessages","error","_userQueryValidator","Optional","keys","_server","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_defaultPublishFields","projection","profile","emails","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","Hook","bindEnvironment","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","urls","resetPassword","token","extraParams","buildEmailUrl","verifyEmail","loginToken","enrollAccount","addDefaultRateLimit","path","url","absoluteUrl","params","entries","key","value","searchParams","append","toString","userId","currentInvocation","DDP","_CurrentMethodInvocation","get","_CurrentPublicationInvocation","init","setupUsersCollection","validateLoginAttempt","register","validateNewUser","push","beforeExternalLogin","_beforeExternalLoginHook","onCreateUser","_onCreateUserHook","wrapFn","onExternalLogin","_onExternalLoginHook","setAdditionalFindUserOnExternalLogin","_additionalFindUserOnExternalLogin","_validateLogin","connection","attempt","forEachAsync","callback","ret","cloneAttemptWithConnection","e","allowed","_successfulLogin","_onLoginHook","_failedLogin","_onLoginFailureHook","_successfulLogout","_onLogoutHook","fields","defaultFieldSelector","_loginUser","methodInvocation","stampedLoginToken","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","setUserId","tokenExpires","_tokenExpiration","when","_attemptLogin","methodName","methodArgs","result","type","methodArguments","Array","from","o","_loginMethod","fn","tryLoginMethod","_reportLoginFailure","registerLoginHandler","name","handler","_runLoginHandlers","call","destroyToken","updateAsync","$pull","hashedToken","accounts","methods","login","logout","_getLoginToken","getNewToken","currentHashedToken","currentStampedToken","services","resume","loginTokens","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","ObjectIncluding","service","oauth","serviceNames","includes","Package","ServiceConfiguration","configurations","OAuthEncryption","keyIsLoaded","secret","seal","insertAsync","onConnection","onClose","_removeTokenFromConnection","publish","ready","is_auto","startup","customFields","_id","autopublish","toFieldSelector","reduce","prev","field","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","setDefaultPublishFields","_getAccountData","connectionId","data","_setAccountData","hash","createHash","update","digest","_hashStampedToken","hashedStampedToken","_insertHashedLoginToken","$addToSet","_clearAllLoginTokens","$set","_getUserObserve","observe","stop","newToken","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","nonMutatingCallbacks","Random","Date","_expirePasswordResetTokens","oldestValidDate","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","tokenFilter","$exists","expirePasswordToken","_expirePasswordEnrollTokens","_getPasswordEnrollTokenLifetimeMs","_expireTokens","_getTokenLifetimeMs","userFilter","$lt","multi","config","superResult","loginExpirationInDays","expireTokenInterval","clearInterval","insertUserDoc","createdAt","forEach","pinEncryptedFieldsToUser","fullUser","defaultCreateUserHook","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","hook","err","return","errmsg","_testEmailDomain","domain","restrictCreationByEmailDomain","test","_deleteSavedTokensForUser","tokensToDelete","$unset","$pullAll","loginTokensToDelete","then","_","catch","console","log","updateOrCreateUserFromExternalService","serviceName","serviceData","serviceIdKey","isNaN","parseInt","setAttrs","removeDefaultRateLimit","resp","DDPRateLimiter","removeRule","defaultRateLimiterRuleId","addRule","clientAddress","generateOptionsForEmail","reason","extra","to","emailTemplates","subject","text","html","headers","_checkForCaseInsensitiveDuplicates","displayName","ownUserId","skipCheck","matchedUsers","_createUserCheckingDuplicates","_ref","newUser","address","verified","ex","removeAsync","clonedAttempt","EJSON","clone","defaultResumeLoginHandler","oldUnhashedStyleToken","isEnroll","resetRangeOr","expireFilter","setInterval","isSealed","open","emailIsGood","values","allow","modifier","fetch","createIndexAsync","unique","sparse","permutations","i","ch","charAt","lowerCaseChar","toLowerCase","upperCaseChar","toUpperCase","__reify_async_result__","_reifyError","self","async"],"sources":["packages/accounts-base/accounts_server.js"],"sourcesContent":["import crypto from 'crypto';\nimport { Meteor } from 'meteor/meteor';\nimport {\n  AccountsCommon,\n  EXPIRE_TOKENS_INTERVAL_MS,\n} from './accounts_common.js';\nimport { URL } from 'meteor/url';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server, options) {\n    super(options || {});\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1,\n      }\n    };\n\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(`#/reset-password/${token}`, extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(`#/verify-email/${token}`, extraParams),\n      loginToken: (selector, token, extraParams) =>\n        this.buildEmailUrl(`/?loginToken=${token}&selector=${selector}`, extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(`#/enroll-account/${token}`, extraParams),\n    };\n\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = (path, extraParams = {}) => {\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n      return url.toString();\n    };\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the information from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  async init() {\n    await setupUsersCollection(this.users);\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize login token creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new token is created.\n   * Return the sequence and the user object. Return true to keep sending the default email, or false to override the behavior.\n   */\n  onCreateLoginToken = function(func) {\n    if (this._onCreateLoginTokenHook) {\n      throw new Error('Can only call onCreateLoginToken once');\n    }\n\n    this._onCreateLoginTokenHook = func;\n  }\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = Meteor.wrapFn(func);\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n  /**\n   * @summary Customize user selection on external logins\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth and a\n   * user is not found with the service id. Return the user or undefined.\n   */\n  setAdditionalFindUserOnExternalLogin(func) {\n    if (this._additionalFindUserOnExternalLogin) {\n      throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n    }\n    this._additionalFindUserOnExternalLogin = func;\n  }\n\n  async _validateLogin(connection, attempt) {\n    await this._validateLoginHook.forEachAsync(async (callback) => {\n      let ret;\n      try {\n        ret = await callback(cloneAttemptWithConnection(connection, attempt));\n      }\n      catch (e) {\n        attempt.allowed = false;\n        // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n        attempt.error = e;\n        return true;\n      }\n      if (! ret) {\n        attempt.allowed = false;\n        // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n        if (!attempt.error)\n          attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n      return true;\n    });\n  };\n\n  async _successfulLogin(connection, attempt) {\n    await this._onLoginHook.forEachAsync(async (callback) => {\n      await callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  async _failedLogin(connection, attempt) {\n    await this._onLoginFailureHook.forEachAsync(async (callback) => {\n      await callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  async _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n    await this._onLogoutHook.forEachAsync(async callback => {\n      if (!user && userId) user = await this.users.findOneAsync(userId, { fields: this._options.defaultFieldSelector });\n      callback({ user, connection });\n      return true;\n    });\n  };\n\n  // Generates a MongoDB selector that can be used to perform a fast case\n  // insensitive lookup for the given fieldName and string. Since MongoDB does\n  // not support case insensitive indexes, and case insensitive regex queries\n  // are slow, we construct a set of prefix selectors for all permutations of\n  // the first 4 characters ourselves. We first attempt to matching against\n  // these, and because 'prefix expression' regex queries do use indexes (see\n  // http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n  // this has been found to greatly improve performance (from 1200ms to 5ms in a\n  // test with 1.000.000 users).\n  _selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n    // Performance seems to improve up to 4 prefix characters\n    const prefix = string.substring(0, Math.min(string.length, 4));\n    const orClause = generateCasePermutationsForString(prefix).map(\n        prefixPermutation => {\n          const selector = {};\n          selector[fieldName] =\n              new RegExp(`^${Meteor._escapeRegExp(prefixPermutation)}`);\n          return selector;\n        });\n    const caseInsensitiveClause = {};\n    caseInsensitiveClause[fieldName] =\n        new RegExp(`^${Meteor._escapeRegExp(string)}$`, 'i')\n    return {$and: [{$or: orClause}, caseInsensitiveClause]};\n  }\n\n  _findUserByQuery = async (query, options) => {\n    let user = null;\n\n    if (query.id) {\n      // default field selector is added within getUserById()\n      user = await Meteor.users.findOneAsync(query.id, this._addDefaultFieldSelector(options));\n    } else {\n      options = this._addDefaultFieldSelector(options);\n      let fieldName;\n      let fieldValue;\n      if (query.username) {\n        fieldName = 'username';\n        fieldValue = query.username;\n      } else if (query.email) {\n        fieldName = 'emails.address';\n        fieldValue = query.email;\n      } else {\n        throw new Error(\"shouldn't happen (validation missed something)\");\n      }\n      let selector = {};\n      selector[fieldName] = fieldValue;\n      user = await Meteor.users.findOneAsync(selector, options);\n      // If user is not found, try a case insensitive lookup\n      if (!user) {\n        selector = this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n        const candidateUsers = await Meteor.users.find(selector, { ...options, limit: 2 }).fetchAsync();\n        // No match if multiple candidates are found\n        if (candidateUsers.length === 1) {\n          user = candidateUsers[0];\n        }\n      }\n    }\n\n    return user;\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  async _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (! stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n      await this._insertLoginToken(userId, stampedLoginToken);\n    }\n\n    // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n    Meteor._noYieldsAllowed(() =>\n      this._setLoginToken(\n        userId,\n        methodInvocation.connection,\n        this._hashLoginToken(stampedLoginToken.token)\n      )\n    );\n\n    await methodInvocation.setUserId(userId);\n\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  };\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  async _attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    if (!result)\n      throw new Error(\"result is required\");\n\n    // XXX A programming error in a login handler can lead to this occurring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n    if (!result.userId && !result.error)\n      throw new Error(\"A login method must specify a userId or an error\");\n\n    let user;\n    if (result.userId)\n      user = await this.users.findOneAsync(result.userId, {fields: this._options.defaultFieldSelector});\n\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !! (result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n    if (result.error) {\n      attempt.error = result.error;\n    }\n    if (user) {\n      attempt.user = user;\n    }\n\n    // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n    await this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const o = await this._loginUser(\n        methodInvocation,\n        result.userId,\n        result.stampedLoginToken\n      )\n      const ret = {\n        ...o,\n        ...result.options\n      };\n      ret.type = attempt.type;\n      await this._successfulLogin(methodInvocation.connection, attempt);\n      return ret;\n    }\n    else {\n      await this._failedLogin(methodInvocation.connection, attempt);\n      throw attempt.error;\n    }\n  };\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  async _loginMethod(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    type,\n    fn\n  ) {\n    return await this._attemptLogin(\n      methodInvocation,\n      methodName,\n      methodArgs,\n      await tryLoginMethod(type, fn)\n    );\n  };\n\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  async _reportLoginFailure(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOneAsync(result.userId, {fields: this._options.defaultFieldSelector});\n    }\n\n    await this._validateLogin(methodInvocation.connection, attempt);\n    await this._failedLogin(methodInvocation.connection, attempt);\n\n    // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n    return attempt;\n  };\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n\n  /**\n   * @summary Registers a new login handler.\n   * @locus Server\n   * @param {String} [name] The type of login method like oauth, password, etc.\n   * @param {Function} handler A function that receives an options object\n   * (as passed as an argument to the `login` method) and returns one of\n   * `undefined`, meaning don't handle or a login method result object.\n   */\n  registerLoginHandler(name, handler) {\n    if (! handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: Meteor.wrapFn(handler)\n    });\n  };\n\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  async _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = await tryLoginMethod(handler.name, async () =>\n        await handler.handler.call(methodInvocation, options)\n      );\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(\n          400,\n          'A login handler should return a result or undefined'\n        );\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  };\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  async destroyToken(userId, loginToken) {\n    await this.users.updateAsync(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { hashedToken: loginToken },\n            { token: loginToken }\n          ]\n        }\n      }\n    });\n  };\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this;\n\n\n    // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n    const methods = {};\n\n    // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n    methods.login = async function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = await accounts._runLoginHandlers(this, options);\n      //console.log({result});\n\n      return await accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = async function () {\n      const token = accounts._getLoginToken(this.connection.id);\n      accounts._setLoginToken(this.userId, this.connection, null);\n      if (token && this.userId) {\n       await accounts.destroyToken(this.userId, token);\n      }\n      await accounts._successfulLogout(this.connection, this.userId);\n      await this.setUserId(null);\n    };\n\n    // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n    methods.getNewToken = async function () {\n      const user = await accounts.users.findOneAsync(this.userId, {\n        fields: { \"services.resume.loginTokens\": 1 }\n      });\n      if (! this.userId || ! user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n      const currentStampedToken = user.services.resume.loginTokens.find(\n        stampedToken => stampedToken.hashedToken === currentHashedToken\n      );\n      if (! currentStampedToken) { // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n      const newStampedToken = accounts._generateStampedLoginToken();\n      newStampedToken.when = currentStampedToken.when;\n      await accounts._insertLoginToken(this.userId, newStampedToken);\n      return await accounts._loginUser(this, this.userId, newStampedToken);\n    };\n\n    // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n    methods.removeOtherTokens = async function () {\n      if (! this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      const currentToken = accounts._getLoginToken(this.connection.id);\n      await accounts.users.updateAsync(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n        }\n      });\n    };\n\n    // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n    methods.configureLoginService = async (options) => {\n      check(options, Match.ObjectIncluding({service: String}));\n      // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n      if (!(accounts.oauth\n        && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      if (Package['service-configuration']) {\n        const { ServiceConfiguration } = Package['service-configuration'];\n        const service = await ServiceConfiguration.configurations.findOneAsync({service: options.service})\n        if (service)\n          throw new Meteor.Error(403, `Service ${options.service} already configured`);\n\n        if (Package[\"oauth-encryption\"]) {\n          const { OAuthEncryption } = Package[\"oauth-encryption\"]\n          if (hasOwn.call(options, 'secret') && OAuthEncryption.keyIsLoaded())\n            options.secret = OAuthEncryption.seal(options.secret);\n        }\n\n        await ServiceConfiguration.configurations.insertAsync(options);\n      }\n    };\n\n    accounts._server.methods(methods);\n  };\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n        delete this._accountData[connection.id];\n      });\n    });\n  };\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const { users, _autopublishFields, _defaultPublishFields } = this;\n\n    // Publish all login service configuration fields other than secret.\n    this._server.publish(\"meteor.loginServiceConfiguration\", function() {\n      if (Package['service-configuration']) {\n        const { ServiceConfiguration } = Package['service-configuration'];\n        return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n      }\n      this.ready();\n    }, {is_auto: true}); // not technically autopublish, but stops the warning.\n\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n    Meteor.startup(() => {\n      // Merge custom fields selector and default publish fields so that the client\n      // gets all the necessary fields to run properly\n      const customFields = this._addDefaultFieldSelector().fields || {};\n      const keys = Object.keys(customFields);\n      // If the custom fields are negative, then ignore them and only send the necessary fields\n      const fields = keys.length > 0 && customFields[keys[0]] ? {\n        ...this._addDefaultFieldSelector().fields,\n        ..._defaultPublishFields.projection\n      } : _defaultPublishFields.projection\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields,\n          });\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n\n    // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => (\n          { ...prev, [field]: 1 }),\n        {}\n      );\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({ _id: this.userId }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser),\n          })\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n\n      // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n      this._server.publish(null, function () {\n        const selector = this.userId ? { _id: { $ne: this.userId } } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers),\n        })\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n  };\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(\n      this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n    this._autopublishFields.otherUsers.push.apply(\n      this._autopublishFields.otherUsers, opts.forOtherUsers);\n  };\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  };\n\n  ///\n  /// ACCOUNT DATA\n  ///\n\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  };\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId];\n\n    // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n    if (!data)\n      return;\n\n    if (value === undefined)\n      delete data[field];\n    else\n      data[field] = value;\n  };\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  };\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const { token, ...hashedStampedToken } = stampedToken;\n    return {\n      ...hashedStampedToken,\n      hashedToken: this._hashLoginToken(token)\n    };\n  };\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  async _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? { ...query } : {};\n    query._id = userId;\n    await this.users.updateAsync(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  };\n\n  // Exported for tests.\n  async _insertLoginToken(userId, stampedToken, query) {\n    await this._insertHashedLoginToken(\n      userId,\n      this._hashStampedToken(stampedToken),\n      query\n    );\n  };\n\n  /**\n   *\n   * @param userId\n   * @private\n   * @returns {Promise<void>}\n   */\n  _clearAllLoginTokens(userId) {\n    this.users.updateAsync(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  };\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  };\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  };\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  };\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(async () => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser;\n        // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n        const observe = await this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, { fields: { _id: 1 } }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close,\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }, { nonMutatingCallbacks: true });\n\n        // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (! foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  };\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date\n    };\n  };\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  async _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      $or: [\n        { \"services.password.reset.reason\": \"reset\"},\n        { \"services.password.reset.reason\": {$exists: false}}\n      ]\n    };\n\n   await expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  async _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      \"services.password.enroll.reason\": \"enroll\"\n    };\n\n    await expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  /**\n   *\n   * @param oldestValidDate\n   * @param userId\n   * @private\n   * @return {Promise<void>}\n   */\n  async _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n    const userFilter = userId ? {_id: userId} : {};\n\n\n    // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n    await this.users.updateAsync({ ...userFilter,\n      $or: [\n        { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n        { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n      ]\n    }, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { when: { $lt: oldestValidDate } },\n            { when: { $lt: +oldestValidDate } }\n          ]\n        }\n      }\n    }, { multi: true });\n    // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  };\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n    // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n    if (hasOwn.call(this._options, 'loginExpirationInDays') &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  };\n\n  // Called by accounts-password\n  async insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = {\n      createdAt: new Date(),\n      _id: Random.id(),\n      ...user,\n    };\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service =>\n        pinEncryptedFieldsToUser(user.services[service], user._id)\n      );\n    }\n\n    let fullUser;\n    if (this._onCreateUserHook) {\n      // Allows _onCreateUserHook to be a promise returning func\n      fullUser = await this._onCreateUserHook(options, user);\n\n      // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n      if (fullUser === 'TEST DEFAULT HOOK')\n        fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    for await (const hook of this._validateNewUserHooks) {\n      if (! await hook(fullUser))\n        throw new Meteor.Error(403, \"User validation failed\");\n    }\n\n    let userId;\n    try {\n      userId = await this.users.insertAsync(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      // https://jira.mongodb.org/browse/SERVER-4637\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address'))\n        throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username'))\n        throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n    return userId;\n  };\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n\n    return !domain ||\n      (typeof domain === 'function' && domain(email)) ||\n      (typeof domain === 'string' &&\n        (new RegExp(`@${Meteor._escapeRegExp(domain)}$`, 'i')).test(email));\n  };\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n\n  async _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      await this.users.updateAsync(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  };\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(async () => {\n      const users = await this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {\n        fields: {\n          \"services.resume.loginTokensToDelete\": 1\n        }\n      })\n      users.forEach(user => {\n        this._deleteSavedTokensForUser(\n          user._id,\n          user.services.resume.loginTokensToDelete\n        )\n          // We don't need to wait for this to complete.\n          .then(_ => _)\n          .catch(err => {\n            console.log(err);\n          });\n      });\n    });\n  };\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  async updateOrCreateUserFromExternalService(\n    serviceName,\n    serviceData,\n    options\n  ) {\n    options = { ...options };\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\n        \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n    }\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\n        `Service data for service ${serviceName} must include id`);\n    }\n\n    // Look for a user with the appropriate service user id.\n    const selector = {};\n    const serviceIdKey = `services.${serviceName}.id`;\n\n    // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{},{}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n    let user = await this.users.findOneAsync(selector, {fields: this._options.defaultFieldSelector});\n    // Check to see if the developer has a custom way to find the user outside\n    // of the general selectors above.\n    if (!user && this._additionalFindUserOnExternalLogin) {\n      user = await this._additionalFindUserOnExternalLogin({serviceName, serviceData, options})\n    }\n\n    // Before continuing, run user hook to see if we should continue\n    if (this._beforeExternalLoginHook && !(await this._beforeExternalLoginHook(serviceName, serviceData, user))) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n    let opts = user ? {} : options;\n    if (this._onExternalLoginHook) {\n      opts = await this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      await pinEncryptedFieldsToUser(serviceData, user._id);\n\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key =>\n        setAttrs[`services.${serviceName}.${key}`] = serviceData[key]\n      );\n\n      // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n      setAttrs = { ...setAttrs, ...opts };\n      await this.users.updateAsync(user._id, {\n        $set: setAttrs\n      });\n\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {services: {}};\n      user.services[serviceName] = serviceData;\n      const userId = await this.insertUserDoc(opts, user);\n      return {\n        type: serviceName,\n        userId\n      };\n    }\n  };\n\n  /**\n   * @summary Removes default rate limiting rule\n   * @locus Server\n   * @importFromPackage accounts-base\n   */\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  };\n\n  /**\n   * @summary Add a default rule of limiting logins, creating new users and password reset\n   * to 5 times every 10 seconds per connection.\n   * @locus Server\n   * @importFromPackage accounts-base\n   */\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword']\n          .includes(name),\n        connectionId: (connectionId) => true,\n      }, 5, 10000);\n    }\n  };\n\n  /**\n   * @summary Creates options for email sending for reset password and enroll account emails.\n   * You can use this function when customizing a reset password or enroll account email sending.\n   * @locus Server\n   * @param {Object} email Which address of the user's to send the email to.\n   * @param {Object} user The user object to generate options for.\n   * @param {String} url URL to which user is directed to confirm the email.\n   * @param {String} reason `resetPassword` or `enrollAccount`.\n   * @returns {Object} Options which can be passed to `Email.send`.\n   * @importFromPackage accounts-base\n   */\n  async generateOptionsForEmail(email, user, url, reason, extra = {}){\n    const options = {\n      to: email,\n      from: this.emailTemplates[reason].from\n        ? await this.emailTemplates[reason].from(user)\n        : this.emailTemplates.from,\n      subject: await this.emailTemplates[reason].subject(user, url, extra),\n    };\n\n    if (typeof this.emailTemplates[reason].text === 'function') {\n      options.text = await this.emailTemplates[reason].text(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates[reason].html === 'function') {\n      options.html = await this.emailTemplates[reason].html(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates.headers === 'object') {\n      options.headers = this.emailTemplates.headers;\n    }\n\n    return options;\n  };\n\n  async _checkForCaseInsensitiveDuplicates(\n    fieldName,\n    displayName,\n    fieldValue,\n    ownUserId\n  ) {\n    // Some tests need the ability to add users with the same case insensitive\n    // value, hence the _skipCaseInsensitiveChecksForTest check\n    const skipCheck = Object.prototype.hasOwnProperty.call(\n      this._skipCaseInsensitiveChecksForTest,\n      fieldValue\n    );\n\n    if (fieldValue && !skipCheck) {\n      const matchedUsers = await Meteor.users\n        .find(\n          this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue),\n          {\n            fields: { _id: 1 },\n            // we only need a maximum of 2 users for the logic below to work\n            limit: 2,\n          }\n        )\n        .fetchAsync();\n\n      if (\n        matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n          // Otherwise, check to see if there are multiple matches or a match\n          // that is not us\n          matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)\n      ) {\n        this._handleError(`${displayName} already exists.`);\n      }\n    }\n  };\n\n  async _createUserCheckingDuplicates({ user, email, username, options }) {\n    const newUser = {\n      ...user,\n      ...(username ? { username } : {}),\n      ...(email ? { emails: [{ address: email, verified: false }] } : {}),\n    };\n\n    // Perform a case insensitive check before insert\n    await this._checkForCaseInsensitiveDuplicates('username', 'Username', username);\n    await this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n    const userId = await this.insertUserDoc(options, newUser);\n    // Perform another check after insert, in case a matching user has been\n    // inserted in the meantime\n    try {\n      await this._checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n      await this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n    } catch (ex) {\n      // Remove inserted user if the check fails\n      await Meteor.users.removeAsync(userId);\n      throw ex;\n    }\n    return userId;\n  }\n\n  _handleError = (msg, throwError = true, errorCode = 403) => {\n    const isErrorAmbiguous = this._options.ambiguousErrorMessages ?? true;\n    const error = new Meteor.Error(\n      errorCode,\n      isErrorAmbiguous\n        ? 'Something went wrong. Please check your credentials.'\n        : msg\n    );\n    if (throwError) {\n      throw error;\n    }\n    return error;\n  }\n\n  _userQueryValidator = Match.Where(user => {\n    check(user, {\n      id: Match.Optional(NonEmptyString),\n      username: Match.Optional(NonEmptyString),\n      email: Match.Optional(NonEmptyString)\n    });\n    if (Object.keys(user).length !== 1)\n      throw new Match.Error(\"User property must have exactly one field\");\n    return true;\n  });\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = async (type, fn) => {\n  let result;\n  try {\n    result = await fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n};\n\n// Login handler for resume tokens.\nconst defaultResumeLoginHandler = async (accounts, options) => {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  let user = await accounts.users.findOneAsync(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken},\n    {fields: {\"services.resume.loginTokens.$\": 1}});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user =  await accounts.users.findOneAsync({\n        $or: [\n          {\"services.resume.loginTokens.hashedToken\": hashedToken},\n          {\"services.resume.loginTokens.token\": options.resume}\n        ]\n      },\n      // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n      {fields: {\"services.resume.loginTokens\": 1}});\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  let oldUnhashedStyleToken;\n  let token = await user.services.resume.loginTokens.find(token =>\n    token.hashedToken === hashedToken\n  );\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n     token = await user.services.resume.loginTokens.find(token =>\n      token.token === options.resume\n    );\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    await accounts.users.updateAsync(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n          \"services.resume.loginTokens\": {\n            \"hashedToken\": hashedToken,\n            \"when\": token.when\n          }\n        }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    await accounts.users.updateAsync(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken =\n  async (\n    accounts,\n    oldestValidDate,\n    tokenFilter,\n    userId\n  ) => {\n    // boolean value used to determine if this method was called from enroll account workflow\n    let isEnroll = false;\n    const userFilter = userId ? { _id: userId } : {};\n    // check if this method was called from enroll account workflow\n    if (tokenFilter['services.password.enroll.reason']) {\n      isEnroll = true;\n    }\n    let resetRangeOr = {\n      $or: [\n        { \"services.password.reset.when\": { $lt: oldestValidDate } },\n        { \"services.password.reset.when\": { $lt: +oldestValidDate } }\n      ]\n    };\n    if (isEnroll) {\n      resetRangeOr = {\n        $or: [\n          { \"services.password.enroll.when\": { $lt: oldestValidDate } },\n          { \"services.password.enroll.when\": { $lt: +oldestValidDate } }\n        ]\n      };\n    }\n    const expireFilter = { $and: [tokenFilter, resetRangeOr] };\n    if (isEnroll) {\n      await accounts.users.updateAsync({ ...userFilter, ...expireFilter }, {\n        $unset: {\n          \"services.password.enroll\": \"\"\n        }\n      }, { multi: true });\n    } else {\n      await accounts.users.updateAsync({ ...userFilter, ...expireFilter }, {\n        $unset: {\n          \"services.password.reset\": \"\"\n        }\n      }, { multi: true });\n    }\n\n  };\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(async () => {\n   await accounts._expireTokens();\n   await accounts._expirePasswordResetTokens();\n   await accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n};\n\nconst OAuthEncryption = Package[\"oauth-encryption\"]?.OAuthEncryption;\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption?.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n};\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce(\n      (prev, email) => prev || this._testEmailDomain(email.address), false\n    );\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce(\n      (prev, service) => service.email && this._testEmailDomain(service.email),\n      false,\n    );\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, `@${domain} email required`);\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = async users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      }\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    updateAsync: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      }\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  await users.createIndexAsync('username', { unique: true, sparse: true });\n  await users.createIndexAsync('emails.address', { unique: true, sparse: true });\n  await users.createIndexAsync('services.resume.loginTokens.hashedToken',\n    { unique: true, sparse: true });\n  await users.createIndexAsync('services.resume.loginTokens.token',\n    { unique: true, sparse: true });\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  await users.createIndexAsync('services.resume.haveLoginTokensToDelete',\n    { sparse: true });\n  // For expiring login tokens\n  await users.createIndexAsync(\"services.resume.loginTokens.when\", { sparse: true });\n  // For expiring password tokens\n  await users.createIndexAsync('services.password.reset.when', { sparse: true });\n  await users.createIndexAsync('services.password.enroll.when', { sparse: true });\n};\n\n\n// Generates permutations of all case variations of a given string.\nconst generateCasePermutationsForString = string => {\n  let permutations = [''];\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i);\n    permutations = [].concat(...(permutations.map(prefix => {\n      const lowerCaseChar = ch.toLowerCase();\n      const upperCaseChar = ch.toUpperCase();\n      // Don't add unnecessary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    })));\n  }\n  return permutations;\n}\n\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"009db3fd67340cdf64871411e7dfba267633a93e"}
