{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/reactive-dict/reactive-dict.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/reactive-dict/reactive-dict.js","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/reactive-dict/reactive-dict.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/reactive-dict/reactive-dict.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/reactive-dict/reactive-dict.js"}},"code":"module.export({\n  ReactiveDict: () => ReactiveDict\n});\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return EJSON.stringify(value);\n}\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n  return EJSON.parse(serialized);\n}\nfunction changed(v) {\n  v && v.changed();\n}\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\n/**\n * @class\n * @instanceName ReactiveDict\n * @summary Constructor for a ReactiveDict, which represents a reactive dictionary of key/value pairs.\n * @locus Client\n * @param {String} [name] Optional.  When a name is passed, preserves contents across Hot Code Pushes\n * @param {Object} [initialValue] Optional.  The default values for the dictionary\n */\nclass ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n    this.allDeps = new Tracker.Dependency();\n    this.keyDeps = {}; // key -> Dependency\n    this.keyValueDeps = {}; // key -> Dependency\n  }\n\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n  /**\n   * @summary Set a value for a key in the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  set(keyOrObject, value) {\n    if (typeof keyOrObject === 'object' && value === undefined) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n    value = stringify(value);\n    const keyExisted = hasOwn.call(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = value !== oldSerializedValue;\n    this.keys[key] = value;\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    }\n\n    // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  /**\n   * @summary Set a value for a key if it hasn't been set before.\n   * Otherwise works exactly the same as [`ReactiveDict.set`](#ReactiveDict-set).\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  setDefault(keyOrObject, value) {\n    if (typeof keyOrObject === 'object' && value === undefined) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n    if (!hasOwn.call(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  /**\n   * @summary Get the value assiciated with a key. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with this key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of the value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   * @param {String} key The key of the element to return\n   */\n  get(key) {\n    this._ensureKey(key);\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  /**\n   * @summary Test if the stored entry for a key is equal to a value. If inside a\n   * [reactive computation](#reactivity), invalidate the computation the next\n   * time the variable changes to or from the value.\n   * @locus Client\n   * @param {String} key The name of the session variable to test\n   * @param {String | Number | Boolean | null | undefined} value The value to\n   * test against\n   */\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    const serializedValue = stringify(value);\n    if (Tracker.active) {\n      this._ensureKey(key);\n      if (!hasOwn.call(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n      }\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (!this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n    let oldValue = undefined;\n    if (hasOwn.call(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n    return EJSON.equals(oldValue, value);\n  }\n\n  /**\n   * @summary Get all key-value pairs as a plain object. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with any key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of each value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   */\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    Object.keys(this.keys).forEach(key => {\n      ret[key] = parse(this.keys[key]);\n    });\n    return ret;\n  }\n\n  /**\n   * @summary remove all key-value pairs from the ReactiveDict. Notify any\n   * listeners that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n    this.allDeps.changed();\n    Object.keys(oldKeys).forEach(key => {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldKeys[key]]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  /**\n   * @summary remove a key-value pair from the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to delete, eg, `selectedItem`\n   */\n  delete(key) {\n    let didRemove = false;\n    if (hasOwn.call(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n      this.allDeps.changed();\n      didRemove = true;\n    }\n    return didRemove;\n  }\n\n  /**\n   * @summary Clear all values from the reactiveDict and prevent it from being\n   * migrated on a Hot Code Pushes. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  destroy() {\n    this.clear();\n    if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n  _setObject(object) {\n    Object.keys(object).forEach(key => {\n      this.set(key, object[key]);\n    });\n  }\n  _setDefaultObject(object) {\n    Object.keys(object).forEach(key => {\n      this.setDefault(key, object[key]);\n    });\n  }\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency();\n      this.keyValueDeps[key] = {};\n    }\n  }\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n}","map":{"version":3,"names":["module","export","ReactiveDict","hasOwn","Object","prototype","hasOwnProperty","stringify","value","undefined","EJSON","parse","serialized","changed","v","constructor","dictName","dictData","keys","Meteor","isClient","_registerDictForMigrate","migratedData","_loadMigratedDict","_setObject","name","Error","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","set","keyOrObject","key","keyExisted","call","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","Package","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","forEach","clear","oldKeys","delete","didRemove","destroy","_dictsToMigrate","object","_getMigrationData"],"sources":["packages/reactive-dict/reactive-dict.js"],"sourcesContent":["const hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n}\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\n/**\n * @class\n * @instanceName ReactiveDict\n * @summary Constructor for a ReactiveDict, which represents a reactive dictionary of key/value pairs.\n * @locus Client\n * @param {String} [name] Optional.  When a name is passed, preserves contents across Hot Code Pushes\n * @param {Object} [initialValue] Optional.  The default values for the dictionary\n */\nexport class ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency;\n    this.keyDeps = {}; // key -> Dependency\n    this.keyValueDeps = {}; // key -> Dependency\n  }\n\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n  /**\n   * @summary Set a value for a key in the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  set(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    value = stringify(value);\n\n    const keyExisted = hasOwn.call(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = (value !== oldSerializedValue);\n\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    }\n\n    // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  /**\n   * @summary Set a value for a key if it hasn't been set before.\n   * Otherwise works exactly the same as [`ReactiveDict.set`](#ReactiveDict-set).\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  setDefault(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    if (! hasOwn.call(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  /**\n   * @summary Get the value assiciated with a key. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with this key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of the value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   * @param {String} key The key of the element to return\n   */\n  get(key) {\n    this._ensureKey(key);\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  /**\n   * @summary Test if the stored entry for a key is equal to a value. If inside a\n   * [reactive computation](#reactivity), invalidate the computation the next\n   * time the variable changes to or from the value.\n   * @locus Client\n   * @param {String} key The name of the session variable to test\n   * @param {String | Number | Boolean | null | undefined} value The value to\n   * test against\n   */\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (! hasOwn.call(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n    if (hasOwn.call(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n    return EJSON.equals(oldValue, value);\n  }\n\n  /**\n   * @summary Get all key-value pairs as a plain object. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with any key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of each value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   */\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    Object.keys(this.keys).forEach(key => {\n      ret[key] = parse(this.keys[key]);\n    });\n    return ret;\n  }\n\n  /**\n   * @summary remove all key-value pairs from the ReactiveDict. Notify any\n   * listeners that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n\n    this.allDeps.changed();\n\n    Object.keys(oldKeys).forEach(key => {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldKeys[key]]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  /**\n   * @summary remove a key-value pair from the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to delete, eg, `selectedItem`\n   */\n  delete(key) {\n    let didRemove = false;\n\n    if (hasOwn.call(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n      this.allDeps.changed();\n      didRemove = true;\n    }\n    return didRemove;\n  }\n\n  /**\n   * @summary Clear all values from the reactiveDict and prevent it from being\n   * migrated on a Hot Code Pushes. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  destroy() {\n    this.clear();\n    if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    Object.keys(object).forEach(key => {\n      this.set(key, object[key]);\n    });\n  }\n\n  _setDefaultObject(object) {\n    Object.keys(object).forEach(key => {\n      this.setDefault(key, object[key]);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency;\n      this.keyValueDeps[key] = {};\n    }\n  }\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"40cbd07ca32a6b0e020918623fef288f8b695a3c"}
