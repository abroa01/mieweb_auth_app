{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","inputSourceMap":{"version":3,"names":["transformPropOrder","getValueAsType","numberValueTypes","translateAlias","x","y","z","transformPerspective","numTransforms","length","buildTransform","latestValues","transform","transformTemplate","transformString","transformIsDefault","i","key","value","undefined","valueIsDefault","startsWith","parseFloat","valueAsType","transformName","trim"],"sources":["node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":";AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,cAAc,QAAQ,uCAAuC;AACtE,SAASC,gBAAgB,QAAQ,kCAAkC;AAEnE,MAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,oBAAoB,EAAE;AAC1B,CAAC;AACD,MAAMC,aAAa,GAAGR,kBAAkB,CAACS,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,YAAY,EAAEC,SAAS,EAAEC,iBAAiB,EAAE;EAChE;EACA,IAAIC,eAAe,GAAG,EAAE;EACxB,IAAIC,kBAAkB,GAAG,IAAI;EAC7B;AACJ;AACA;AACA;EACI,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,aAAa,EAAEQ,CAAC,EAAE,EAAE;IACpC,MAAMC,GAAG,GAAGjB,kBAAkB,CAACgB,CAAC,CAAC;IACjC,MAAME,KAAK,GAAGP,YAAY,CAACM,GAAG,CAAC;IAC/B,IAAIC,KAAK,KAAKC,SAAS,EACnB;IACJ,IAAIC,cAAc,GAAG,IAAI;IACzB,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;MAC3BE,cAAc,GAAGF,KAAK,MAAMD,GAAG,CAACI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChE,CAAC,MACI;MACDD,cAAc,GAAGE,UAAU,CAACJ,KAAK,CAAC,KAAK,CAAC;IAC5C;IACA,IAAI,CAACE,cAAc,IAAIP,iBAAiB,EAAE;MACtC,MAAMU,WAAW,GAAGtB,cAAc,CAACiB,KAAK,EAAEhB,gBAAgB,CAACe,GAAG,CAAC,CAAC;MAChE,IAAI,CAACG,cAAc,EAAE;QACjBL,kBAAkB,GAAG,KAAK;QAC1B,MAAMS,aAAa,GAAGrB,cAAc,CAACc,GAAG,CAAC,IAAIA,GAAG;QAChDH,eAAe,IAAI,GAAGU,aAAa,IAAID,WAAW,IAAI;MAC1D;MACA,IAAIV,iBAAiB,EAAE;QACnBD,SAAS,CAACK,GAAG,CAAC,GAAGM,WAAW;MAChC;IACJ;EACJ;EACAT,eAAe,GAAGA,eAAe,CAACW,IAAI,CAAC,CAAC;EACxC;EACA;EACA,IAAIZ,iBAAiB,EAAE;IACnBC,eAAe,GAAGD,iBAAiB,CAACD,SAAS,EAAEG,kBAAkB,GAAG,EAAE,GAAGD,eAAe,CAAC;EAC7F,CAAC,MACI,IAAIC,kBAAkB,EAAE;IACzBD,eAAe,GAAG,MAAM;EAC5B;EACA,OAAOA,eAAe;AAC1B;AAEA,SAASJ,cAAc","ignoreList":[]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","inputSourceMap":{"version":3,"names":["transformPropOrder","getValueAsType","numberValueTypes","translateAlias","x","y","z","transformPerspective","numTransforms","length","buildTransform","latestValues","transform","transformTemplate","transformString","transformIsDefault","i","key","value","undefined","valueIsDefault","startsWith","parseFloat","valueAsType","transformName","trim"],"sources":["node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":";AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,cAAc,QAAQ,uCAAuC;AACtE,SAASC,gBAAgB,QAAQ,kCAAkC;AAEnE,MAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,oBAAoB,EAAE;AAC1B,CAAC;AACD,MAAMC,aAAa,GAAGR,kBAAkB,CAACS,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,YAAY,EAAEC,SAAS,EAAEC,iBAAiB,EAAE;EAChE;EACA,IAAIC,eAAe,GAAG,EAAE;EACxB,IAAIC,kBAAkB,GAAG,IAAI;EAC7B;AACJ;AACA;AACA;EACI,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,aAAa,EAAEQ,CAAC,EAAE,EAAE;IACpC,MAAMC,GAAG,GAAGjB,kBAAkB,CAACgB,CAAC,CAAC;IACjC,MAAME,KAAK,GAAGP,YAAY,CAACM,GAAG,CAAC;IAC/B,IAAIC,KAAK,KAAKC,SAAS,EACnB;IACJ,IAAIC,cAAc,GAAG,IAAI;IACzB,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;MAC3BE,cAAc,GAAGF,KAAK,MAAMD,GAAG,CAACI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChE,CAAC,MACI;MACDD,cAAc,GAAGE,UAAU,CAACJ,KAAK,CAAC,KAAK,CAAC;IAC5C;IACA,IAAI,CAACE,cAAc,IAAIP,iBAAiB,EAAE;MACtC,MAAMU,WAAW,GAAGtB,cAAc,CAACiB,KAAK,EAAEhB,gBAAgB,CAACe,GAAG,CAAC,CAAC;MAChE,IAAI,CAACG,cAAc,EAAE;QACjBL,kBAAkB,GAAG,KAAK;QAC1B,MAAMS,aAAa,GAAGrB,cAAc,CAACc,GAAG,CAAC,IAAIA,GAAG;QAChDH,eAAe,IAAI,GAAGU,aAAa,IAAID,WAAW,IAAI;MAC1D;MACA,IAAIV,iBAAiB,EAAE;QACnBD,SAAS,CAACK,GAAG,CAAC,GAAGM,WAAW;MAChC;IACJ;EACJ;EACAT,eAAe,GAAGA,eAAe,CAACW,IAAI,CAAC,CAAC;EACxC;EACA;EACA,IAAIZ,iBAAiB,EAAE;IACnBC,eAAe,GAAGD,iBAAiB,CAACD,SAAS,EAAEG,kBAAkB,GAAG,EAAE,GAAGD,eAAe,CAAC;EAC7F,CAAC,MACI,IAAIC,kBAAkB,EAAE;IACzBD,eAAe,GAAG,MAAM;EAC5B;EACA,OAAOA,eAAe;AAC1B;AAEA,SAASJ,cAAc","ignoreList":[]}}},"code":"!function (module1) {\n  module1.export({\n    buildTransform: () => buildTransform\n  });\n  let transformPropOrder;\n  module1.link(\"./transform.mjs\", {\n    transformPropOrder(v) {\n      transformPropOrder = v;\n    }\n  }, 0);\n  let getValueAsType;\n  module1.link(\"../../dom/value-types/get-as-type.mjs\", {\n    getValueAsType(v) {\n      getValueAsType = v;\n    }\n  }, 1);\n  let numberValueTypes;\n  module1.link(\"../../dom/value-types/number.mjs\", {\n    numberValueTypes(v) {\n      numberValueTypes = v;\n    }\n  }, 2);\n  ___INIT_METEOR_FAST_REFRESH(module);\n  const translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\"\n  };\n  const numTransforms = transformPropOrder.length;\n  /**\n   * Build a CSS transform style from individual x/y/scale etc properties.\n   *\n   * This outputs with a default order of transforms/scales/rotations, this can be customised by\n   * providing a transformTemplate function.\n   */\n  function buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n      const key = transformPropOrder[i];\n      const value = latestValues[key];\n      if (value === undefined) continue;\n      let valueIsDefault = true;\n      if (typeof value === \"number\") {\n        valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n      } else {\n        valueIsDefault = parseFloat(value) === 0;\n      }\n      if (!valueIsDefault || transformTemplate) {\n        const valueAsType = getValueAsType(value, numberValueTypes[key]);\n        if (!valueIsDefault) {\n          transformIsDefault = false;\n          const transformName = translateAlias[key] || key;\n          transformString += \"\".concat(transformName, \"(\").concat(valueAsType, \") \");\n        }\n        if (transformTemplate) {\n          transform[key] = valueAsType;\n        }\n      }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n      transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    } else if (transformIsDefault) {\n      transformString = \"none\";\n    }\n    return transformString;\n  }\n}.call(this, module);","map":{"version":3,"names":["translateAlias","x","y","z","transformPerspective","numTransforms","transformPropOrder","length","buildTransform","latestValues","transform","transformTemplate","transformString","transformIsDefault","i","key","value","undefined","valueIsDefault","startsWith","parseFloat","valueAsType","getValueAsType","numberValueTypes","transformName","concat","trim","call","module"],"sources":["node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;EAIA,MAAMA,cAAc,GAAG;IACnBC,CAAC,EAAE,YAAY;IACfC,CAAC,EAAE,YAAY;IACfC,CAAC,EAAE,YAAY;IACfC,oBAAoB,EAAE;EAC1B,CAAC;EACD,MAAMC,aAAa,GAAGC,kBAAkB,CAACC,MAAM;EAC/C;AACA;AACA;AACA;AACA;AACA;EACA,SAASC,cAAcA,CAACC,YAAY,EAAEC,SAAS,EAAEC,iBAAiB,EAAE;IAChE;IACA,IAAIC,eAAe,GAAG,EAAE;IACxB,IAAIC,kBAAkB,GAAG,IAAI;IAC7B;AACJ;AACA;AACA;IACI,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,aAAa,EAAES,CAAC,EAAE,EAAE;MACpC,MAAMC,GAAG,GAAGT,kBAAkB,CAACQ,CAAC,CAAC;MACjC,MAAME,KAAK,GAAGP,YAAY,CAACM,GAAG,CAAC;MAC/B,IAAIC,KAAK,KAAKC,SAAS,EACnB;MACJ,IAAIC,cAAc,GAAG,IAAI;MACzB,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;QAC3BE,cAAc,GAAGF,KAAK,MAAMD,GAAG,CAACI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAChE,CAAC,MACI;QACDD,cAAc,GAAGE,UAAU,CAACJ,KAAK,CAAC,KAAK,CAAC;MAC5C;MACA,IAAI,CAACE,cAAc,IAAIP,iBAAiB,EAAE;QACtC,MAAMU,WAAW,GAAGC,cAAc,CAACN,KAAK,EAAEO,gBAAgB,CAACR,GAAG,CAAC,CAAC;QAChE,IAAI,CAACG,cAAc,EAAE;UACjBL,kBAAkB,GAAG,KAAK;UAC1B,MAAMW,aAAa,GAAGxB,cAAc,CAACe,GAAG,CAAC,IAAIA,GAAG;UAChDH,eAAe,OAAAa,MAAA,CAAOD,aAAa,OAAAC,MAAA,CAAIJ,WAAW,OAAI;QAC1D;QACA,IAAIV,iBAAiB,EAAE;UACnBD,SAAS,CAACK,GAAG,CAAC,GAAGM,WAAW;QAChC;MACJ;IACJ;IACAT,eAAe,GAAGA,eAAe,CAACc,IAAI,CAAC,CAAC;IACxC;IACA;IACA,IAAIf,iBAAiB,EAAE;MACnBC,eAAe,GAAGD,iBAAiB,CAACD,SAAS,EAAEG,kBAAkB,GAAG,EAAE,GAAGD,eAAe,CAAC;IAC7F,CAAC,MACI,IAAIC,kBAAkB,EAAE;MACzBD,eAAe,GAAG,MAAM;IAC5B;IACA,OAAOA,eAAe;EAC1B;AAAA,EAAAe,IAAA,OAAAC,MAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"ce5a69ee4b9f498684ef2a8d97524c960caf9ab1"}
