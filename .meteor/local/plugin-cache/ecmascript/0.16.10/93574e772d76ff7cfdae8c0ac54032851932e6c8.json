{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/accounts-base/accounts_common.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.cordova"},"sourceFileName":"packages/accounts-base/accounts_common.js","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/accounts-base/accounts_common.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/packages/accounts-base/accounts_common.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_common.js"}},"code":"var _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 1);\nmodule.export({\n  AccountsCommon: function () {\n    return AccountsCommon;\n  },\n  EXPIRE_TOKENS_INTERVAL_MS: function () {\n    return EXPIRE_TOKENS_INTERVAL_MS;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\n// config option keys\nvar VALID_CONFIG_KEYS = ['sendVerificationEmail', 'forbidClientAccountCreation', 'restrictCreationByEmailDomain', 'loginExpiration', 'loginExpirationInDays', 'oauthSecretKey', 'passwordResetTokenExpirationInDays', 'passwordResetTokenExpiration', 'passwordEnrollTokenExpirationInDays', 'passwordEnrollTokenExpiration', 'ambiguousErrorMessages', 'bcryptRounds', 'defaultFieldSelector', 'collection', 'loginTokenExpirationHours', 'tokenSequenceLength', 'clientStorage', 'ddpUrl', 'connection'];\n\n/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n * - collection {String|Mongo.Collection} The name of the Mongo.Collection\n *     or the Mongo.Collection object to hold the users.\n */\nvar AccountsCommon = /*#__PURE__*/function () {\n  function AccountsCommon(options) {\n    // Validate config options keys\n    for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      if (!VALID_CONFIG_KEYS.includes(key)) {\n        console.error(\"Accounts.config: Invalid key: \" + key);\n      }\n    }\n\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = options || {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = this._initializeCollection(options || {});\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogin callback'\n    });\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLoginFailure callback'\n    });\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogout callback'\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    var lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n  }\n  var _proto = AccountsCommon.prototype;\n  _proto._initializeCollection = function () {\n    function _initializeCollection(options) {\n      if (options.collection && typeof options.collection !== 'string' && !(options.collection instanceof Mongo.Collection)) {\n        throw new Meteor.Error('Collection parameter can be only of type string or \"Mongo.Collection\"');\n      }\n      var collectionName = 'users';\n      if (typeof options.collection === 'string') {\n        collectionName = options.collection;\n      }\n      var collection;\n      if (options.collection instanceof Mongo.Collection) {\n        collection = options.collection;\n      } else {\n        collection = new Mongo.Collection(collectionName, {\n          _preventAutopublish: true,\n          connection: this.connection\n        });\n      }\n      return collection;\n    }\n    return _initializeCollection;\n  }()\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  ;\n  _proto.userId = function () {\n    function userId() {\n      throw new Error('userId method not implemented');\n    }\n    return userId;\n  }() // merge the defaultFieldSelector with an existing options object\n  ;\n  _proto._addDefaultFieldSelector = function () {\n    function _addDefaultFieldSelector() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // this will be the most common case for most people, so make it quick\n      if (!this._options.defaultFieldSelector) return options;\n\n      // if no field selector then just use defaultFieldSelector\n      if (!options.fields) return _objectSpread(_objectSpread({}, options), {}, {\n        fields: this._options.defaultFieldSelector\n      });\n\n      // if empty field selector then the full user object is explicitly requested, so obey\n      var keys = Object.keys(options.fields);\n      if (!keys.length) return options;\n\n      // if the requested fields are +ve then ignore defaultFieldSelector\n      // assume they are all either +ve or -ve because Mongo doesn't like mixed\n      if (!!options.fields[keys[0]]) return options;\n\n      // The requested fields are -ve.\n      // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n      var keys2 = Object.keys(this._options.defaultFieldSelector);\n      return this._options.defaultFieldSelector[keys2[0]] ? options : _objectSpread(_objectSpread({}, options), {}, {\n        fields: _objectSpread(_objectSpread({}, options.fields), this._options.defaultFieldSelector)\n      });\n    }\n    return _addDefaultFieldSelector;\n  }()\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source. In the server this fuction returns a promise.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  ;\n  _proto.user = function () {\n    function user(options) {\n      if (Meteor.isServer) {\n        console.warn([\"`Meteor.user()` is deprecated on the server side.\", \"    To fetch the current user record on the server,\", \"    use `Meteor.userAsync()` instead.\"].join(\"\\n\"));\n      }\n      var self = this;\n      var userId = self.userId();\n      var findOne = function () {\n        var _self$users, _self$users2;\n        return Meteor.isClient ? (_self$users = self.users).findOne.apply(_self$users, arguments) : (_self$users2 = self.users).findOneAsync.apply(_self$users2, arguments);\n      };\n      return userId ? findOne(userId, this._addDefaultFieldSelector(options)) : null;\n    }\n    return user;\n  }()\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  ;\n  _proto.userAsync = function () {\n    function userAsync(options) {\n      var userId;\n      return _regeneratorRuntime.async(function () {\n        function userAsync$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              userId = this.userId();\n              return _context.abrupt(\"return\", userId ? this.users.findOneAsync(userId, this._addDefaultFieldSelector(options)) : null);\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n        return userAsync$;\n      }(), null, this, null, Promise);\n    }\n    return userAsync;\n  }() // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - collection {String|Mongo.Collection}\n  //     A collection name or a Mongo.Collection object to hold the users.\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token can't be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n  /**\n   * @summary Set global accounts options. You can also set these in `Meteor.settings.packages.accounts` without the need to call this function.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to `false`, but in production environments it is recommended it defaults to `true`.\n   * @param {Number} options.bcryptRounds Allows override of number of bcrypt rounds (aka work factor) used to store passwords. The default is 10.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`. Beware when using this. If, for instance, you do not include `email` when excluding the fields, you can have problems with functions like `forgotPassword` that will break because they won't have the required data available. It's recommend that you always keep the fields `_id`, `username`, and `email`.\n   * @param {String|Mongo.Collection} options.collection A collection name or a Mongo.Collection object to hold the users.\n   * @param {Number} options.loginTokenExpirationHours When using the package `accounts-2fa`, use this to set the amount of time a token sent is valid. As it's just a number, you can use, for example, 0.5 to make the token valid for just half hour. The default is 1 hour.\n   * @param {Number} options.tokenSequenceLength When using the package `accounts-2fa`, use this to the size of the token sequence generated. The default is 6.\n   * @param {'session' | 'local'} options.clientStorage By default login credentials are stored in local storage, setting this to true will switch to using session storage.\n   */\n  ;\n  _proto.config = function () {\n    function config(options) {\n      // We don't want users to accidentally only call Accounts.config on the\n      // client, where some of the options will have partial effects (eg removing\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n      // is set, or redirecting Google login to a specific-domain page) without\n      // having their full effects.\n      if (Meteor.isServer) {\n        __meteor_runtime_config__.accountsConfigCalled = true;\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n        // XXX would be nice to \"crash\" the client and replace the UI with an error\n        // message, but there's no trivial way to do this.\n        Meteor._debug('Accounts.config was called on the client but not on the ' + 'server; some configuration options may not take effect.');\n      }\n\n      // We need to validate the oauthSecretKey option at the time\n      // Accounts.config is called. We also deliberately don't store the\n      // oauthSecretKey in Accounts._options.\n      if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n        if (Meteor.isClient) {\n          throw new Error('The oauthSecretKey option may only be specified on the server');\n        }\n        if (!Package['oauth-encryption']) {\n          throw new Error('The oauth-encryption package must be loaded to set oauthSecretKey');\n        }\n        Package['oauth-encryption'].OAuthEncryption.loadKey(options.oauthSecretKey);\n        options = _objectSpread({}, options);\n        delete options.oauthSecretKey;\n      }\n\n      // Validate config options keys\n      for (var _i2 = 0, _Object$keys2 = Object.keys(options); _i2 < _Object$keys2.length; _i2++) {\n        var key = _Object$keys2[_i2];\n        if (!VALID_CONFIG_KEYS.includes(key)) {\n          console.error(\"Accounts.config: Invalid key: \" + key);\n        }\n      }\n\n      // set values in Accounts._options\n      for (var _i3 = 0, _VALID_CONFIG_KEYS = VALID_CONFIG_KEYS; _i3 < _VALID_CONFIG_KEYS.length; _i3++) {\n        var _key = _VALID_CONFIG_KEYS[_i3];\n        if (_key in options) {\n          if (_key in this._options) {\n            if (_key !== 'collection' && Meteor.isTest && _key !== 'clientStorage') {\n              throw new Meteor.Error(\"Can't set `\" + _key + \"` more than once\");\n            }\n          }\n          this._options[_key] = options[_key];\n        }\n      }\n      if (options.collection && options.collection !== this.users._name && options.collection !== this.users) {\n        this.users = this._initializeCollection(options);\n      }\n    }\n    return config;\n  }()\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  ;\n  _proto.onLogin = function () {\n    function onLogin(func) {\n      var ret = this._onLoginHook.register(func);\n      // call the just registered callback if already logged in\n      this._startupCallback(ret.callback);\n      return ret;\n    }\n    return onLogin;\n  }()\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  ;\n  _proto.onLoginFailure = function () {\n    function onLoginFailure(func) {\n      return this._onLoginFailureHook.register(func);\n    }\n    return onLoginFailure;\n  }()\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  ;\n  _proto.onLogout = function () {\n    function onLogout(func) {\n      return this._onLogoutHook.register(func);\n    }\n    return onLogout;\n  }();\n  _proto._initConnection = function () {\n    function _initConnection(options) {\n      if (!Meteor.isClient) {\n        return;\n      }\n\n      // The connection used by the Accounts system. This is the connection\n      // that will get logged in by Meteor.login(), and this is the\n      // connection whose login state will be reflected by Meteor.userId().\n      //\n      // It would be much preferable for this to be in accounts_client.js,\n      // but it has to be here because it's needed to create the\n      // Meteor.users collection.\n      if (options.connection) {\n        this.connection = options.connection;\n      } else if (options.ddpUrl) {\n        this.connection = DDP.connect(options.ddpUrl);\n      } else if (typeof __meteor_runtime_config__ !== 'undefined' && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client\n        // to a different authentication server. This is for a very\n        // particular use case that comes up when implementing a oauth\n        // server. Unsupported and may go away at any point in time.\n        //\n        // We will eventually provide a general way to use account-base\n        // against any DDP connection, not just one special one.\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n      } else {\n        this.connection = Meteor.connection;\n      }\n    }\n    return _initConnection;\n  }();\n  _proto._getTokenLifetimeMs = function () {\n    function _getTokenLifetimeMs() {\n      // When loginExpirationInDays is set to null, we'll use a really high\n      // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n      // unexpiring token.\n      var loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;\n      return this._options.loginExpiration || (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000;\n    }\n    return _getTokenLifetimeMs;\n  }();\n  _proto._getPasswordResetTokenLifetimeMs = function () {\n    function _getPasswordResetTokenLifetimeMs() {\n      return this._options.passwordResetTokenExpiration || (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000;\n    }\n    return _getPasswordResetTokenLifetimeMs;\n  }();\n  _proto._getPasswordEnrollTokenLifetimeMs = function () {\n    function _getPasswordEnrollTokenLifetimeMs() {\n      return this._options.passwordEnrollTokenExpiration || (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000;\n    }\n    return _getPasswordEnrollTokenLifetimeMs;\n  }();\n  _proto._tokenExpiration = function () {\n    function _tokenExpiration(when) {\n      // We pass when through the Date constructor for backwards compatibility;\n      // `when` used to be a number.\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n    }\n    return _tokenExpiration;\n  }();\n  _proto._tokenExpiresSoon = function () {\n    function _tokenExpiresSoon(when) {\n      var minLifetimeMs = 0.1 * this._getTokenLifetimeMs();\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n      if (minLifetimeMs > minLifetimeCapMs) {\n        minLifetimeMs = minLifetimeCapMs;\n      }\n      return new Date() > new Date(when) - minLifetimeMs;\n    }\n    return _tokenExpiresSoon;\n  }() // No-op on the server, overridden on the client.\n  ;\n  _proto._startupCallback = function () {\n    function _startupCallback(callback) {}\n    return _startupCallback;\n  }();\n  return AccountsCommon;\n}();\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = function (options) {\n  return Accounts.user(options);\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.userAsync = function (options) {\n  return Accounts.userAsync(options);\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nvar EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000;\n// 10 minutes\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nvar LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;","map":{"version":3,"names":["_regeneratorRuntime","module","link","default","v","_objectSpread","export","AccountsCommon","EXPIRE_TOKENS_INTERVAL_MS","Meteor","VALID_CONFIG_KEYS","options","_i","_Object$keys","Object","keys","length","key","includes","console","error","_options","connection","undefined","_initConnection","users","_initializeCollection","_onLoginHook","Hook","bindEnvironment","debugPrintExceptions","_onLoginFailureHook","_onLogoutHook","DEFAULT_LOGIN_EXPIRATION_DAYS","LOGIN_UNEXPIRING_TOKEN_DAYS","lceName","LoginCancelledError","makeErrorType","description","message","prototype","name","numericError","_proto","collection","Mongo","Collection","Error","collectionName","_preventAutopublish","userId","_addDefaultFieldSelector","arguments","defaultFieldSelector","fields","keys2","user","isServer","warn","join","self","findOne","_self$users","_self$users2","isClient","apply","findOneAsync","userAsync","async","userAsync$","_context","prev","next","abrupt","stop","Promise","config","__meteor_runtime_config__","accountsConfigCalled","_debug","hasOwnProperty","call","Package","OAuthEncryption","loadKey","oauthSecretKey","_i2","_Object$keys2","_i3","_VALID_CONFIG_KEYS","isTest","_name","onLogin","func","ret","register","_startupCallback","callback","onLoginFailure","onLogout","ddpUrl","DDP","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","loginExpiration","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpiration","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpiration","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","_tokenExpiration","when","Date","getTime","_tokenExpiresSoon","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","Accounts"],"sources":["packages/accounts-base/accounts_common.js"],"sourcesContent":["import { Meteor } from 'meteor/meteor';\n\n// config option keys\nconst VALID_CONFIG_KEYS = [\n  'sendVerificationEmail',\n  'forbidClientAccountCreation',\n  'restrictCreationByEmailDomain',\n  'loginExpiration',\n  'loginExpirationInDays',\n  'oauthSecretKey',\n  'passwordResetTokenExpirationInDays',\n  'passwordResetTokenExpiration',\n  'passwordEnrollTokenExpirationInDays',\n  'passwordEnrollTokenExpiration',\n  'ambiguousErrorMessages',\n  'bcryptRounds',\n  'defaultFieldSelector',\n  'collection',\n  'loginTokenExpirationHours',\n  'tokenSequenceLength',\n  'clientStorage',\n  'ddpUrl',\n  'connection',\n];\n\n/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n * - collection {String|Mongo.Collection} The name of the Mongo.Collection\n *     or the Mongo.Collection object to hold the users.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Validate config options keys\n    for (const key of Object.keys(options)) {\n      if (!VALID_CONFIG_KEYS.includes(key)) {\n        console.error(`Accounts.config: Invalid key: ${key}`);\n      }\n    }\n\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = options || {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = this._initializeCollection(options || {});\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogin callback',\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLoginFailure callback',\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogout callback',\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function(\n      description\n    ) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n  }\n\n  _initializeCollection(options) {\n    if (options.collection && typeof options.collection !== 'string' && !(options.collection instanceof Mongo.Collection)) {\n      throw new Meteor.Error('Collection parameter can be only of type string or \"Mongo.Collection\"');\n    }\n\n    let collectionName = 'users';\n    if (typeof options.collection === 'string') {\n      collectionName = options.collection;\n    }\n\n    let collection;\n    if (options.collection instanceof Mongo.Collection) {\n      collection = options.collection;\n    } else {\n      collection = new Mongo.Collection(collectionName, {\n        _preventAutopublish: true,\n        connection: this.connection,\n      });\n    }\n\n    return collection;\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error('userId method not implemented');\n  }\n\n  // merge the defaultFieldSelector with an existing options object\n  _addDefaultFieldSelector(options = {}) {\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options;\n\n    // if no field selector then just use defaultFieldSelector\n    if (!options.fields)\n      return {\n        ...options,\n        fields: this._options.defaultFieldSelector,\n      };\n\n    // if empty field selector then the full user object is explicitly requested, so obey\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options;\n\n    // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n    if (!!options.fields[keys[0]]) return options;\n\n    // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]]\n      ? options\n      : {\n          ...options,\n          fields: {\n            ...options.fields,\n            ...this._options.defaultFieldSelector,\n          },\n        };\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source. In the server this fuction returns a promise.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  user(options) {\n    if (Meteor.isServer) {\n      console.warn([\n        \"`Meteor.user()` is deprecated on the server side.\",\n        \"    To fetch the current user record on the server,\",\n        \"    use `Meteor.userAsync()` instead.\",\n      ].join(\"\\n\"));\n    }\n\n    const self = this;\n    const userId = self.userId();\n    const findOne = (...args) => Meteor.isClient\n      ? self.users.findOne(...args)\n      : self.users.findOneAsync(...args);\n    return userId\n      ? findOne(userId, this._addDefaultFieldSelector(options))\n      : null;\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  async userAsync(options) {\n    const userId = this.userId();\n    return userId\n      ? this.users.findOneAsync(userId, this._addDefaultFieldSelector(options))\n      : null;\n  }\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - collection {String|Mongo.Collection}\n  //     A collection name or a Mongo.Collection object to hold the users.\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token can't be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options. You can also set these in `Meteor.settings.packages.accounts` without the need to call this function.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to `false`, but in production environments it is recommended it defaults to `true`.\n   * @param {Number} options.bcryptRounds Allows override of number of bcrypt rounds (aka work factor) used to store passwords. The default is 10.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`. Beware when using this. If, for instance, you do not include `email` when excluding the fields, you can have problems with functions like `forgotPassword` that will break because they won't have the required data available. It's recommend that you always keep the fields `_id`, `username`, and `email`.\n   * @param {String|Mongo.Collection} options.collection A collection name or a Mongo.Collection object to hold the users.\n   * @param {Number} options.loginTokenExpirationHours When using the package `accounts-2fa`, use this to set the amount of time a token sent is valid. As it's just a number, you can use, for example, 0.5 to make the token valid for just half hour. The default is 1 hour.\n   * @param {Number} options.tokenSequenceLength When using the package `accounts-2fa`, use this to the size of the token sequence generated. The default is 6.\n   * @param {'session' | 'local'} options.clientStorage By default login credentials are stored in local storage, setting this to true will switch to using session storage.\n   */\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\n        'Accounts.config was called on the client but not on the ' +\n          'server; some configuration options may not take effect.'\n      );\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error(\n          'The oauthSecretKey option may only be specified on the server'\n        );\n      }\n      if (!Package['oauth-encryption']) {\n        throw new Error(\n          'The oauth-encryption package must be loaded to set oauthSecretKey'\n        );\n      }\n      Package['oauth-encryption'].OAuthEncryption.loadKey(\n        options.oauthSecretKey\n      );\n      options = { ...options };\n      delete options.oauthSecretKey;\n    }\n\n    // Validate config options keys\n    for (const key of Object.keys(options)) {\n      if (!VALID_CONFIG_KEYS.includes(key)) {\n        console.error(`Accounts.config: Invalid key: ${key}`);\n      }\n    }\n\n    // set values in Accounts._options\n    for (const key of VALID_CONFIG_KEYS) {\n      if (key in options) {\n        if (key in this._options) {\n          if (key !== 'collection' && (Meteor.isTest && key !== 'clientStorage')) {\n            throw new Meteor.Error(`Can't set \\`${key}\\` more than once`);\n          }\n        }\n        this._options[key] = options[key];\n      }\n    }\n\n    if (options.collection && options.collection !== this.users._name && options.collection !== this.users) {\n      this.users = this._initializeCollection(options);\n    }\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func);\n    // call the just registered callback if already logged in\n    this._startupCallback(ret.callback);\n    return ret;\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (!Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (\n      typeof __meteor_runtime_config__ !== 'undefined' &&\n      __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL\n    ) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection = DDP.connect(\n        __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL\n      );\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      this._options.loginExpirationInDays === null\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (\n      this._options.loginExpiration ||\n      (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (\n      this._options.passwordResetTokenExpiration ||\n      (this._options.passwordResetTokenExpirationInDays ||\n        DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (\n      this._options.passwordEnrollTokenExpiration ||\n      (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = 0.1 * this._getTokenLifetimeMs();\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n    return new Date() > new Date(when) - minLifetimeMs;\n  }\n\n  // No-op on the server, overridden on the client.\n  _startupCallback(callback) {}\n}\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = options => Accounts.user(options);\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.userAsync = options => Accounts.userAsync(options);\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nexport const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n"],"mappings":"AAAA,IAAIA,mBAAmB;AAACC,MAAM,CAACC,IAAI,CAAC,4BAA4B,EAAC;EAACC,OAAO,EAAC,SAAAA,CAASC,CAAC,EAAC;IAACJ,mBAAmB,GAACI,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIC,aAAa;AAACJ,MAAM,CAACC,IAAI,CAAC,sCAAsC,EAAC;EAACC,OAAO,EAAC,SAAAA,CAASC,CAAC,EAAC;IAACC,aAAa,GAACD,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAA/NH,MAAM,CAACK,MAAM,CAAC;EAACC,cAAc,EAAC,SAAAA,CAAA,EAAU;IAAC,OAAOA,cAAc;EAAA,CAAC;EAACC,yBAAyB,EAAC,SAAAA,CAAA,EAAU;IAAC,OAAOA,yBAAyB;EAAA;AAAC,CAAC,CAAC;AAAC,IAAIC,MAAM;AAACR,MAAM,CAACC,IAAI,CAAC,eAAe,EAAC;EAACO,MAAM,EAAC,SAAAA,CAASL,CAAC,EAAC;IAACK,MAAM,GAACL,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAEjN;AACA,IAAMM,iBAAiB,GAAG,CACxB,uBAAuB,EACvB,6BAA6B,EAC7B,+BAA+B,EAC/B,iBAAiB,EACjB,uBAAuB,EACvB,gBAAgB,EAChB,oCAAoC,EACpC,8BAA8B,EAC9B,qCAAqC,EACrC,+BAA+B,EAC/B,wBAAwB,EACxB,cAAc,EACd,sBAAsB,EACtB,YAAY,EACZ,2BAA2B,EAC3B,qBAAqB,EACrB,eAAe,EACf,QAAQ,EACR,YAAY,CACb;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,IAWaH,cAAc;EACzB,SAAAA,eAAYI,OAAO,EAAE;IACnB;IACA,SAAAC,EAAA,MAAAC,YAAA,GAAkBC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,EAAAC,EAAA,GAAAC,YAAA,CAAAG,MAAA,EAAAJ,EAAA,IAAE;MAAnC,IAAMK,GAAG,GAAAJ,YAAA,CAAAD,EAAA;MACZ,IAAI,CAACF,iBAAiB,CAACQ,QAAQ,CAACD,GAAG,CAAC,EAAE;QACpCE,OAAO,CAACC,KAAK,oCAAkCH,GAAK,CAAC;MACvD;IACF;;IAEA;IACA;IACA,IAAI,CAACI,QAAQ,GAAGV,OAAO,IAAI,CAAC,CAAC;;IAE7B;IACA;IACA,IAAI,CAACW,UAAU,GAAGC,SAAS;IAC3B,IAAI,CAACC,eAAe,CAACb,OAAO,IAAI,CAAC,CAAC,CAAC;;IAEnC;IACA;IACA,IAAI,CAACc,KAAK,GAAG,IAAI,CAACC,qBAAqB,CAACf,OAAO,IAAI,CAAC,CAAC,CAAC;;IAEtD;IACA,IAAI,CAACgB,YAAY,GAAG,IAAIC,IAAI,CAAC;MAC3BC,eAAe,EAAE,KAAK;MACtBC,oBAAoB,EAAE;IACxB,CAAC,CAAC;IAEF,IAAI,CAACC,mBAAmB,GAAG,IAAIH,IAAI,CAAC;MAClCC,eAAe,EAAE,KAAK;MACtBC,oBAAoB,EAAE;IACxB,CAAC,CAAC;IAEF,IAAI,CAACE,aAAa,GAAG,IAAIJ,IAAI,CAAC;MAC5BC,eAAe,EAAE,KAAK;MACtBC,oBAAoB,EAAE;IACxB,CAAC,CAAC;;IAEF;IACA,IAAI,CAACG,6BAA6B,GAAGA,6BAA6B;IAClE,IAAI,CAACC,2BAA2B,GAAGA,2BAA2B;;IAE9D;IACA;IACA,IAAMC,OAAO,GAAG,8BAA8B;IAC9C,IAAI,CAACC,mBAAmB,GAAG3B,MAAM,CAAC4B,aAAa,CAACF,OAAO,EAAE,UACvDG,WAAW,EACX;MACA,IAAI,CAACC,OAAO,GAAGD,WAAW;IAC5B,CAAC,CAAC;IACF,IAAI,CAACF,mBAAmB,CAACI,SAAS,CAACC,IAAI,GAAGN,OAAO;;IAEjD;IACA;IACA;IACA,IAAI,CAACC,mBAAmB,CAACM,YAAY,GAAG,SAAS;EACnD;EAAC,IAAAC,MAAA,GAAApC,cAAA,CAAAiC,SAAA;EAAAG,MAAA,CAEDjB,qBAAqB;IAArB,SAAAA,qBAAqBA,CAACf,OAAO,EAAE;MAC7B,IAAIA,OAAO,CAACiC,UAAU,IAAI,OAAOjC,OAAO,CAACiC,UAAU,KAAK,QAAQ,IAAI,EAAEjC,OAAO,CAACiC,UAAU,YAAYC,KAAK,CAACC,UAAU,CAAC,EAAE;QACrH,MAAM,IAAIrC,MAAM,CAACsC,KAAK,CAAC,uEAAuE,CAAC;MACjG;MAEA,IAAIC,cAAc,GAAG,OAAO;MAC5B,IAAI,OAAOrC,OAAO,CAACiC,UAAU,KAAK,QAAQ,EAAE;QAC1CI,cAAc,GAAGrC,OAAO,CAACiC,UAAU;MACrC;MAEA,IAAIA,UAAU;MACd,IAAIjC,OAAO,CAACiC,UAAU,YAAYC,KAAK,CAACC,UAAU,EAAE;QAClDF,UAAU,GAAGjC,OAAO,CAACiC,UAAU;MACjC,CAAC,MAAM;QACLA,UAAU,GAAG,IAAIC,KAAK,CAACC,UAAU,CAACE,cAAc,EAAE;UAChDC,mBAAmB,EAAE,IAAI;UACzB3B,UAAU,EAAE,IAAI,CAACA;QACnB,CAAC,CAAC;MACJ;MAEA,OAAOsB,UAAU;IACnB;IAAC,OArBDlB,qBAAqB;EAAA;EAuBrB;AACF;AACA;AACA;EAHE;EAAAiB,MAAA,CAIAO,MAAM;IAAN,SAAAA,MAAMA,CAAA,EAAG;MACP,MAAM,IAAIH,KAAK,CAAC,+BAA+B,CAAC;IAClD;IAAC,OAFDG,MAAM;EAAA,IAIN;EAAA;EAAAP,MAAA,CACAQ,wBAAwB;IAAxB,SAAAA,wBAAwBA,CAAA,EAAe;MAAA,IAAdxC,OAAO,GAAAyC,SAAA,CAAApC,MAAA,QAAAoC,SAAA,QAAA7B,SAAA,GAAA6B,SAAA,MAAG,CAAC,CAAC;MACnC;MACA,IAAI,CAAC,IAAI,CAAC/B,QAAQ,CAACgC,oBAAoB,EAAE,OAAO1C,OAAO;;MAEvD;MACA,IAAI,CAACA,OAAO,CAAC2C,MAAM,EACjB,OAAAjD,aAAA,CAAAA,aAAA,KACKM,OAAO;QACV2C,MAAM,EAAE,IAAI,CAACjC,QAAQ,CAACgC;MAAoB;;MAG9C;MACA,IAAMtC,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC2C,MAAM,CAAC;MACxC,IAAI,CAACvC,IAAI,CAACC,MAAM,EAAE,OAAOL,OAAO;;MAEhC;MACA;MACA,IAAI,CAAC,CAACA,OAAO,CAAC2C,MAAM,CAACvC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,OAAOJ,OAAO;;MAE7C;MACA;MACA,IAAM4C,KAAK,GAAGzC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACM,QAAQ,CAACgC,oBAAoB,CAAC;MAC7D,OAAO,IAAI,CAAChC,QAAQ,CAACgC,oBAAoB,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,GAC/C5C,OAAO,GAAAN,aAAA,CAAAA,aAAA,KAEFM,OAAO;QACV2C,MAAM,EAAAjD,aAAA,CAAAA,aAAA,KACDM,OAAO,CAAC2C,MAAM,GACd,IAAI,CAACjC,QAAQ,CAACgC,oBAAoB;MACtC,EACF;IACP;IAAC,OA/BDF,wBAAwB;EAAA;EAiCxB;AACF;AACA;AACA;AACA;AACA;EALE;EAAAR,MAAA,CAMAa,IAAI;IAAJ,SAAAA,IAAIA,CAAC7C,OAAO,EAAE;MACZ,IAAIF,MAAM,CAACgD,QAAQ,EAAE;QACnBtC,OAAO,CAACuC,IAAI,CAAC,CACX,mDAAmD,EACnD,qDAAqD,EACrD,uCAAuC,CACxC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;MACf;MAEA,IAAMC,IAAI,GAAG,IAAI;MACjB,IAAMV,MAAM,GAAGU,IAAI,CAACV,MAAM,CAAC,CAAC;MAC5B,IAAMW,OAAO,GAAG,SAAAA,CAAA;QAAA,IAAAC,WAAA,EAAAC,YAAA;QAAA,OAAatD,MAAM,CAACuD,QAAQ,GACxC,CAAAF,WAAA,GAAAF,IAAI,CAACnC,KAAK,EAACoC,OAAO,CAAAI,KAAA,CAAAH,WAAA,EAAAV,SAAQ,CAAC,GAC3B,CAAAW,YAAA,GAAAH,IAAI,CAACnC,KAAK,EAACyC,YAAY,CAAAD,KAAA,CAAAF,YAAA,EAAAX,SAAQ,CAAC;MAAA;MACpC,OAAOF,MAAM,GACTW,OAAO,CAACX,MAAM,EAAE,IAAI,CAACC,wBAAwB,CAACxC,OAAO,CAAC,CAAC,GACvD,IAAI;IACV;IAAC,OAjBD6C,IAAI;EAAA;EAmBJ;AACF;AACA;AACA;AACA;AACA;EALE;EAAAb,MAAA,CAMMwB,SAAS;IAAf,SAAMA,SAASA,CAACxD,OAAO;MAAA,IAAAuC,MAAA;MAAA,OAAAlD,mBAAA,CAAAoE,KAAA;QAAA,SAAAC,WAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACftB,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;cAAA,OAAAoB,QAAA,CAAAG,MAAA,WACrBvB,MAAM,GACT,IAAI,CAACzB,KAAK,CAACyC,YAAY,CAAChB,MAAM,EAAE,IAAI,CAACC,wBAAwB,CAACxC,OAAO,CAAC,CAAC,GACvE,IAAI;YAAA;YAAA;cAAA,OAAA2D,QAAA,CAAAI,IAAA;UAAA;QAAA;QAAA,OAAAL,UAAA;MAAA,uBAAAM,OAAA;IAAA;IACT,OALKR,SAAS;EAAA,IAMf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EArBE;EAAAxB,MAAA,CAsBAiC,MAAM;IAAN,SAAAA,MAAMA,CAACjE,OAAO,EAAE;MACd;MACA;MACA;MACA;MACA;MACA,IAAIF,MAAM,CAACgD,QAAQ,EAAE;QACnBoB,yBAAyB,CAACC,oBAAoB,GAAG,IAAI;MACvD,CAAC,MAAM,IAAI,CAACD,yBAAyB,CAACC,oBAAoB,EAAE;QAC1D;QACA;QACArE,MAAM,CAACsE,MAAM,CACX,0DAA0D,GACxD,yDACJ,CAAC;MACH;;MAEA;MACA;MACA;MACA,IAAIjE,MAAM,CAAC0B,SAAS,CAACwC,cAAc,CAACC,IAAI,CAACtE,OAAO,EAAE,gBAAgB,CAAC,EAAE;QACnE,IAAIF,MAAM,CAACuD,QAAQ,EAAE;UACnB,MAAM,IAAIjB,KAAK,CACb,+DACF,CAAC;QACH;QACA,IAAI,CAACmC,OAAO,CAAC,kBAAkB,CAAC,EAAE;UAChC,MAAM,IAAInC,KAAK,CACb,mEACF,CAAC;QACH;QACAmC,OAAO,CAAC,kBAAkB,CAAC,CAACC,eAAe,CAACC,OAAO,CACjDzE,OAAO,CAAC0E,cACV,CAAC;QACD1E,OAAO,GAAAN,aAAA,KAAQM,OAAO,CAAE;QACxB,OAAOA,OAAO,CAAC0E,cAAc;MAC/B;;MAEA;MACA,SAAAC,GAAA,MAAAC,aAAA,GAAkBzE,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,EAAA2E,GAAA,GAAAC,aAAA,CAAAvE,MAAA,EAAAsE,GAAA,IAAE;QAAnC,IAAMrE,GAAG,GAAAsE,aAAA,CAAAD,GAAA;QACZ,IAAI,CAAC5E,iBAAiB,CAACQ,QAAQ,CAACD,GAAG,CAAC,EAAE;UACpCE,OAAO,CAACC,KAAK,oCAAkCH,GAAK,CAAC;QACvD;MACF;;MAEA;MACA,SAAAuE,GAAA,MAAAC,kBAAA,GAAkB/E,iBAAiB,EAAA8E,GAAA,GAAAC,kBAAA,CAAAzE,MAAA,EAAAwE,GAAA,IAAE;QAAhC,IAAMvE,IAAG,GAAAwE,kBAAA,CAAAD,GAAA;QACZ,IAAIvE,IAAG,IAAIN,OAAO,EAAE;UAClB,IAAIM,IAAG,IAAI,IAAI,CAACI,QAAQ,EAAE;YACxB,IAAIJ,IAAG,KAAK,YAAY,IAAKR,MAAM,CAACiF,MAAM,IAAIzE,IAAG,KAAK,eAAgB,EAAE;cACtE,MAAM,IAAIR,MAAM,CAACsC,KAAK,iBAAgB9B,IAAG,qBAAmB,CAAC;YAC/D;UACF;UACA,IAAI,CAACI,QAAQ,CAACJ,IAAG,CAAC,GAAGN,OAAO,CAACM,IAAG,CAAC;QACnC;MACF;MAEA,IAAIN,OAAO,CAACiC,UAAU,IAAIjC,OAAO,CAACiC,UAAU,KAAK,IAAI,CAACnB,KAAK,CAACkE,KAAK,IAAIhF,OAAO,CAACiC,UAAU,KAAK,IAAI,CAACnB,KAAK,EAAE;QACtG,IAAI,CAACA,KAAK,GAAG,IAAI,CAACC,qBAAqB,CAACf,OAAO,CAAC;MAClD;IACF;IAAC,OA5DDiE,MAAM;EAAA;EA8DN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVE;EAAAjC,MAAA,CAWAiD,OAAO;IAAP,SAAAA,OAAOA,CAACC,IAAI,EAAE;MACZ,IAAIC,GAAG,GAAG,IAAI,CAACnE,YAAY,CAACoE,QAAQ,CAACF,IAAI,CAAC;MAC1C;MACA,IAAI,CAACG,gBAAgB,CAACF,GAAG,CAACG,QAAQ,CAAC;MACnC,OAAOH,GAAG;IACZ;IAAC,OALDF,OAAO;EAAA;EAOP;AACF;AACA;AACA;AACA;EAJE;EAAAjD,MAAA,CAKAuD,cAAc;IAAd,SAAAA,cAAcA,CAACL,IAAI,EAAE;MACnB,OAAO,IAAI,CAAC9D,mBAAmB,CAACgE,QAAQ,CAACF,IAAI,CAAC;IAChD;IAAC,OAFDK,cAAc;EAAA;EAId;AACF;AACA;AACA;AACA;EAJE;EAAAvD,MAAA,CAKAwD,QAAQ;IAAR,SAAAA,QAAQA,CAACN,IAAI,EAAE;MACb,OAAO,IAAI,CAAC7D,aAAa,CAAC+D,QAAQ,CAACF,IAAI,CAAC;IAC1C;IAAC,OAFDM,QAAQ;EAAA;EAAAxD,MAAA,CAIRnB,eAAe;IAAf,SAAAA,eAAeA,CAACb,OAAO,EAAE;MACvB,IAAI,CAACF,MAAM,CAACuD,QAAQ,EAAE;QACpB;MACF;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAIrD,OAAO,CAACW,UAAU,EAAE;QACtB,IAAI,CAACA,UAAU,GAAGX,OAAO,CAACW,UAAU;MACtC,CAAC,MAAM,IAAIX,OAAO,CAACyF,MAAM,EAAE;QACzB,IAAI,CAAC9E,UAAU,GAAG+E,GAAG,CAACC,OAAO,CAAC3F,OAAO,CAACyF,MAAM,CAAC;MAC/C,CAAC,MAAM,IACL,OAAOvB,yBAAyB,KAAK,WAAW,IAChDA,yBAAyB,CAAC0B,uBAAuB,EACjD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAI,CAACjF,UAAU,GAAG+E,GAAG,CAACC,OAAO,CAC3BzB,yBAAyB,CAAC0B,uBAC5B,CAAC;MACH,CAAC,MAAM;QACL,IAAI,CAACjF,UAAU,GAAGb,MAAM,CAACa,UAAU;MACrC;IACF;IAAC,OAjCDE,eAAe;EAAA;EAAAmB,MAAA,CAmCf6D,mBAAmB;IAAnB,SAAAA,mBAAmBA,CAAA,EAAG;MACpB;MACA;MACA;MACA,IAAMC,qBAAqB,GACzB,IAAI,CAACpF,QAAQ,CAACoF,qBAAqB,KAAK,IAAI,GACxCvE,2BAA2B,GAC3B,IAAI,CAACb,QAAQ,CAACoF,qBAAqB;MACzC,OACE,IAAI,CAACpF,QAAQ,CAACqF,eAAe,IAC7B,CAACD,qBAAqB,IAAIxE,6BAA6B,IAAI,QAAQ;IAEvE;IAAC,OAZDuE,mBAAmB;EAAA;EAAA7D,MAAA,CAcnBgE,gCAAgC;IAAhC,SAAAA,gCAAgCA,CAAA,EAAG;MACjC,OACE,IAAI,CAACtF,QAAQ,CAACuF,4BAA4B,IAC1C,CAAC,IAAI,CAACvF,QAAQ,CAACwF,kCAAkC,IAC/CC,4CAA4C,IAAI,QAAQ;IAE9D;IAAC,OANDH,gCAAgC;EAAA;EAAAhE,MAAA,CAQhCoE,iCAAiC;IAAjC,SAAAA,iCAAiCA,CAAA,EAAG;MAClC,OACE,IAAI,CAAC1F,QAAQ,CAAC2F,6BAA6B,IAC3C,CAAC,IAAI,CAAC3F,QAAQ,CAAC4F,mCAAmC,IAChDC,6CAA6C,IAAI,QAAQ;IAE/D;IAAC,OANDH,iCAAiC;EAAA;EAAApE,MAAA,CAQjCwE,gBAAgB;IAAhB,SAAAA,gBAAgBA,CAACC,IAAI,EAAE;MACrB;MACA;MACA,OAAO,IAAIC,IAAI,CAAC,IAAIA,IAAI,CAACD,IAAI,CAAC,CAACE,OAAO,CAAC,CAAC,GAAG,IAAI,CAACd,mBAAmB,CAAC,CAAC,CAAC;IACxE;IAAC,OAJDW,gBAAgB;EAAA;EAAAxE,MAAA,CAMhB4E,iBAAiB;IAAjB,SAAAA,iBAAiBA,CAACH,IAAI,EAAE;MACtB,IAAII,aAAa,GAAG,GAAG,GAAG,IAAI,CAAChB,mBAAmB,CAAC,CAAC;MACpD,IAAMiB,gBAAgB,GAAGC,2BAA2B,GAAG,IAAI;MAC3D,IAAIF,aAAa,GAAGC,gBAAgB,EAAE;QACpCD,aAAa,GAAGC,gBAAgB;MAClC;MACA,OAAO,IAAIJ,IAAI,CAAC,CAAC,GAAG,IAAIA,IAAI,CAACD,IAAI,CAAC,GAAGI,aAAa;IACpD;IAAC,OAPDD,iBAAiB;EAAA,IASjB;EAAA;EAAA5E,MAAA,CACAqD,gBAAgB;IAAhB,SAAAA,gBAAgBA,CAACC,QAAQ,EAAE,CAAC;IAAC,OAA7BD,gBAAgB;EAAA;EAAA,OAAAzF,cAAA;AAAA;AAGlB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACyC,MAAM,GAAG;EAAA,OAAMyE,QAAQ,CAACzE,MAAM,CAAC,CAAC;AAAA;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACAzC,MAAM,CAAC+C,IAAI,GAAG,UAAA7C,OAAO;EAAA,OAAIgH,QAAQ,CAACnE,IAAI,CAAC7C,OAAO,CAAC;AAAA;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,MAAM,CAAC0D,SAAS,GAAG,UAAAxD,OAAO;EAAA,OAAIgH,QAAQ,CAACxD,SAAS,CAACxD,OAAO,CAAC;AAAA;;AAEzD;AACA,IAAMsB,6BAA6B,GAAG,EAAE;AACxC;AACA,IAAM6E,4CAA4C,GAAG,CAAC;AACtD;AACA,IAAMI,6CAA6C,GAAG,EAAE;AACxD;AACA;AACA;AACA,IAAMQ,2BAA2B,GAAG,IAAI,CAAC,CAAC;AAC1C;AACO,IAAMlH,yBAAyB,GAAG,GAAG,GAAG,IAAI;AAAE;AACrD;AACA;AACA,IAAM0B,2BAA2B,GAAG,GAAG,GAAG,GAAG","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"93574e772d76ff7cfdae8c0ac54032851932e6c8"}
