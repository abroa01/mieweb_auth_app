{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","inputSourceMap":{"version":3,"names":["mixNumber","complex","correctBoxShadow","correct","latest","treeScale","projectionDelta","original","shadow","parse","length","template","createTransformer","offset","xScale","x","scale","yScale","y","averageScale"],"sources":["node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs"],"sourcesContent":["import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,4BAA4B;AACtD,SAASC,OAAO,QAAQ,qCAAqC;AAE7D,MAAMC,gBAAgB,GAAG;EACrBC,OAAO,EAAEA,CAACC,MAAM,EAAE;IAAEC,SAAS;IAAEC;EAAgB,CAAC,KAAK;IACjD,MAAMC,QAAQ,GAAGH,MAAM;IACvB,MAAMI,MAAM,GAAGP,OAAO,CAACQ,KAAK,CAACL,MAAM,CAAC;IACpC;IACA,IAAII,MAAM,CAACE,MAAM,GAAG,CAAC,EACjB,OAAOH,QAAQ;IACnB,MAAMI,QAAQ,GAAGV,OAAO,CAACW,iBAAiB,CAACR,MAAM,CAAC;IAClD,MAAMS,MAAM,GAAG,OAAOL,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC;IACpD;IACA,MAAMM,MAAM,GAAGR,eAAe,CAACS,CAAC,CAACC,KAAK,GAAGX,SAAS,CAACU,CAAC;IACpD,MAAME,MAAM,GAAGX,eAAe,CAACY,CAAC,CAACF,KAAK,GAAGX,SAAS,CAACa,CAAC;IACpDV,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIC,MAAM;IAC5BN,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAII,MAAM;IAC5B;AACR;AACA;AACA;AACA;AACA;IACQ,MAAME,YAAY,GAAGnB,SAAS,CAACc,MAAM,EAAEG,MAAM,EAAE,GAAG,CAAC;IACnD;IACA,IAAI,OAAOT,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,KAAK,QAAQ,EACtCL,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIM,YAAY;IACtC;IACA,IAAI,OAAOX,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,KAAK,QAAQ,EACtCL,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIM,YAAY;IACtC,OAAOR,QAAQ,CAACH,MAAM,CAAC;EAC3B;AACJ,CAAC;AAED,SAASN,gBAAgB","ignoreList":[]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","inputSourceMap":{"version":3,"names":["mixNumber","complex","correctBoxShadow","correct","latest","treeScale","projectionDelta","original","shadow","parse","length","template","createTransformer","offset","xScale","x","scale","yScale","y","averageScale"],"sources":["node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs"],"sourcesContent":["import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,4BAA4B;AACtD,SAASC,OAAO,QAAQ,qCAAqC;AAE7D,MAAMC,gBAAgB,GAAG;EACrBC,OAAO,EAAEA,CAACC,MAAM,EAAE;IAAEC,SAAS;IAAEC;EAAgB,CAAC,KAAK;IACjD,MAAMC,QAAQ,GAAGH,MAAM;IACvB,MAAMI,MAAM,GAAGP,OAAO,CAACQ,KAAK,CAACL,MAAM,CAAC;IACpC;IACA,IAAII,MAAM,CAACE,MAAM,GAAG,CAAC,EACjB,OAAOH,QAAQ;IACnB,MAAMI,QAAQ,GAAGV,OAAO,CAACW,iBAAiB,CAACR,MAAM,CAAC;IAClD,MAAMS,MAAM,GAAG,OAAOL,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC;IACpD;IACA,MAAMM,MAAM,GAAGR,eAAe,CAACS,CAAC,CAACC,KAAK,GAAGX,SAAS,CAACU,CAAC;IACpD,MAAME,MAAM,GAAGX,eAAe,CAACY,CAAC,CAACF,KAAK,GAAGX,SAAS,CAACa,CAAC;IACpDV,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIC,MAAM;IAC5BN,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAII,MAAM;IAC5B;AACR;AACA;AACA;AACA;AACA;IACQ,MAAME,YAAY,GAAGnB,SAAS,CAACc,MAAM,EAAEG,MAAM,EAAE,GAAG,CAAC;IACnD;IACA,IAAI,OAAOT,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,KAAK,QAAQ,EACtCL,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIM,YAAY;IACtC;IACA,IAAI,OAAOX,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,KAAK,QAAQ,EACtCL,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIM,YAAY;IACtC,OAAOR,QAAQ,CAACH,MAAM,CAAC;EAC3B;AACJ,CAAC;AAED,SAASN,gBAAgB","ignoreList":[]}}},"code":"!function (module1) {\n  module1.export({\n    correctBoxShadow: () => correctBoxShadow\n  });\n  let mixNumber;\n  module1.link(\"../../utils/mix/number.mjs\", {\n    mixNumber(v) {\n      mixNumber = v;\n    }\n  }, 0);\n  let complex;\n  module1.link(\"../../value/types/complex/index.mjs\", {\n    complex(v) {\n      complex = v;\n    }\n  }, 1);\n  ___INIT_METEOR_FAST_REFRESH(module);\n  const correctBoxShadow = {\n    correct: (latest, _ref) => {\n      let {\n        treeScale,\n        projectionDelta\n      } = _ref;\n      const original = latest;\n      const shadow = complex.parse(latest);\n      // TODO: Doesn't support multiple shadows\n      if (shadow.length > 5) return original;\n      const template = complex.createTransformer(latest);\n      const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n      // Calculate the overall context scale\n      const xScale = projectionDelta.x.scale * treeScale.x;\n      const yScale = projectionDelta.y.scale * treeScale.y;\n      shadow[0 + offset] /= xScale;\n      shadow[1 + offset] /= yScale;\n      /**\n       * Ideally we'd correct x and y scales individually, but because blur and\n       * spread apply to both we have to take a scale average and apply that instead.\n       * We could potentially improve the outcome of this by incorporating the ratio between\n       * the two scales.\n       */\n      const averageScale = mixNumber(xScale, yScale, 0.5);\n      // Blur\n      if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n      // Spread\n      if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n      return template(shadow);\n    }\n  };\n}.call(this, module);","map":{"version":3,"names":["correctBoxShadow","correct","latest","_ref","treeScale","projectionDelta","original","shadow","complex","parse","length","template","createTransformer","offset","xScale","x","scale","yScale","y","averageScale","mixNumber","call","module"],"sources":["node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs"],"sourcesContent":["import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n"],"mappings":";;;;;;;;;;;;;;;;;EAGA,MAAMA,gBAAgB,GAAG;IACrBC,OAAO,EAAEA,CAACC,MAAM,EAAAC,IAAA,KAAqC;MAAA,IAAnC;QAAEC,SAAS;QAAEC;MAAgB,CAAC,GAAAF,IAAA;MAC5C,MAAMG,QAAQ,GAAGJ,MAAM;MACvB,MAAMK,MAAM,GAAGC,OAAO,CAACC,KAAK,CAACP,MAAM,CAAC;MACpC;MACA,IAAIK,MAAM,CAACG,MAAM,GAAG,CAAC,EACjB,OAAOJ,QAAQ;MACnB,MAAMK,QAAQ,GAAGH,OAAO,CAACI,iBAAiB,CAACV,MAAM,CAAC;MAClD,MAAMW,MAAM,GAAG,OAAON,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC;MACpD;MACA,MAAMO,MAAM,GAAGT,eAAe,CAACU,CAAC,CAACC,KAAK,GAAGZ,SAAS,CAACW,CAAC;MACpD,MAAME,MAAM,GAAGZ,eAAe,CAACa,CAAC,CAACF,KAAK,GAAGZ,SAAS,CAACc,CAAC;MACpDX,MAAM,CAAC,CAAC,GAAGM,MAAM,CAAC,IAAIC,MAAM;MAC5BP,MAAM,CAAC,CAAC,GAAGM,MAAM,CAAC,IAAII,MAAM;MAC5B;AACR;AACA;AACA;AACA;AACA;MACQ,MAAME,YAAY,GAAGC,SAAS,CAACN,MAAM,EAAEG,MAAM,EAAE,GAAG,CAAC;MACnD;MACA,IAAI,OAAOV,MAAM,CAAC,CAAC,GAAGM,MAAM,CAAC,KAAK,QAAQ,EACtCN,MAAM,CAAC,CAAC,GAAGM,MAAM,CAAC,IAAIM,YAAY;MACtC;MACA,IAAI,OAAOZ,MAAM,CAAC,CAAC,GAAGM,MAAM,CAAC,KAAK,QAAQ,EACtCN,MAAM,CAAC,CAAC,GAAGM,MAAM,CAAC,IAAIM,YAAY;MACtC,OAAOR,QAAQ,CAACJ,MAAM,CAAC;IAC3B;EACJ,CAAC;AAAA,EAAAc,IAAA,OAAAC,MAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"16a7f7a50091dc4802c82c207a777d671ba05705"}
