{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","inputSourceMap":{"version":3,"names":["invariant","setDragLock","PanSession","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mixNumber","percent","animateMotionValue","getContextWindow","addValueToWillChange","frame","elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openDragLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","presenceContext","isPresent","onSessionStart","event","dragSnapToOrigin","getProps","pauseAnimation","stopAnimation","point","onStart","info","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","length","parseFloat","postRender","animationState","setActive","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","resumeAnimation","_a","getAnimationState","animation","play","panSession","transformPagePoint","getTransformPagePoint","contextWindow","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","measure","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","pause","state","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","read","stopResizeListener","window","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","direction","lockThreshold","Math","abs"],"sources":["node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from 'motion-utils';\nimport { setDragLock } from 'motion-dom';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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","ignoreList":[]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","inputSourceMap":{"version":3,"names":["invariant","setDragLock","PanSession","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mixNumber","percent","animateMotionValue","getContextWindow","addValueToWillChange","frame","elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openDragLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","presenceContext","isPresent","onSessionStart","event","dragSnapToOrigin","getProps","pauseAnimation","stopAnimation","point","onStart","info","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","length","parseFloat","postRender","animationState","setActive","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","resumeAnimation","_a","getAnimationState","animation","play","panSession","transformPagePoint","getTransformPagePoint","contextWindow","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","measure","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","pause","state","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","read","stopResizeListener","window","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","direction","lockThreshold","Math","abs"],"sources":["node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from 'motion-utils';\nimport { setDragLock } from 'motion-dom';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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","ignoreList":[]}}},"code":"!function (module1) {\n  let _objectSpread;\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n  }, 0);\n  module1.export({\n    VisualElementDragControls: () => VisualElementDragControls,\n    elementDragControls: () => elementDragControls\n  });\n  let invariant;\n  module1.link(\"motion-utils\", {\n    invariant(v) {\n      invariant = v;\n    }\n  }, 0);\n  let setDragLock;\n  module1.link(\"motion-dom\", {\n    setDragLock(v) {\n      setDragLock = v;\n    }\n  }, 1);\n  let PanSession;\n  module1.link(\"../pan/PanSession.mjs\", {\n    PanSession(v) {\n      PanSession = v;\n    }\n  }, 2);\n  let isRefObject;\n  module1.link(\"../../utils/is-ref-object.mjs\", {\n    isRefObject(v) {\n      isRefObject = v;\n    }\n  }, 3);\n  let addPointerEvent;\n  module1.link(\"../../events/add-pointer-event.mjs\", {\n    addPointerEvent(v) {\n      addPointerEvent = v;\n    }\n  }, 4);\n  let applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic;\n  module1.link(\"./utils/constraints.mjs\", {\n    applyConstraints(v) {\n      applyConstraints = v;\n    },\n    calcRelativeConstraints(v) {\n      calcRelativeConstraints = v;\n    },\n    resolveDragElastic(v) {\n      resolveDragElastic = v;\n    },\n    rebaseAxisConstraints(v) {\n      rebaseAxisConstraints = v;\n    },\n    calcViewportConstraints(v) {\n      calcViewportConstraints = v;\n    },\n    calcOrigin(v) {\n      calcOrigin = v;\n    },\n    defaultElastic(v) {\n      defaultElastic = v;\n    }\n  }, 5);\n  let createBox;\n  module1.link(\"../../projection/geometry/models.mjs\", {\n    createBox(v) {\n      createBox = v;\n    }\n  }, 6);\n  let eachAxis;\n  module1.link(\"../../projection/utils/each-axis.mjs\", {\n    eachAxis(v) {\n      eachAxis = v;\n    }\n  }, 7);\n  let measurePageBox;\n  module1.link(\"../../projection/utils/measure.mjs\", {\n    measurePageBox(v) {\n      measurePageBox = v;\n    }\n  }, 8);\n  let extractEventInfo;\n  module1.link(\"../../events/event-info.mjs\", {\n    extractEventInfo(v) {\n      extractEventInfo = v;\n    }\n  }, 9);\n  let convertBoxToBoundingBox, convertBoundingBoxToBox;\n  module1.link(\"../../projection/geometry/conversion.mjs\", {\n    convertBoxToBoundingBox(v) {\n      convertBoxToBoundingBox = v;\n    },\n    convertBoundingBoxToBox(v) {\n      convertBoundingBoxToBox = v;\n    }\n  }, 10);\n  let addDomEvent;\n  module1.link(\"../../events/add-dom-event.mjs\", {\n    addDomEvent(v) {\n      addDomEvent = v;\n    }\n  }, 11);\n  let calcLength;\n  module1.link(\"../../projection/geometry/delta-calc.mjs\", {\n    calcLength(v) {\n      calcLength = v;\n    }\n  }, 12);\n  let mixNumber;\n  module1.link(\"../../utils/mix/number.mjs\", {\n    mixNumber(v) {\n      mixNumber = v;\n    }\n  }, 13);\n  let percent;\n  module1.link(\"../../value/types/numbers/units.mjs\", {\n    percent(v) {\n      percent = v;\n    }\n  }, 14);\n  let animateMotionValue;\n  module1.link(\"../../animation/interfaces/motion-value.mjs\", {\n    animateMotionValue(v) {\n      animateMotionValue = v;\n    }\n  }, 15);\n  let getContextWindow;\n  module1.link(\"../../utils/get-context-window.mjs\", {\n    getContextWindow(v) {\n      getContextWindow = v;\n    }\n  }, 16);\n  let addValueToWillChange;\n  module1.link(\"../../value/use-will-change/add-will-change.mjs\", {\n    addValueToWillChange(v) {\n      addValueToWillChange = v;\n    }\n  }, 17);\n  let frame;\n  module1.link(\"../../frameloop/frame.mjs\", {\n    frame(v) {\n      frame = v;\n    }\n  }, 18);\n  ___INIT_METEOR_FAST_REFRESH(module);\n  const elementDragControls = new WeakMap();\n  /**\n   *\n   */\n  // let latestPointerEvent: PointerEvent\n  class VisualElementDragControls {\n    constructor(visualElement) {\n      this.openDragLock = null;\n      this.isDragging = false;\n      this.currentDirection = null;\n      this.originPoint = {\n        x: 0,\n        y: 0\n      };\n      /**\n       * The permitted boundaries of travel, in pixels.\n       */\n      this.constraints = false;\n      this.hasMutatedConstraints = false;\n      /**\n       * The per-axis resolved elastic values.\n       */\n      this.elastic = createBox();\n      this.visualElement = visualElement;\n    }\n    start(originEvent) {\n      let {\n        snapToCursor = false\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      /**\n       * Don't start dragging if this component is exiting\n       */\n      const {\n        presenceContext\n      } = this.visualElement;\n      if (presenceContext && presenceContext.isPresent === false) return;\n      const onSessionStart = event => {\n        const {\n          dragSnapToOrigin\n        } = this.getProps();\n        // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n        // the component.\n        dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n        if (snapToCursor) {\n          this.snapToCursor(extractEventInfo(event).point);\n        }\n      };\n      const onStart = (event, info) => {\n        // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n        const {\n          drag,\n          dragPropagation,\n          onDragStart\n        } = this.getProps();\n        if (drag && !dragPropagation) {\n          if (this.openDragLock) this.openDragLock();\n          this.openDragLock = setDragLock(drag);\n          // If we don 't have the lock, don't start dragging\n          if (!this.openDragLock) return;\n        }\n        this.isDragging = true;\n        this.currentDirection = null;\n        this.resolveConstraints();\n        if (this.visualElement.projection) {\n          this.visualElement.projection.isAnimationBlocked = true;\n          this.visualElement.projection.target = undefined;\n        }\n        /**\n         * Record gesture origin\n         */\n        eachAxis(axis => {\n          let current = this.getAxisMotionValue(axis).get() || 0;\n          /**\n           * If the MotionValue is a percentage value convert to px\n           */\n          if (percent.test(current)) {\n            const {\n              projection\n            } = this.visualElement;\n            if (projection && projection.layout) {\n              const measuredAxis = projection.layout.layoutBox[axis];\n              if (measuredAxis) {\n                const length = calcLength(measuredAxis);\n                current = length * (parseFloat(current) / 100);\n              }\n            }\n          }\n          this.originPoint[axis] = current;\n        });\n        // Fire onDragStart event\n        if (onDragStart) {\n          frame.postRender(() => onDragStart(event, info));\n        }\n        addValueToWillChange(this.visualElement, \"transform\");\n        const {\n          animationState\n        } = this.visualElement;\n        animationState && animationState.setActive(\"whileDrag\", true);\n      };\n      const onMove = (event, info) => {\n        // latestPointerEvent = event\n        const {\n          dragPropagation,\n          dragDirectionLock,\n          onDirectionLock,\n          onDrag\n        } = this.getProps();\n        // If we didn't successfully receive the gesture lock, early return.\n        if (!dragPropagation && !this.openDragLock) return;\n        const {\n          offset\n        } = info;\n        // Attempt to detect drag direction if directionLock is true\n        if (dragDirectionLock && this.currentDirection === null) {\n          this.currentDirection = getCurrentDirection(offset);\n          // If we've successfully set a direction, notify listener\n          if (this.currentDirection !== null) {\n            onDirectionLock && onDirectionLock(this.currentDirection);\n          }\n          return;\n        }\n        // Update each point with the latest position\n        this.updateAxis(\"x\", info.point, offset);\n        this.updateAxis(\"y\", info.point, offset);\n        /**\n         * Ideally we would leave the renderer to fire naturally at the end of\n         * this frame but if the element is about to change layout as the result\n         * of a re-render we want to ensure the browser can read the latest\n         * bounding box to ensure the pointer and element don't fall out of sync.\n         */\n        this.visualElement.render();\n        /**\n         * This must fire after the render call as it might trigger a state\n         * change which itself might trigger a layout update.\n         */\n        onDrag && onDrag(event, info);\n      };\n      const onSessionEnd = (event, info) => this.stop(event, info);\n      const resumeAnimation = () => eachAxis(axis => {\n        var _a;\n        return this.getAnimationState(axis) === \"paused\" && ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n      });\n      const {\n        dragSnapToOrigin\n      } = this.getProps();\n      this.panSession = new PanSession(originEvent, {\n        onSessionStart,\n        onStart,\n        onMove,\n        onSessionEnd,\n        resumeAnimation\n      }, {\n        transformPagePoint: this.visualElement.getTransformPagePoint(),\n        dragSnapToOrigin,\n        contextWindow: getContextWindow(this.visualElement)\n      });\n    }\n    stop(event, info) {\n      const isDragging = this.isDragging;\n      this.cancel();\n      if (!isDragging) return;\n      const {\n        velocity\n      } = info;\n      this.startAnimation(velocity);\n      const {\n        onDragEnd\n      } = this.getProps();\n      if (onDragEnd) {\n        frame.postRender(() => onDragEnd(event, info));\n      }\n    }\n    cancel() {\n      this.isDragging = false;\n      const {\n        projection,\n        animationState\n      } = this.visualElement;\n      if (projection) {\n        projection.isAnimationBlocked = false;\n      }\n      this.panSession && this.panSession.end();\n      this.panSession = undefined;\n      const {\n        dragPropagation\n      } = this.getProps();\n      if (!dragPropagation && this.openDragLock) {\n        this.openDragLock();\n        this.openDragLock = null;\n      }\n      animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n      const {\n        drag\n      } = this.getProps();\n      // If we're not dragging this axis, do an early return.\n      if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n      const axisValue = this.getAxisMotionValue(axis);\n      let next = this.originPoint[axis] + offset[axis];\n      // Apply constraints\n      if (this.constraints && this.constraints[axis]) {\n        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n      }\n      axisValue.set(next);\n    }\n    resolveConstraints() {\n      var _a;\n      const {\n        dragConstraints,\n        dragElastic\n      } = this.getProps();\n      const layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n      const prevConstraints = this.constraints;\n      if (dragConstraints && isRefObject(dragConstraints)) {\n        if (!this.constraints) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      } else {\n        if (dragConstraints && layout) {\n          this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n        } else {\n          this.constraints = false;\n        }\n      }\n      this.elastic = resolveDragElastic(dragElastic);\n      /**\n       * If we're outputting to external MotionValues, we want to rebase the measured constraints\n       * from viewport-relative to component-relative.\n       */\n      if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n        eachAxis(axis => {\n          if (this.constraints !== false && this.getAxisMotionValue(axis)) {\n            this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n          }\n        });\n      }\n    }\n    resolveRefConstraints() {\n      const {\n        dragConstraints: constraints,\n        onMeasureDragConstraints\n      } = this.getProps();\n      if (!constraints || !isRefObject(constraints)) return false;\n      const constraintsElement = constraints.current;\n      invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n      const {\n        projection\n      } = this.visualElement;\n      // TODO\n      if (!projection || !projection.layout) return false;\n      const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n      let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n      /**\n       * If there's an onMeasureDragConstraints listener we call it and\n       * if different constraints are returned, set constraints to that\n       */\n      if (onMeasureDragConstraints) {\n        const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n        this.hasMutatedConstraints = !!userConstraints;\n        if (userConstraints) {\n          measuredConstraints = convertBoundingBoxToBox(userConstraints);\n        }\n      }\n      return measuredConstraints;\n    }\n    startAnimation(velocity) {\n      const {\n        drag,\n        dragMomentum,\n        dragElastic,\n        dragTransition,\n        dragSnapToOrigin,\n        onDragTransitionEnd\n      } = this.getProps();\n      const constraints = this.constraints || {};\n      const momentumAnimations = eachAxis(axis => {\n        if (!shouldDrag(axis, drag, this.currentDirection)) {\n          return;\n        }\n        let transition = constraints && constraints[axis] || {};\n        if (dragSnapToOrigin) transition = {\n          min: 0,\n          max: 0\n        };\n        /**\n         * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n         * of spring animations so we should look into adding a disable spring option to `inertia`.\n         * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n         * using the value of `dragElastic`.\n         */\n        const bounceStiffness = dragElastic ? 200 : 1000000;\n        const bounceDamping = dragElastic ? 40 : 10000000;\n        const inertia = _objectSpread(_objectSpread({\n          type: \"inertia\",\n          velocity: dragMomentum ? velocity[axis] : 0,\n          bounceStiffness,\n          bounceDamping,\n          timeConstant: 750,\n          restDelta: 1,\n          restSpeed: 10\n        }, dragTransition), transition);\n        // If we're not animating on an externally-provided `MotionValue` we can use the\n        // component's animation controls which will handle interactions with whileHover (etc),\n        // otherwise we just have to animate the `MotionValue` itself.\n        return this.startAxisValueAnimation(axis, inertia);\n      });\n      // Run all animations and then resolve the new drag constraints.\n      return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n      const axisValue = this.getAxisMotionValue(axis);\n      addValueToWillChange(this.visualElement, axis);\n      return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n      eachAxis(axis => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n      eachAxis(axis => {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();\n      });\n    }\n    getAnimationState(axis) {\n      var _a;\n      return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n      const dragKey = \"_drag\".concat(axis.toUpperCase());\n      const props = this.visualElement.getProps();\n      const externalMotionValue = props[dragKey];\n      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n      eachAxis(axis => {\n        const {\n          drag\n        } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, this.currentDirection)) return;\n        const {\n          projection\n        } = this.visualElement;\n        const axisValue = this.getAxisMotionValue(axis);\n        if (projection && projection.layout) {\n          const {\n            min,\n            max\n          } = projection.layout.layoutBox[axis];\n          axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n        }\n      });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n      if (!this.visualElement.current) return;\n      const {\n        drag,\n        dragConstraints\n      } = this.getProps();\n      const {\n        projection\n      } = this.visualElement;\n      if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n      /**\n       * Stop current animations as there can be visual glitching if we try to do\n       * this mid-animation\n       */\n      this.stopAnimation();\n      /**\n       * Record the relative position of the dragged element relative to the\n       * constraints box and save as a progress value.\n       */\n      const boxProgress = {\n        x: 0,\n        y: 0\n      };\n      eachAxis(axis => {\n        const axisValue = this.getAxisMotionValue(axis);\n        if (axisValue && this.constraints !== false) {\n          const latest = axisValue.get();\n          boxProgress[axis] = calcOrigin({\n            min: latest,\n            max: latest\n          }, this.constraints[axis]);\n        }\n      });\n      /**\n       * Update the layout of this element and resolve the latest drag constraints\n       */\n      const {\n        transformTemplate\n      } = this.visualElement.getProps();\n      this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n      this.resolveConstraints();\n      /**\n       * For each axis, calculate the current progress of the layout axis\n       * within the new constraints.\n       */\n      eachAxis(axis => {\n        if (!shouldDrag(axis, drag, null)) return;\n        /**\n         * Calculate a new transform based on the previous box progress\n         */\n        const axisValue = this.getAxisMotionValue(axis);\n        const {\n          min,\n          max\n        } = this.constraints[axis];\n        axisValue.set(mixNumber(min, max, boxProgress[axis]));\n      });\n    }\n    addListeners() {\n      if (!this.visualElement.current) return;\n      elementDragControls.set(this.visualElement, this);\n      const element = this.visualElement.current;\n      /**\n       * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n       */\n      const stopPointerListener = addPointerEvent(element, \"pointerdown\", event => {\n        const {\n          drag,\n          dragListener = true\n        } = this.getProps();\n        drag && dragListener && this.start(event);\n      });\n      const measureDragConstraints = () => {\n        const {\n          dragConstraints\n        } = this.getProps();\n        if (isRefObject(dragConstraints) && dragConstraints.current) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      };\n      const {\n        projection\n      } = this.visualElement;\n      const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n      if (projection && !projection.layout) {\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n      }\n      frame.read(measureDragConstraints);\n      /**\n       * Attach a window resize listener to scale the draggable target within its defined\n       * constraints as the window resizes.\n       */\n      const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n      /**\n       * If the element's layout changes, calculate the delta and apply that to\n       * the drag gesture's origin point.\n       */\n      const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", _ref => {\n        let {\n          delta,\n          hasLayoutChanged\n        } = _ref;\n        if (this.isDragging && hasLayoutChanged) {\n          eachAxis(axis => {\n            const motionValue = this.getAxisMotionValue(axis);\n            if (!motionValue) return;\n            this.originPoint[axis] += delta[axis].translate;\n            motionValue.set(motionValue.get() + delta[axis].translate);\n          });\n          this.visualElement.render();\n        }\n      });\n      return () => {\n        stopResizeListener();\n        stopPointerListener();\n        stopMeasureLayoutListener();\n        stopLayoutUpdateListener && stopLayoutUpdateListener();\n      };\n    }\n    getProps() {\n      const props = this.visualElement.getProps();\n      const {\n        drag = false,\n        dragDirectionLock = false,\n        dragPropagation = false,\n        dragConstraints = false,\n        dragElastic = defaultElastic,\n        dragMomentum = true\n      } = props;\n      return _objectSpread(_objectSpread({}, props), {}, {\n        drag,\n        dragDirectionLock,\n        dragPropagation,\n        dragConstraints,\n        dragElastic,\n        dragMomentum\n      });\n    }\n  }\n  function shouldDrag(direction, drag, currentDirection) {\n    return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n  }\n  /**\n   * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n   * than the provided threshold, return `null`.\n   *\n   * @param offset - The x/y offset from origin.\n   * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n   */\n  function getCurrentDirection(offset) {\n    let lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n      direction = \"y\";\n    } else if (Math.abs(offset.x) > lockThreshold) {\n      direction = \"x\";\n    }\n    return direction;\n  }\n}.call(this, module);","map":{"version":3,"names":["elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openDragLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","createBox","start","originEvent","snapToCursor","arguments","length","undefined","presenceContext","isPresent","onSessionStart","event","dragSnapToOrigin","getProps","pauseAnimation","stopAnimation","extractEventInfo","point","onStart","info","drag","dragPropagation","onDragStart","setDragLock","resolveConstraints","projection","isAnimationBlocked","target","eachAxis","axis","current","getAxisMotionValue","get","percent","test","layout","measuredAxis","layoutBox","calcLength","parseFloat","frame","postRender","addValueToWillChange","animationState","setActive","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","resumeAnimation","_a","getAnimationState","animation","play","panSession","PanSession","transformPagePoint","getTransformPagePoint","contextWindow","getContextWindow","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","applyConstraints","set","dragConstraints","dragElastic","measure","prevConstraints","isRefObject","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","invariant","constraintsBox","measurePageBox","root","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","convertBoundingBoxToBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","_objectSpread","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","animateMotionValue","pause","state","dragKey","concat","toUpperCase","props","externalMotionValue","getValue","initial","mixNumber","scalePositionWithinConstraints","boxProgress","latest","calcOrigin","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","addPointerEvent","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","read","stopResizeListener","addDomEvent","window","stopLayoutUpdateListener","_ref","delta","hasLayoutChanged","motionValue","translate","defaultElastic","direction","lockThreshold","Math","abs","call","module"],"sources":["node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from 'motion-utils';\nimport { setDragLock } from 'motion-dom';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"78525ab1632e63a8a6662fca5c2681aef9aedfa6"}
