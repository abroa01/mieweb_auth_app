{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/server/main.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/main.js","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/server/main.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/server/main.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/main.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 0);\n    let WebApp;\n    module.link(\"meteor/webapp\", {\n      WebApp(v) {\n        WebApp = v;\n      }\n    }, 1);\n    let sendNotification;\n    module.link(\"./firebase\", {\n      sendNotification(v) {\n        sendNotification = v;\n      }\n    }, 2);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 3);\n    module.link(\"../imports/api/deviceLogs.js\");\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 4);\n    let DeviceLogs;\n    module.link(\"../imports/api/deviceLogs.js\", {\n      DeviceLogs(v) {\n        DeviceLogs = v;\n      }\n    }, 5);\n    let NotificationHistory;\n    module.link(\"../imports/api/notificationHistory\", {\n      NotificationHistory(v) {\n        NotificationHistory = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    // Create a Map to store pending notifications\n    const pendingNotifications = new Map();\n    const responsePromises = new Map();\n    const saveUserNotificationHistory = async notification => {\n      const {\n        appId,\n        title,\n        body\n      } = notification;\n      const deviceLog = await DeviceLogs.findOneAsync({\n        appId\n      });\n      if (!deviceLog) {\n        console.error(\"No user found for appId:\", appId);\n        return;\n      }\n      const userId = deviceLog.userId;\n      const data = {\n        userId,\n        appId,\n        title,\n        body\n      };\n      Meteor.call(\"notificationHistory.insert\", data, (error, result) => {\n        if (error) {\n          console.error(\"Error inserting notification:\", error);\n        } else {\n          console.log(\"Notification inserted successfully:\", result);\n        }\n      });\n    };\n    WebApp.connectHandlers.use(\"/send-notification\", async (req, res) => {\n      let body = \"\";\n      req.on(\"data\", chunk => {\n        body += chunk;\n      });\n      req.on(\"end\", async () => {\n        try {\n          const requestBody = JSON.parse(body);\n          console.log(\"Received request body:\", requestBody);\n          const {\n            appId,\n            title,\n            body: messageBody,\n            actions\n          } = requestBody;\n          if (!appId || !title || !messageBody || !actions) {\n            throw new Error(\"Missing required fields\");\n          }\n\n          // Get FCM token\n          const fcmToken = await new Promise((resolve, reject) => {\n            Meteor.call(\"deviceLogs.getFCMTokenByAppId\", appId, (error, result) => {\n              if (error) reject(error);else resolve(result);\n            });\n          });\n\n          // Send notification\n          await sendNotification(fcmToken, title, messageBody, actions);\n          console.log(\"Notification sent successfully\");\n          saveUserNotificationHistory({\n            appId,\n            title,\n            body: messageBody\n          });\n\n          // Create promise for user response\n          const userResponsePromise = new Promise(resolve => {\n            // Store the FCM token as the appId since that's what we'll get back\n            console.log(\"FCM tokennnnnnnnnnnnn\", fcmToken);\n            responsePromises.set(fcmToken, resolve);\n\n            // Add timeout\n            setTimeout(() => {\n              if (responsePromises.has(fcmToken)) {\n                resolve(\"timeout\");\n                responsePromises.delete(fcmToken);\n              }\n            }, 300000); // 5 minute timeout\n          });\n\n          // Wait for user response\n          const userResponse = await userResponsePromise;\n          console.log(\"USER RESPONSE\", userResponse);\n\n          // Send final response\n          res.writeHead(200, {\n            \"Content-Type\": \"application/json\"\n          });\n          res.end(JSON.stringify({\n            success: true,\n            action: userResponse\n          }));\n        } catch (error) {\n          console.error(\"Error in /send-notification:\", error);\n          res.writeHead(400, {\n            \"Content-Type\": \"application/json\"\n          });\n          res.end(JSON.stringify({\n            success: false,\n            error: error.message\n          }));\n        }\n      });\n    });\n\n    // Meteor methods\n    Meteor.methods({\n      async \"notifications.handleResponse\"(appId, action) {\n        check(appId, String);\n        check(action, String);\n        console.log(\"Handling notification response for appId: \".concat(appId, \", action: \").concat(action));\n        console.log(\"Response promises\", responsePromises);\n\n        // If we have a pending promise for this notification, resolve it\n        if (responsePromises.has(appId)) {\n          const resolve = responsePromises.get(appId);\n          resolve(action);\n          responsePromises.delete(appId);\n          return {\n            success: true,\n            message: \"Response \".concat(action, \" processed successfully\")\n          };\n        } else {\n          console.log(\"No pending promise found for appId:\", appId);\n          return {\n            success: false,\n            message: \"No pending notification found\"\n          };\n        }\n      },\n      async userAction(action, requestId) {\n        let replyText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        check(action, String);\n        check(requestId, String);\n        if (replyText) check(replyText, String);\n        const validActions = [\"approve\", \"reject\", \"reply\"];\n        if (!validActions.includes(action)) {\n          throw new Meteor.Error(\"invalid-action\", \"Invalid action performed by the user.\");\n        }\n        const pendingNotification = pendingNotifications.get(requestId);\n        if (pendingNotification) {\n          clearTimeout(pendingNotification.timeout);\n          pendingNotification.resolve({\n            action,\n            replyText\n          });\n          pendingNotifications.delete(requestId);\n          return {\n            success: true,\n            action,\n            replyText\n          };\n        } else {\n          throw new Meteor.Error(\"invalid-request\", \"No pending notification found for this request.\");\n        }\n      },\n      async \"users.register\"(userDetails) {\n        check(userDetails, {\n          email: String,\n          pin: String,\n          firstName: String,\n          lastName: String,\n          sessionDeviceInfo: {\n            model: String,\n            platform: String,\n            uuid: String,\n            version: String,\n            manufacturer: String\n          },\n          fcmDeviceToken: String\n        });\n        const {\n          email,\n          pin,\n          firstName,\n          lastName,\n          sessionDeviceInfo\n        } = userDetails;\n        const fcmToken = userDetails.fcmDeviceToken;\n\n        // Check if user exists\n        if (await Meteor.users.findOneAsync({\n          \"emails.address\": email\n        })) {\n          throw new Meteor.Error(\"user-exists\", \"User already exists with this email\");\n        }\n        try {\n          // Create user in Meteor users collection\n          const userId = await Accounts.createUser({\n            email,\n            password: pin,\n            profile: {\n              firstName,\n              lastName,\n              deviceInfo: sessionDeviceInfo,\n              deviceToken: fcmToken\n            }\n          });\n          if (userId) {\n            console.log(\"user id in server is: \".concat(userId));\n\n            // Ensure userId is passed as a string\n            await Meteor.call(\"deviceLogs.upsert\", {\n              userId: userId.toString(),\n              email,\n              deviceUUID: sessionDeviceInfo.uuid,\n              fcmToken,\n              deviceInfo: sessionDeviceInfo\n            });\n          }\n          return {\n            success: true,\n            userId,\n            message: \"Registration successful\"\n          };\n        } catch (error) {\n          console.error(\"Error during registration:\", error);\n          throw new Meteor.Error(\"registration-failed\", error.message);\n        }\n      },\n      async getUserDetails(email) {\n        var _user$profile, _user$profile2;\n        if (!email) {\n          throw new Meteor.Error(\"Email is required\");\n        }\n        const user = await Meteor.users.findOneAsync({\n          \"emails.address\": email\n        });\n        if (!user) {\n          throw new Meteor.Error(\"User not found\");\n        }\n        return {\n          firstName: ((_user$profile = user.profile) === null || _user$profile === void 0 ? void 0 : _user$profile.firstName) || \"\",\n          lastName: ((_user$profile2 = user.profile) === null || _user$profile2 === void 0 ? void 0 : _user$profile2.lastName) || \"\",\n          email: user.emails[0].address || \"\"\n        };\n      },\n      async \"users.checkRegistration\"(fcmToken) {\n        check(fcmToken, String);\n        const user = Meteor.users.findOneAsync({\n          \"profile.fcmToken\": fcmToken\n        });\n        if (!user) {\n          throw new Meteor.Error(\"device-deregistered\", \"This device is deregistered. Please register again.\");\n        }\n        return user._id;\n      },\n      async updateUserProfile(_ref) {\n        let {\n          firstName,\n          lastName,\n          email\n        } = _ref;\n        check(firstName, String);\n        check(lastName, String);\n        check(email, String);\n        console.log(\"Updating profile for user:\", firstName, lastName, email);\n        if (!this.userId) {\n          throw new Meteor.Error(\"not-authorized\", \"You must be logged in to update your profile\");\n        }\n        try {\n          // Update the user's profile in the database\n          Meteor.users.updateAsync(this.userId, {\n            $set: {\n              \"profile.firstName\": firstName,\n              \"profile.lastName\": lastName,\n              \"emails.0.address\": email\n            }\n          });\n          return {\n            success: true,\n            message: \"Profile updated successfully\"\n          };\n        } catch (error) {\n          console.error(\"Error updating profile:\", error);\n          throw new Meteor.Error(\"update-failed\", \"Failed to update profile\", error);\n        }\n      },\n      async \"users.mapFCMTokenToUser\"(userId, fcmToken) {\n        check(userId, String);\n        check(fcmToken, String);\n        if (!this.userId) {\n          throw new Meteor.Error(\"not-authorized\", \"User must be logged in\");\n        }\n        const user = Meteor.users.findOne(userId);\n        if (!user) {\n          throw new Meteor.Error(\"user-not-found\", \"User not found\");\n        }\n\n        // Map token to the user\n        Meteor.users.update(userId, {\n          $set: {\n            \"profile.fcmToken\": fcmToken\n          }\n        });\n      },\n      async checkUsersExist() {\n        try {\n          const userCount = await Meteor.users.find().countAsync();\n          console.log(\"User count:\", userCount);\n          return userCount > 0;\n        } catch (error) {\n          console.error(\"Error in checkUsersExist:\", error);\n          throw new Meteor.Error(\"server-error\", \"Failed to check user existence\");\n        }\n      }\n    });\n    Meteor.startup(() => {\n      // Meteor.publish('deviceLogs', function (deviceUuid) {\n      //   console.log(\"Publishing deviceLogs for UUID:\", deviceUuid);\n      //   if (!deviceUuid) {\n      //     console.log(\"No UUID provided, returning empty set\");\n      //     return this.ready();\n      //   }\n      //   const query = { deviceUUID: deviceUuid };\n      //   console.log(\"MongoDB query:\", query);\n      //   const records = DeviceLogs.find(query, {\n      //     fields: {\n      //       deviceUUID: 1,\n      //       email: 1,\n      //       fcmToken: 1\n      //     }\n      //   });\n      //   console.log(\"Found records count:\", records.countAsync());\n      //   return records;\n      // });\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Meteor","module","link","v","WebApp","sendNotification","Accounts","check","DeviceLogs","NotificationHistory","__reifyWaitForDeps__","pendingNotifications","Map","responsePromises","saveUserNotificationHistory","notification","appId","title","body","deviceLog","findOneAsync","console","error","userId","data","call","result","log","connectHandlers","use","req","res","on","chunk","requestBody","JSON","parse","messageBody","actions","Error","fcmToken","Promise","resolve","reject","userResponsePromise","set","setTimeout","has","delete","userResponse","writeHead","end","stringify","success","action","message","methods","notifications.handleResponse","String","concat","get","userAction","requestId","replyText","arguments","length","undefined","validActions","includes","pendingNotification","clearTimeout","timeout","users.register","userDetails","email","pin","firstName","lastName","sessionDeviceInfo","model","platform","uuid","version","manufacturer","fcmDeviceToken","users","createUser","password","profile","deviceInfo","deviceToken","toString","deviceUUID","getUserDetails","_user$profile","_user$profile2","user","emails","address","users.checkRegistration","_id","updateUserProfile","_ref","updateAsync","$set","users.mapFCMTokenToUser","findOne","update","checkUsersExist","userCount","find","countAsync","startup","__reify_async_result__","_reifyError","self","async"],"sources":["server/main.js"],"sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { WebApp } from \"meteor/webapp\";\nimport { sendNotification } from \"./firebase\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport \"../imports/api/deviceLogs.js\";\nimport { check } from \"meteor/check\";\nimport { DeviceLogs } from \"../imports/api/deviceLogs.js\";\nimport { NotificationHistory } from \"../imports/api/notificationHistory\";\n\n// Create a Map to store pending notifications\nconst pendingNotifications = new Map();\nconst responsePromises = new Map();\n\nconst saveUserNotificationHistory = async (notification) => {\n  const { appId, title, body } = notification;\n\n  const deviceLog = await DeviceLogs.findOneAsync({ appId });\n  if (!deviceLog) {\n    console.error(\"No user found for appId:\", appId);\n    return;\n  }\n\n  const userId = deviceLog.userId;\n\n  const data = {\n    userId,\n    appId,\n    title,\n    body,\n  };\n\n  Meteor.call(\"notificationHistory.insert\", data, (error, result) => {\n    if (error) {\n      console.error(\"Error inserting notification:\", error);\n    } else {\n      console.log(\"Notification inserted successfully:\", result);\n    }\n  });\n};\n\nWebApp.connectHandlers.use(\"/send-notification\", async (req, res) => {\n  let body = \"\";\n\n  req.on(\"data\", (chunk) => {\n    body += chunk;\n  });\n\n  req.on(\"end\", async () => {\n    try {\n      const requestBody = JSON.parse(body);\n      console.log(\"Received request body:\", requestBody);\n\n      const { appId, title, body: messageBody, actions } = requestBody;\n\n      if (!appId || !title || !messageBody || !actions) {\n        throw new Error(\"Missing required fields\");\n      }\n\n      // Get FCM token\n      const fcmToken = await new Promise((resolve, reject) => {\n        Meteor.call(\"deviceLogs.getFCMTokenByAppId\", appId, (error, result) => {\n          if (error) reject(error);\n          else resolve(result);\n        });\n      });\n\n      // Send notification\n      await sendNotification(fcmToken, title, messageBody, actions);\n      console.log(\"Notification sent successfully\");\n      saveUserNotificationHistory({ appId, title, body: messageBody });\n\n      // Create promise for user response\n      const userResponsePromise = new Promise((resolve) => {\n        // Store the FCM token as the appId since that's what we'll get back\n        console.log(\"FCM tokennnnnnnnnnnnn\", fcmToken);\n        responsePromises.set(fcmToken, resolve);\n\n        // Add timeout\n        setTimeout(() => {\n          if (responsePromises.has(fcmToken)) {\n            resolve(\"timeout\");\n            responsePromises.delete(fcmToken);\n          }\n        }, 300000); // 5 minute timeout\n      });\n\n      // Wait for user response\n      const userResponse = await userResponsePromise;\n      console.log(\"USER RESPONSE\", userResponse);\n\n      // Send final response\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          success: true,\n          action: userResponse,\n        })\n      );\n    } catch (error) {\n      console.error(\"Error in /send-notification:\", error);\n      res.writeHead(400, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          success: false,\n          error: error.message,\n        })\n      );\n    }\n  });\n});\n\n// Meteor methods\nMeteor.methods({\n  async \"notifications.handleResponse\"(appId, action) {\n    check(appId, String);\n    check(action, String);\n\n    console.log(\n      `Handling notification response for appId: ${appId}, action: ${action}`\n    );\n    console.log(\"Response promises\", responsePromises);\n\n    // If we have a pending promise for this notification, resolve it\n    if (responsePromises.has(appId)) {\n      const resolve = responsePromises.get(appId);\n      resolve(action);\n      responsePromises.delete(appId);\n      return {\n        success: true,\n        message: `Response ${action} processed successfully`,\n      };\n    } else {\n      console.log(\"No pending promise found for appId:\", appId);\n      return { success: false, message: \"No pending notification found\" };\n    }\n  },\n\n  async userAction(action, requestId, replyText = null) {\n    check(action, String);\n    check(requestId, String);\n    if (replyText) check(replyText, String);\n\n    const validActions = [\"approve\", \"reject\", \"reply\"];\n    if (!validActions.includes(action)) {\n      throw new Meteor.Error(\n        \"invalid-action\",\n        \"Invalid action performed by the user.\"\n      );\n    }\n\n    const pendingNotification = pendingNotifications.get(requestId);\n    if (pendingNotification) {\n      clearTimeout(pendingNotification.timeout);\n      pendingNotification.resolve({ action, replyText });\n      pendingNotifications.delete(requestId);\n      return { success: true, action, replyText };\n    } else {\n      throw new Meteor.Error(\n        \"invalid-request\",\n        \"No pending notification found for this request.\"\n      );\n    }\n  },\n\n  async \"users.register\"(userDetails) {\n    check(userDetails, {\n      email: String,\n      pin: String,\n      firstName: String,\n      lastName: String,\n      sessionDeviceInfo: {\n        model: String,\n        platform: String,\n        uuid: String,\n        version: String,\n        manufacturer: String,\n      },\n      fcmDeviceToken: String,\n    });\n\n    const { email, pin, firstName, lastName, sessionDeviceInfo } = userDetails;\n    const fcmToken = userDetails.fcmDeviceToken;\n\n    // Check if user exists\n    if (await Meteor.users.findOneAsync({ \"emails.address\": email })) {\n      throw new Meteor.Error(\n        \"user-exists\",\n        \"User already exists with this email\"\n      );\n    }\n\n    try {\n      // Create user in Meteor users collection\n      const userId = await Accounts.createUser({\n        email,\n        password: pin,\n        profile: {\n          firstName,\n          lastName,\n          deviceInfo: sessionDeviceInfo,\n          deviceToken: fcmToken,\n        },\n      });\n\n      if (userId) {\n        console.log(`user id in server is: ${userId}`);\n\n        // Ensure userId is passed as a string\n        await Meteor.call(\"deviceLogs.upsert\", {\n          userId: userId.toString(),\n          email,\n          deviceUUID: sessionDeviceInfo.uuid,\n          fcmToken,\n          deviceInfo: sessionDeviceInfo,\n        });\n      }\n\n      return {\n        success: true,\n        userId,\n        message: \"Registration successful\",\n      };\n    } catch (error) {\n      console.error(\"Error during registration:\", error);\n      throw new Meteor.Error(\"registration-failed\", error.message);\n    }\n  },\n\n  async getUserDetails(email) {\n    if (!email) {\n      throw new Meteor.Error(\"Email is required\");\n    }\n\n    const user = await Meteor.users.findOneAsync({ \"emails.address\": email });\n\n    if (!user) {\n      throw new Meteor.Error(\"User not found\");\n    }\n\n    return {\n      firstName: user.profile?.firstName || \"\",\n      lastName: user.profile?.lastName || \"\",\n      email: user.emails[0].address || \"\",\n    };\n  },\n\n  async \"users.checkRegistration\"(fcmToken) {\n    check(fcmToken, String);\n\n    const user = Meteor.users.findOneAsync({ \"profile.fcmToken\": fcmToken });\n    if (!user) {\n      throw new Meteor.Error(\n        \"device-deregistered\",\n        \"This device is deregistered. Please register again.\"\n      );\n    }\n    return user._id;\n  },\n\n  async updateUserProfile({ firstName, lastName, email }) {\n    check(firstName, String);\n    check(lastName, String);\n    check(email, String);\n\n    console.log(\"Updating profile for user:\", firstName, lastName, email);\n\n    if (!this.userId) {\n      throw new Meteor.Error(\n        \"not-authorized\",\n        \"You must be logged in to update your profile\"\n      );\n    }\n\n    try {\n      // Update the user's profile in the database\n      Meteor.users.updateAsync(this.userId, {\n        $set: {\n          \"profile.firstName\": firstName,\n          \"profile.lastName\": lastName,\n          \"emails.0.address\": email,\n        },\n      });\n\n      return { success: true, message: \"Profile updated successfully\" };\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      throw new Meteor.Error(\n        \"update-failed\",\n        \"Failed to update profile\",\n        error\n      );\n    }\n  },\n\n  async \"users.mapFCMTokenToUser\"(userId, fcmToken) {\n    check(userId, String);\n    check(fcmToken, String);\n\n    if (!this.userId) {\n      throw new Meteor.Error(\"not-authorized\", \"User must be logged in\");\n    }\n\n    const user = Meteor.users.findOne(userId);\n    if (!user) {\n      throw new Meteor.Error(\"user-not-found\", \"User not found\");\n    }\n\n    // Map token to the user\n    Meteor.users.update(userId, {\n      $set: {\n        \"profile.fcmToken\": fcmToken,\n      },\n    });\n  },\n  async checkUsersExist() {\n    try {\n      const userCount = await Meteor.users.find().countAsync();\n      console.log(\"User count:\", userCount);\n      return userCount > 0;\n    } catch (error) {\n      console.error(\"Error in checkUsersExist:\", error);\n      throw new Meteor.Error(\"server-error\", \"Failed to check user existence\");\n    }\n  },\n});\n\nMeteor.startup(() => {\n  // Meteor.publish('deviceLogs', function (deviceUuid) {\n  //   console.log(\"Publishing deviceLogs for UUID:\", deviceUuid);\n  //   if (!deviceUuid) {\n  //     console.log(\"No UUID provided, returning empty set\");\n  //     return this.ready();\n  //   }\n  //   const query = { deviceUUID: deviceUuid };\n  //   console.log(\"MongoDB query:\", query);\n  //   const records = DeviceLogs.find(query, {\n  //     fields: {\n  //       deviceUUID: 1,\n  //       email: 1,\n  //       fcmToken: 1\n  //     }\n  //   });\n  //   console.log(\"Found records count:\", records.countAsync());\n  //   return records;\n  // });\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a28f9fbc2375f7b0f47a22187cd7f0a505519fb9"}
