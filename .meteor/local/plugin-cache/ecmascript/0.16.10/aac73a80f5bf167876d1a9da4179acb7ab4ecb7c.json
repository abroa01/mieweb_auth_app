{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","inputSourceMap":{"version":3,"names":["___INIT_METEOR_FAST_REFRESH","module","_s","$RefreshSig$","jsx","Fragment","useMemo","useRef","useState","useContext","PresenceChild","LayoutGroupContext","invariant","useConstant","onlyElements","getChildKey","useIsomorphicLayoutEffect","AnimatePresence","children","exitBeforeEnter","custom","initial","onExitComplete","presenceAffectsLayout","mode","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","Map","diffedChildren","setDiffedChildren","renderedChildren","setRenderedChildren","current","i","length","key","includes","get","set","delete","join","exitingChildren","nextChildren","child","splice","push","process","env","NODE_ENV","console","warn","forceRender","isPresent","onExit","has","isEveryExitComplete","forEach","isExitComplete","undefined","_c","$RefreshReg$"],"sources":["node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { invariant } from 'motion-utils';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, exitBeforeEnter, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = presentChildren === renderedChildren ||\n                presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: isPresent ? undefined : custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n"],"mappings":"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","ignoreList":[]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","root":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/anshul/Masters/Internship/POC/Meteor_Mobile/mieweb_push_auth/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","inputSourceMap":{"version":3,"names":["___INIT_METEOR_FAST_REFRESH","module","_s","$RefreshSig$","jsx","Fragment","useMemo","useRef","useState","useContext","PresenceChild","LayoutGroupContext","invariant","useConstant","onlyElements","getChildKey","useIsomorphicLayoutEffect","AnimatePresence","children","exitBeforeEnter","custom","initial","onExitComplete","presenceAffectsLayout","mode","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","Map","diffedChildren","setDiffedChildren","renderedChildren","setRenderedChildren","current","i","length","key","includes","get","set","delete","join","exitingChildren","nextChildren","child","splice","push","process","env","NODE_ENV","console","warn","forceRender","isPresent","onExit","has","isEveryExitComplete","forEach","isExitComplete","undefined","_c","$RefreshReg$"],"sources":["node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { invariant } from 'motion-utils';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, exitBeforeEnter, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = presentChildren === renderedChildren ||\n                presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: isPresent ? undefined : custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n"],"mappings":"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","ignoreList":[]}}},"code":"\"use client\";\n\n!function (module1) {\n  module1.export({\n    AnimatePresence: () => AnimatePresence\n  });\n  let jsx, Fragment;\n  module1.link(\"react/jsx-runtime\", {\n    jsx(v) {\n      jsx = v;\n    },\n    Fragment(v) {\n      Fragment = v;\n    }\n  }, 0);\n  let useMemo, useRef, useState, useContext;\n  module1.link(\"react\", {\n    useMemo(v) {\n      useMemo = v;\n    },\n    useRef(v) {\n      useRef = v;\n    },\n    useState(v) {\n      useState = v;\n    },\n    useContext(v) {\n      useContext = v;\n    }\n  }, 1);\n  let PresenceChild;\n  module1.link(\"./PresenceChild.mjs\", {\n    PresenceChild(v) {\n      PresenceChild = v;\n    }\n  }, 2);\n  let LayoutGroupContext;\n  module1.link(\"../../context/LayoutGroupContext.mjs\", {\n    LayoutGroupContext(v) {\n      LayoutGroupContext = v;\n    }\n  }, 3);\n  let invariant;\n  module1.link(\"motion-utils\", {\n    invariant(v) {\n      invariant = v;\n    }\n  }, 4);\n  let useConstant;\n  module1.link(\"../../utils/use-constant.mjs\", {\n    useConstant(v) {\n      useConstant = v;\n    }\n  }, 5);\n  let onlyElements, getChildKey;\n  module1.link(\"./utils.mjs\", {\n    onlyElements(v) {\n      onlyElements = v;\n    },\n    getChildKey(v) {\n      getChildKey = v;\n    }\n  }, 6);\n  let useIsomorphicLayoutEffect;\n  module1.link(\"../../utils/use-isomorphic-effect.mjs\", {\n    useIsomorphicLayoutEffect(v) {\n      useIsomorphicLayoutEffect = v;\n    }\n  }, 7);\n  ___INIT_METEOR_FAST_REFRESH(module);\n  var _s = $RefreshSig$();\n  /**\n   * `AnimatePresence` enables the animation of components that have been removed from the tree.\n   *\n   * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n   *\n   * Any `motion` components that have an `exit` property defined will animate out when removed from\n   * the tree.\n   *\n   * ```jsx\n   * import { motion, AnimatePresence } from 'framer-motion'\n   *\n   * export const Items = ({ items }) => (\n   *   <AnimatePresence>\n   *     {items.map(item => (\n   *       <motion.div\n   *         key={item.id}\n   *         initial={{ opacity: 0 }}\n   *         animate={{ opacity: 1 }}\n   *         exit={{ opacity: 0 }}\n   *       />\n   *     ))}\n   *   </AnimatePresence>\n   * )\n   * ```\n   *\n   * You can sequence exit animations throughout a tree using variants.\n   *\n   * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n   * once all `motion` components have finished animating out. Likewise, any components using\n   * `usePresence` all need to call `safeToRemove`.\n   *\n   * @public\n   */\n  const AnimatePresence = _ref => {\n    let {\n      children,\n      exitBeforeEnter,\n      custom,\n      initial = true,\n      onExitComplete,\n      presenceAffectsLayout = true,\n      mode = \"sync\"\n    } = _ref;\n    _s();\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n      isInitialRender.current = false;\n      pendingPresentChildren.current = presentChildren;\n      /**\n       * Update complete status of exiting children.\n       */\n      for (let i = 0; i < renderedChildren.length; i++) {\n        const key = getChildKey(renderedChildren[i]);\n        if (!presentKeys.includes(key)) {\n          if (exitComplete.get(key) !== true) {\n            exitComplete.set(key, false);\n          }\n        } else {\n          exitComplete.delete(key);\n        }\n      }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n      let nextChildren = [...presentChildren];\n      /**\n       * Loop through all the currently rendered components and decide which\n       * are exiting.\n       */\n      for (let i = 0; i < renderedChildren.length; i++) {\n        const child = renderedChildren[i];\n        const key = getChildKey(child);\n        if (!presentKeys.includes(key)) {\n          nextChildren.splice(i, 0, child);\n          exitingChildren.push(child);\n        }\n      }\n      /**\n       * If we're in \"wait\" mode, and we have exiting children, we want to\n       * only render these until they've all exited.\n       */\n      if (mode === \"wait\" && exitingChildren.length) {\n        nextChildren = exitingChildren;\n      }\n      setRenderedChildren(onlyElements(nextChildren));\n      setDiffedChildren(presentChildren);\n      /**\n       * Early return to ensure once we've set state with the latest diffed\n       * children, we can immediately re-render.\n       */\n      return;\n    }\n    if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && renderedChildren.length > 1) {\n      console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its mode is set to \\\"wait\\\". This will lead to odd visual behaviour.\");\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const {\n      forceRender\n    } = useContext(LayoutGroupContext);\n    return jsx(Fragment, {\n      children: renderedChildren.map(child => {\n        const key = getChildKey(child);\n        const isPresent = presentChildren === renderedChildren || presentKeys.includes(key);\n        const onExit = () => {\n          if (exitComplete.has(key)) {\n            exitComplete.set(key, true);\n          } else {\n            return;\n          }\n          let isEveryExitComplete = true;\n          exitComplete.forEach(isExitComplete => {\n            if (!isExitComplete) isEveryExitComplete = false;\n          });\n          if (isEveryExitComplete) {\n            forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n            setRenderedChildren(pendingPresentChildren.current);\n            onExitComplete && onExitComplete();\n          }\n        };\n        return jsx(PresenceChild, {\n          isPresent: isPresent,\n          initial: !isInitialRender.current || initial ? undefined : false,\n          custom: isPresent ? undefined : custom,\n          presenceAffectsLayout: presenceAffectsLayout,\n          mode: mode,\n          onExitComplete: isPresent ? undefined : onExit,\n          children: child\n        }, key);\n      })\n    });\n  };\n  _s(AnimatePresence, \"Us8IxzNIYDVN8ZSe0Qiq7W/f/UM=\", false, function () {\n    return [useConstant, useIsomorphicLayoutEffect];\n  });\n  _c = AnimatePresence;\n  var _c;\n  $RefreshReg$(_c, \"AnimatePresence\");\n}.call(this, module);","map":{"version":3,"names":["module1","export","AnimatePresence","jsx","Fragment","link","v","useMemo","useRef","useState","useContext","PresenceChild","LayoutGroupContext","invariant","useConstant","onlyElements","getChildKey","useIsomorphicLayoutEffect","___INIT_METEOR_FAST_REFRESH","module","_s","$RefreshSig$","_ref","children","exitBeforeEnter","custom","initial","onExitComplete","presenceAffectsLayout","mode","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","Map","diffedChildren","setDiffedChildren","renderedChildren","setRenderedChildren","current","i","length","key","includes","get","set","delete","join","exitingChildren","nextChildren","child","splice","push","process","env","NODE_ENV","console","warn","forceRender","isPresent","onExit","has","isEveryExitComplete","forEach","isExitComplete","undefined","_c","$RefreshReg$","call"],"sources":["node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { invariant } from 'motion-utils';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, exitBeforeEnter, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = presentChildren === renderedChildren ||\n                presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: isPresent ? undefined : custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"aac73a80f5bf167876d1a9da4179acb7ab4ecb7c"}
