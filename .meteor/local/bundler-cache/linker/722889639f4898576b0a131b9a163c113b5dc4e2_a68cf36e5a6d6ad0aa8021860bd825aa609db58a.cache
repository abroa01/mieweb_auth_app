[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"autoupdate\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_cordova.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/autoupdate/autoupdate_cordova.js                                                               //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n!function (module1) {\n  module1.export({\n    Autoupdate: function () {\n      return Autoupdate;\n    }\n  });\n  var ClientVersions;\n  module1.link(\"./client_versions.js\", {\n    ClientVersions: function (v) {\n      ClientVersions = v;\n    }\n  }, 0);\n  var autoupdateVersionsCordova = __meteor_runtime_config__.autoupdate.versions[\"web.cordova\"] || {\n    version: \"unknown\"\n  };\n  var Autoupdate = {};\n  // Stores acceptable client versions.\n  var clientVersions = new ClientVersions();\n\n  // Used by hot-module-replacement\n  Autoupdate._clientVersions = clientVersions;\n\n  // TODO[fibers]: make it's fine to call registerStoreClient here\n  Meteor.connection.registerStoreClient(\"meteor_autoupdate_clientVersions\", clientVersions.createStore());\n  Autoupdate.newClientAvailable = function () {\n    return clientVersions.newClientAvailable(\"web.cordova\", [\"version\"], autoupdateVersionsCordova);\n  };\n  var retry = new Retry({\n    // Unlike the stream reconnect use of Retry, which we want to be instant\n    // in normal operation, this is a wacky failure. We don't want to retry\n    // right away, we can start slowly.\n    //\n    // A better way than timeconstants here might be to use the knowledge\n    // of when we reconnect to help trigger these retries. Typically, the\n    // server fixing code will result in a restart and reconnect, but\n    // potentially the subscription could have a transient error.\n    minCount: 0,\n    // don't do any immediate retries\n    baseTimeout: 30 * 1000 // start with 30s\n  });\n  var failures = 0;\n  Autoupdate._retrySubscription = function () {\n    var _meteor_runtime_conf = __meteor_runtime_config__,\n      appId = _meteor_runtime_conf.appId;\n    Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n      onError: function (error) {\n        console.log(\"autoupdate subscription failed:\", error);\n        failures++;\n        retry.retryLater(failures, function () {\n          // Just retry making the subscription, don't reload the whole\n          // page. While reloading would catch more cases (for example,\n          // the server went back a version and is now doing old-style hot\n          // code push), it would also be more prone to reload loops,\n          // which look really bad to the user. Just retrying the\n          // subscription over DDP means it is at least possible to fix by\n          // updating the server.\n          Autoupdate._retrySubscription();\n        });\n      },\n      onReady: function () {\n        if (Package.reload) {\n          var checkNewVersionDocument = function (doc) {\n            if (doc.version !== autoupdateVersionsCordova.version) {\n              newVersionAvailable();\n            }\n          };\n          clientVersions.watch(checkNewVersionDocument, {\n            filter: \"web.cordova\"\n          });\n        }\n      }\n    });\n  };\n  Meteor.startup(function () {\n    WebAppLocalServer.onNewVersionReady(function () {\n      if (Package.reload) {\n        Package.reload.Reload._reload();\n      }\n    });\n    Autoupdate._retrySubscription();\n  });\n  function newVersionAvailable() {\n    WebAppLocalServer.checkForUpdates();\n  }\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client_versions.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/autoupdate/client_versions.js                                                                  //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ClientVersions: function () {\n    return ClientVersions;\n  }\n});\nvar Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 0);\nvar ClientVersions = /*#__PURE__*/function () {\n  function ClientVersions() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  var _proto = ClientVersions.prototype;\n  _proto.createStore = function () {\n    function createStore() {\n      var _this = this;\n      return {\n        update: function (_ref) {\n          var id = _ref.id,\n            msg = _ref.msg,\n            fields = _ref.fields;\n          if (msg === \"added\" || msg === \"changed\") {\n            _this.set(id, fields);\n          }\n        }\n      };\n    }\n    return createStore;\n  }();\n  _proto.hasVersions = function () {\n    function hasVersions() {\n      return this._versions.size > 0;\n    }\n    return hasVersions;\n  }();\n  _proto.get = function () {\n    function get(id) {\n      return this._versions.get(id);\n    }\n    return get;\n  }() // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  ;\n  _proto.set = function () {\n    function set(id, fields) {\n      var version = this._versions.get(id);\n      var isNew = false;\n      if (version) {\n        Object.assign(version, fields);\n      } else {\n        version = _objectSpread({\n          _id: id\n        }, fields);\n        isNew = true;\n        this._versions.set(id, version);\n      }\n      this._watchCallbacks.forEach(function (_ref2) {\n        var fn = _ref2.fn,\n          filter = _ref2.filter;\n        if (!filter || filter === version._id) {\n          fn(version, isNew);\n        }\n      });\n    }\n    return set;\n  }() // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  ;\n  _proto.watch = function () {\n    function watch(fn) {\n      var _this2 = this;\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        skipInitial = _ref3.skipInitial,\n        filter = _ref3.filter;\n      if (!skipInitial) {\n        var resolved = Promise.resolve();\n        this._versions.forEach(function (version) {\n          if (!filter || filter === version._id) {\n            resolved.then(function () {\n              return fn(version, true);\n            });\n          }\n        });\n      }\n      var callback = {\n        fn: fn,\n        filter: filter\n      };\n      this._watchCallbacks.add(callback);\n      return function () {\n        return _this2._watchCallbacks.delete(callback);\n      };\n    }\n    return watch;\n  }() // A reactive data source for `Autoupdate.newClientAvailable`.\n  ;\n  _proto.newClientAvailable = function () {\n    function newClientAvailable(id, fields, currentVersion) {\n      function isNewVersion(version) {\n        return version._id === id && fields.some(function (field) {\n          return version[field] !== currentVersion[field];\n        });\n      }\n      var dependency = new Tracker.Dependency();\n      var version = this.get(id);\n      dependency.depend();\n      var stop = this.watch(function (version) {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      }, {\n        skipInitial: true\n      });\n      return !!version && isNewVersion(version);\n    }\n    return newClientAvailable;\n  }();\n  return ClientVersions;\n}();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      Autoupdate: Autoupdate\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/autoupdate/autoupdate_cordova.js\"\n  ],\n  mainModulePath: \"/node_modules/meteor/autoupdate/autoupdate_cordova.js\"\n}});\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_cordova.js","packages/autoupdate/client_versions.js"],"names":["module1","export","Autoupdate","ClientVersions","link","v","autoupdateVersionsCordova","__meteor_runtime_config__","autoupdate","versions","version","clientVersions","_clientVersions","Meteor","connection","registerStoreClient","createStore","newClientAvailable","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","_meteor_runtime_conf","appId","subscribe","onError","error","console","log","retryLater","onReady","Package","reload","checkNewVersionDocument","doc","newVersionAvailable","watch","filter","startup","WebAppLocalServer","onNewVersionReady","Reload","_reload","checkForUpdates","call","module","_objectSpread","default","Tracker","_versions","Map","_watchCallbacks","Set","_proto","prototype","_this","update","_ref","id","msg","fields","set","hasVersions","size","get","isNew","Object","assign","_id","forEach","_ref2","fn","_this2","_ref3","arguments","length","undefined","skipInitial","resolved","Promise","resolve","then","callback","add","delete","currentVersion","isNewVersion","some","field","dependency","Dependency","depend","stop","changed"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["import { ClientVersions } from \"./client_versions.js\";\n\nvar autoupdateVersionsCordova =\n  __meteor_runtime_config__.autoupdate.versions[\"web.cordova\"] || {\n    version: \"unknown\"\n  };\n\nexport const Autoupdate = {};\n\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions();\n\n// Used by hot-module-replacement\nAutoupdate._clientVersions = clientVersions;\n\n\n// TODO[fibers]: make it's fine to call registerStoreClient here\nMeteor.connection.registerStoreClient(\n  \"meteor_autoupdate_clientVersions\",\n  clientVersions.createStore()\n);\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(\n    \"web.cordova\",\n    [\"version\"],\n    autoupdateVersionsCordova\n  );\n};\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  const { appId } = __meteor_runtime_config__;\n\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n    onError(error) {\n      console.log(\"autoupdate subscription failed:\", error);\n      failures++;\n      retry.retryLater(failures, function() {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      if (Package.reload) {\n        function checkNewVersionDocument(doc) {\n          if (doc.version !== autoupdateVersionsCordova.version) {\n            newVersionAvailable();\n          }\n        }\n\n        clientVersions.watch(checkNewVersionDocument, {\n          filter: \"web.cordova\"\n        });\n      }\n    }\n  });\n};\n\nMeteor.startup(() => {\n  WebAppLocalServer.onNewVersionReady(() => {\n    if (Package.reload) {\n      Package.reload.Reload._reload();\n    }\n  });\n\n  Autoupdate._retrySubscription();\n});\n\nfunction newVersionAvailable() {\n  WebAppLocalServer.checkForUpdates();\n}\n","import { Tracker } from \"meteor/tracker\";\n\nexport class ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: ({ id, msg, fields }) => {\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = {\n        _id: id,\n        ...fields\n      };\n\n      isNew = true;\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach(({ fn, filter }) => {\n      if (! filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn, { skipInitial, filter } = {}) {\n    if (! skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach((version) => {\n        if (! filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = { fn, filter };\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return (\n        version._id === id &&\n        fields.some((field) => version[field] !== currentVersion[field])\n      );\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n\n    dependency.depend();\n\n    const stop = this.watch(\n      (version) => {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      },\n      { skipInitial: true }\n    );\n\n    return !! version && isNewVersion(version);\n  }\n}\n"]}}]