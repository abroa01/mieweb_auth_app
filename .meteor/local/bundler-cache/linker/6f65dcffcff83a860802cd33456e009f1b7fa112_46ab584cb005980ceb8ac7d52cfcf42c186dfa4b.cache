[{"type":"js","data":"Package[\"core-runtime\"].queue(\"http\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EmitterPromise = Package.meteor.EmitterPromise;\nvar URL = Package.url.URL;\nvar URLSearchParams = Package.url.URLSearchParams;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar fetch = Package.fetch.fetch;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar HTTP, HTTPInternals;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"http\":{\"httpcall_server.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/http/httpcall_server.js                                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      HTTP: () => HTTP,\n      HTTPInternals: () => HTTPInternals\n    });\n    let Util;\n    module.link(\"util\", {\n      default(v) {\n        Util = v;\n      }\n    }, 0);\n    let fetch, Request;\n    module.link(\"meteor/fetch\", {\n      fetch(v) {\n        fetch = v;\n      },\n      Request(v) {\n        Request = v;\n      }\n    }, 1);\n    let URL, URLSearchParams;\n    module.link(\"meteor/url\", {\n      URL(v) {\n        URL = v;\n      },\n      URLSearchParams(v) {\n        URLSearchParams = v;\n      }\n    }, 2);\n    let HTTP, makeErrorByStatus, populateData;\n    module.link(\"./httpcall_common.js\", {\n      HTTP(v) {\n        HTTP = v;\n      },\n      makeErrorByStatus(v) {\n        makeErrorByStatus = v;\n      },\n      populateData(v) {\n        populateData = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const hasOwn = Object.prototype.hasOwnProperty;\n\n    /**\n     * @deprecated\n     */\n    const HTTPInternals = {};\n    // _call always runs asynchronously; HTTP.call, defined below,\n    // wraps _call and runs synchronously when no callback is provided.\n    function _call(method, url, options, callback) {\n      ////////// Process arguments //////////\n\n      if (!callback && typeof options === 'function') {\n        // support (method, url, callback) argument list\n        callback = options;\n        options = null;\n      }\n      options = options || {};\n      if (hasOwn.call(options, 'beforeSend')) {\n        throw new Error('Option beforeSend not supported on server.');\n      }\n      method = (method || '').toUpperCase();\n      if (!/^https?:\\/\\//.test(url)) {\n        throw new Error('url must be absolute and start with http:// or https://');\n      }\n      const headers = {};\n      let content = options.content;\n      if (options.data) {\n        content = JSON.stringify(options.data);\n        headers['Content-Type'] = 'application/json';\n      }\n      let paramsForUrl;\n      let paramsForBody;\n      if (content || method === 'GET' || method === 'HEAD') {\n        paramsForUrl = options.params;\n      } else {\n        paramsForBody = options.params;\n      }\n      const newUrl = URL._constructUrl(url, options.query, paramsForUrl);\n      if (options.auth) {\n        if (options.auth.indexOf(':') < 0) {\n          throw new Error('auth option should be of the form \"username:password\"');\n        }\n        const base64 = Buffer.from(options.auth, 'ascii').toString('base64');\n        headers['Authorization'] = \"Basic \".concat(base64);\n      }\n      if (paramsForBody) {\n        const data = new URLSearchParams();\n        Object.entries(paramsForBody).forEach(_ref => {\n          let [key, value] = _ref;\n          data.append(key, value);\n        });\n        content = data;\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      }\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          headers[key] = options.headers[key];\n        });\n      }\n      let caching;\n      if (options.caching) {\n        // TODO implement fetch-specific options\n      }\n      let corsMode;\n      if (options.mode) {\n        // TODO implement fetch-specific options\n      }\n      let credentials;\n\n      // wrap callback to add a 'response' property on an error, in case\n      // we have both (http 4xx/5xx error, which has a response payload)\n      callback = function (cb) {\n        let called = false;\n        return function (error, response) {\n          if (!called) {\n            called = true;\n            if (error && response) {\n              error.response = response;\n            }\n            cb(error, response);\n          }\n        };\n      }(callback);\n\n      // is false if false, otherwise always true\n      const followRedirects = options.followRedirects === false ? 'manual' : 'follow';\n\n      ////////// Kickoff! //////////\n\n      const requestOptions = {\n        method: method,\n        caching: caching,\n        mode: corsMode,\n        jar: false,\n        timeout: options.timeout,\n        body: content,\n        redirect: followRedirects,\n        referrer: options.referrer,\n        integrity: options.integrity,\n        headers: headers\n      };\n      const request = new Request(newUrl, requestOptions);\n      fetch(request).then(async res => {\n        const content = await res.text();\n        const response = {};\n        response.statusCode = res.status;\n        response.content = '' + content;\n\n        // fetch headers don't allow simple read using bracket notation\n        // so we iterate their entries and assign them to a new Object\n        response.headers = {};\n        for (const entry of res.headers.entries()) {\n          const [key, val] = entry;\n          response.headers[key] = val;\n        }\n        response.ok = res.ok;\n        response.redirected = res.redirected;\n        populateData(response);\n        if (response.statusCode >= 400) {\n          const error = makeErrorByStatus(response.statusCode, response.content);\n          callback(error, response);\n        } else {\n          callback(undefined, response);\n        }\n      }).catch(err => callback(err));\n    }\n    HTTP.call = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const cb = args.pop();\n      if (typeof cb === 'function') {\n        return _call(...args, cb);\n      }\n      return Util.promisify(_call)(...args, cb);\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"httpcall_common.js\":function module(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/http/httpcall_common.js                                                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar MAX_LENGTH = 500; // if you change this, also change the appropriate test\nvar slice = Array.prototype.slice;\nexports.makeErrorByStatus = function (statusCode, content) {\n  var message = \"failed [\" + statusCode + \"]\";\n  if (content) {\n    var stringContent = typeof content == \"string\" ? content : content.toString();\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);\n  }\n  return new Error(message);\n};\nfunction truncate(str, length) {\n  return str.length > length ? str.slice(0, length) + '...' : str;\n}\n\n// Fill in `response.data` if the content-type is JSON.\nexports.populateData = function (response) {\n  // Read Content-Type header, up to a ';' if there is one.\n  // A typical header might be \"application/json; charset=utf-8\"\n  // or just \"application/json\".\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];\n\n  // Only try to parse data as JSON if server sets correct content type.\n  if (['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'].indexOf(contentType) >= 0) {\n    try {\n      response.data = JSON.parse(response.content);\n    } catch (err) {\n      response.data = null;\n    }\n  } else {\n    response.data = null;\n  }\n};\nvar HTTP = exports.HTTP = {};\n\n/**\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.get = function /* varargs */\n() {\n  return HTTP.call.apply(this, [\"GET\"].concat(slice.call(arguments)));\n};\n\n/**\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.post = function /* varargs */\n() {\n  return HTTP.call.apply(this, [\"POST\"].concat(slice.call(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.put = function /* varargs */\n() {\n  return HTTP.call.apply(this, [\"PUT\"].concat(slice.call(arguments)));\n};\n\n/**\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.del = function /* varargs */\n() {\n  return HTTP.call.apply(this, [\"DELETE\"].concat(slice.call(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.patch = function /* varargs */\n() {\n  return HTTP.call.apply(this, [\"PATCH\"].concat(slice.call(arguments)));\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      HTTP: HTTP,\n      HTTPInternals: HTTPInternals\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/http/httpcall_server.js\"\n  ],\n  mainModulePath: \"/node_modules/meteor/http/httpcall_server.js\"\n}});\n","servePath":"/packages/http.js","sourceMap":{"version":3,"sources":["packages/http/httpcall_server.js","packages/http/httpcall_common.js"],"names":["module","export","HTTP","HTTPInternals","Util","link","default","v","fetch","Request","URL","URLSearchParams","makeErrorByStatus","populateData","__reifyWaitForDeps__","hasOwn","Object","prototype","hasOwnProperty","_call","method","url","options","callback","call","Error","toUpperCase","test","headers","content","data","JSON","stringify","paramsForUrl","paramsForBody","params","newUrl","_constructUrl","query","auth","indexOf","base64","Buffer","from","toString","concat","entries","forEach","_ref","key","value","append","keys","caching","corsMode","mode","credentials","cb","called","error","response","followRedirects","requestOptions","jar","timeout","body","redirect","referrer","integrity","request","then","res","text","statusCode","status","entry","val","ok","redirected","undefined","catch","err","_len","arguments","length","args","Array","_key","pop","promisify","__reify_async_result__","_reifyError","self","async","MAX_LENGTH","slice","exports","message","stringContent","truncate","replace","str","contentType","split","parse","get","apply","post","put","del","patch"],"mappings":"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","file":"/packages/http.js","sourcesContent":["import Util from 'util';\nimport { fetch, Request } from 'meteor/fetch';\nimport { URL, URLSearchParams } from 'meteor/url';\nimport { HTTP, makeErrorByStatus, populateData } from './httpcall_common.js';\n\nexport { HTTP };\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * @deprecated\n */\nexport const HTTPInternals = {};\n\n// _call always runs asynchronously; HTTP.call, defined below,\n// wraps _call and runs synchronously when no callback is provided.\nfunction _call (method, url, options, callback) {\n  ////////// Process arguments //////////\n\n  if (!callback && typeof options === 'function') {\n    // support (method, url, callback) argument list\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n\n  if (hasOwn.call(options, 'beforeSend')) {\n    throw new Error('Option beforeSend not supported on server.');\n  }\n\n  method = (method || '').toUpperCase();\n\n  if (!/^https?:\\/\\//.test(url)) {\n    throw new Error('url must be absolute and start with http:// or https://');\n  }\n\n  const headers = {};\n  let content = options.content;\n\n  if (options.data) {\n    content = JSON.stringify(options.data);\n    headers['Content-Type'] = 'application/json';\n  }\n\n  let paramsForUrl;\n  let paramsForBody;\n\n  if (content || method === 'GET' || method === 'HEAD') {\n    paramsForUrl = options.params;\n  }\n  else {\n    paramsForBody = options.params;\n  }\n\n  const newUrl = URL._constructUrl(url, options.query, paramsForUrl);\n\n  if (options.auth) {\n    if (options.auth.indexOf(':') < 0) {\n      throw new Error('auth option should be of the form \"username:password\"');\n    }\n\n    const base64 = Buffer.from(options.auth, 'ascii').toString('base64');\n    headers['Authorization'] = `Basic ${base64}`;\n  }\n\n  if (paramsForBody) {\n    const data = new URLSearchParams();\n    Object.entries(paramsForBody).forEach(([key, value]) => {\n      data.append(key, value);\n    });\n    content = data;\n    headers['Content-Type'] = 'application/x-www-form-urlencoded';\n  }\n\n  if (options.headers) {\n    Object.keys(options.headers).forEach(function (key) {\n      headers[key] = options.headers[key];\n    });\n  }\n\n  let caching;\n  if (options.caching) {\n    // TODO implement fetch-specific options\n  }\n\n  let corsMode;\n  if (options.mode) {\n    // TODO implement fetch-specific options\n  }\n\n  let credentials;\n\n  // wrap callback to add a 'response' property on an error, in case\n  // we have both (http 4xx/5xx error, which has a response payload)\n  callback = (function (cb) {\n    let called = false;\n    return function (error, response) {\n      if (!called) {\n        called = true;\n        if (error && response) {\n          error.response = response;\n        }\n        cb(error, response);\n      }\n    }\n  })(callback);\n\n  // is false if false, otherwise always true\n  const followRedirects = options.followRedirects === false\n    ? 'manual'\n    : 'follow';\n\n  ////////// Kickoff! //////////\n\n  const requestOptions = {\n    method: method,\n    caching: caching,\n    mode: corsMode,\n\n    jar: false,\n    timeout: options.timeout,\n    body: content,\n    redirect: followRedirects,\n    referrer: options.referrer,\n    integrity: options.integrity,\n    headers: headers\n  };\n\n  const request = new Request(newUrl, requestOptions);\n\n  fetch(request)\n    .then(async res => {\n      const content = await res.text();\n      const response = {};\n      response.statusCode = res.status;\n      response.content = '' + content;\n\n      // fetch headers don't allow simple read using bracket notation\n      // so we iterate their entries and assign them to a new Object\n      response.headers = {};\n      for (const entry of res.headers.entries()) {\n        const [key, val] = entry;\n        response.headers[key] = val;\n      }\n\n      response.ok = res.ok;\n      response.redirected = res.redirected;\n\n      populateData(response);\n\n      if (response.statusCode >= 400) {\n        const error = makeErrorByStatus(\n          response.statusCode,\n          response.content\n        );\n        callback(error, response);\n      } else {\n        callback(undefined, response);\n      }\n    })\n    .catch(err => callback(err));\n}\n\nHTTP.call = function(...args) {\n  const cb = args.pop();\n  if (typeof cb === 'function') {\n    return _call(...args, cb);\n  }\n  return Util.promisify(_call)(...args, cb);\n}\n","var MAX_LENGTH = 500; // if you change this, also change the appropriate test\nvar slice = Array.prototype.slice;\n\nexports.makeErrorByStatus = function(statusCode, content) {\n  var message = \"failed [\" + statusCode + \"]\";\n\n  if (content) {\n    var stringContent = typeof content == \"string\" ?\n      content : content.toString();\n\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);\n  }\n\n  return new Error(message);\n};\n\nfunction truncate(str, length) {\n  return str.length > length ? str.slice(0, length) + '...' : str;\n}\n\n// Fill in `response.data` if the content-type is JSON.\nexports.populateData = function(response) {\n  // Read Content-Type header, up to a ';' if there is one.\n  // A typical header might be \"application/json; charset=utf-8\"\n  // or just \"application/json\".\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];\n\n  // Only try to parse data as JSON if server sets correct content type.\n  if (['application/json',\n       'text/javascript',\n       'application/javascript',\n       'application/x-javascript',\n      ].indexOf(contentType) >= 0) {\n    try {\n      response.data = JSON.parse(response.content);\n    } catch (err) {\n      response.data = null;\n    }\n  } else {\n    response.data = null;\n  }\n};\n\nvar HTTP = exports.HTTP = {};\n\n/**\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.get = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"GET\"].concat(slice.call(arguments)));\n};\n\n/**\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.post = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"POST\"].concat(slice.call(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.put = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PUT\"].concat(slice.call(arguments)));\n};\n\n/**\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.del = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"DELETE\"].concat(slice.call(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n * @deprecated\n */\nHTTP.patch = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PATCH\"].concat(slice.call(arguments)));\n};\n"]}}]