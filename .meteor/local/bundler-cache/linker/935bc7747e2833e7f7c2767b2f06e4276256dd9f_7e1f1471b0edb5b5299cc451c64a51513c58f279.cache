[{"type":"js","data":"Package[\"core-runtime\"].queue(\"null\",function () {/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nECMAScript = Package.ecmascript.ECMAScript;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nAccounts = Package['accounts-base'].Accounts;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nSHA256 = Package.sha.SHA256;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nEmitterPromise = Package.meteor.EmitterPromise;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\nvar require = meteorInstall({\"imports\":{\"api\":{\"deviceLogs.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/api/deviceLogs.js                                                                                    //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      DeviceLogs: () => DeviceLogs\n    });\n    let Mongo;\n    module.link(\"meteor/mongo\", {\n      Mongo(v) {\n        Mongo = v;\n      }\n    }, 0);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let SHA256;\n    module.link(\"meteor/sha\", {\n      SHA256(v) {\n        SHA256 = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const DeviceLogs = new Mongo.Collection('deviceLogs');\n    // Add generateAppId utility function\n    const generateAppId = (deviceUUID, email, creationTime) => {\n      const combinedString = \"\".concat(deviceUUID, \":\").concat(email, \":\").concat(creationTime);\n      return SHA256(combinedString).substring(0, 32);\n    };\n\n    // Create indexes for better query performance\n    if (Meteor.isServer) {\n      Meteor.startup(() => {\n        DeviceLogs.createIndex({\n          userId: 1\n        });\n        DeviceLogs.createIndex({\n          deviceUUID: 1\n        });\n        DeviceLogs.createIndex({\n          email: 1\n        });\n        DeviceLogs.createIndex({\n          appId: 1\n        });\n      });\n    }\n\n    // Define methods for DeviceLogs\n    Meteor.methods({\n      'deviceLogs.upsert': async function (data) {\n        check(data, {\n          userId: String,\n          email: String,\n          deviceUUID: String,\n          fcmToken: String,\n          deviceInfo: Object\n        });\n        const creationTime = new Date().toISOString();\n        const appId = generateAppId(data.deviceUUID, data.email, creationTime);\n        console.log('Generated appId during upsert:', appId); // Add this log\n\n        return DeviceLogs.upsertAsync({\n          userId: data.userId,\n          deviceUUID: data.deviceUUID\n        }, {\n          $set: {\n            email: data.email,\n            fcmToken: data.fcmToken,\n            appId: appId,\n            lastUpdated: new Date()\n          },\n          $setOnInsert: {\n            createdAt: new Date()\n          }\n        });\n      },\n      'deviceLogs.updateToken'(userId, deviceUUID, fcmToken) {\n        check(userId, String);\n        check(deviceUUID, String);\n        check(fcmToken, String);\n        return DeviceLogs.updateAsync({\n          userId: userId,\n          deviceUUID: deviceUUID\n        }, {\n          $set: {\n            fcmToken: fcmToken,\n            lastUpdated: new Date()\n          }\n        });\n      },\n      'deviceLogs.getFCMTokenByAppId': async function (appId) {\n        check(appId, String);\n        const deviceLog = await DeviceLogs.findOneAsync({\n          appId: appId\n        });\n        if (!deviceLog) {\n          throw new Meteor.Error('invalid-app-id', 'No device found with this App ID');\n        }\n        return deviceLog.fcmToken;\n      },\n      'deviceLogs.getFCMTokenByDeviceId': async function (deviceUUID) {\n        check(deviceUUID, String);\n        const deviceLog = await DeviceLogs.findOneAsync({\n          deviceUUID: deviceUUID\n        });\n        if (!deviceLog) {\n          throw new Meteor.Error('invalid-app-id', 'No device found with this Device ID');\n        }\n        return deviceLog.fcmToken;\n      },\n      // Also fix the debug method\n      'deviceLogs.getByAppId': async function (appId) {\n        check(appId, String);\n        const result = await DeviceLogs.findOneAsync({\n          appId\n        });\n        console.log('Looking for appId:', appId);\n        console.log('Found device log:', result);\n        return result;\n      }\n    });\n\n    // Publish device logs\n    if (Meteor.isServer) {\n      Meteor.publish('deviceLogs.byUser', function (userId) {\n        check(userId, String);\n        return DeviceLogs.find({\n          userId: userId\n        });\n      });\n      Meteor.publish('deviceLogs.byDevice', function (deviceUUID) {\n        check(deviceUUID, String);\n        return DeviceLogs.find({\n          deviceUUID: deviceUUID\n        });\n      });\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notificationHistory.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/api/notificationHistory.js                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      NotificationHistory: () => NotificationHistory\n    });\n    let Mongo;\n    module.link(\"meteor/mongo\", {\n      Mongo(v) {\n        Mongo = v;\n      }\n    }, 0);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let Random;\n    module.link(\"meteor/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const NotificationHistory = new Mongo.Collection('notificationHistory');\n    // Create indexes for better query performance\n    if (Meteor.isServer) {\n      Meteor.startup(() => {\n        NotificationHistory.createIndex({\n          userId: 1\n        });\n        NotificationHistory.createIndex({\n          appId: 1\n        });\n        NotificationHistory.createIndex({\n          notificationId: 1\n        });\n        NotificationHistory.createIndex({\n          status: 1\n        });\n      });\n    }\n    Meteor.methods({\n      // Insert a new notification into the history\n      'notificationHistory.insert': function (data) {\n        check(data, {\n          userId: String,\n          appId: String,\n          title: String,\n          body: String\n        });\n\n        // Dynamically generate a unique notificationId\n        const notificationId = Random.id();\n        return NotificationHistory.insertAsync({\n          userId: data.userId,\n          appId: data.appId,\n          notificationId: notificationId,\n          title: data.title,\n          body: data.body,\n          status: 'pending',\n          createdAt: new Date()\n        });\n      },\n      // Update the status of a notification\n      'notificationHistory.updateStatus': function (notificationId, status) {\n        check(notificationId, String);\n        check(status, String);\n        if (!['pending', 'approved', 'rejected'].includes(status)) {\n          throw new Meteor.Error('invalid-status', 'Status must be pending, accepted, or rejected');\n        }\n        return NotificationHistory.updateAsync({\n          notificationId\n        }, {\n          $set: {\n            status: status,\n            updatedAt: new Date() // Timestamp for status update\n          }\n        });\n      },\n      // Fetch the last notification ID for a specific user\n      'notificationHistory.getLastIdByUser': function (userId) {\n        check(userId, String);\n        return NotificationHistory.findOneAsync({\n          userId\n        }, {\n          sort: {\n            createdAt: -1\n          },\n          fields: {\n            notificationId: 1\n          }\n        }).then(lastNotification => {\n          return lastNotification ? lastNotification.notificationId : null;\n        }).catch(error => {\n          console.error(\"Error fetching last notification:\", error);\n          throw new Meteor.Error(\"database-error\", \"Failed to fetch last notification\");\n        });\n      },\n      // Fetch all notifications for a user\n      'notificationHistory.getByUser': function (userId) {\n        check(userId, String);\n        return NotificationHistory.find({\n          userId\n        }).fetch();\n      },\n      // Fetch notifications by their status\n      'notificationHistory.getByStatus': function (status) {\n        check(status, String);\n        if (!['pending', 'accepted', 'rejected'].includes(status)) {\n          throw new Meteor.Error('invalid-status', 'Status must be pending, accepted, or rejected');\n        }\n        return NotificationHistory.find({\n          status\n        }).fetch();\n      }\n    });\n    if (Meteor.isServer) {\n      Meteor.publish('notificationHistory.byUser', function (userId) {\n        check(userId, String);\n        return NotificationHistory.find({\n          userId\n        });\n      });\n      Meteor.publish('notificationHistory.byStatus', function (status) {\n        check(status, String);\n        return NotificationHistory.find({\n          status\n        });\n      });\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"firebase.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// server/firebase.js                                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      sendNotification: () => sendNotification\n    });\n    let admin;\n    module.link(\"firebase-admin\", {\n      default(v) {\n        admin = v;\n      }\n    }, 0);\n    let serviceAccount;\n    module.link(\"../server/private/miewebauthapp-b76936fb6ccc.json\", {\n      default(v) {\n        serviceAccount = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    admin.initializeApp({\n      credential: admin.credential.cert(serviceAccount)\n    });\n    /**\n     * Sends a push notification to a specific device.\n     * @param {string} registrationToken - The target device token.\n     * @param {string} title - The notification title.\n     * @param {string} body - The notification body.\n     * @param {Array} actions - The actions to include in the notification.\n     */\n    const sendNotification = async (registrationToken, title, body, actions) => {\n      const message = {\n        token: registrationToken,\n        data: {\n          title,\n          body,\n          appId: registrationToken,\n          actions: JSON.stringify(actions),\n          messageFrom: 'mie',\n          notificationType: 'approval',\n          content_available: '1',\n          notId: '10'\n          // surveyID: \"ewtawgreg-gragrag-rgarhthgbad\"\n        },\n        android: {\n          priority: 'high'\n        },\n        apns: {\n          payload: {\n            aps: {\n              alert: {\n                title,\n                body\n              },\n              badge: 1,\n              sound: \"default\",\n              category: \"APPROVAL\",\n              content_available: 1,\n              mutable_content: true\n            }\n          }\n        }\n      };\n      try {\n        const response = await admin.messaging().send(message);\n        console.log('Push notification sent successfully:', response);\n        return response;\n      } catch (error) {\n        console.error('Error sending push notification:', error);\n        throw error;\n      }\n    };\n    module.exportDefault(admin);\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// server/main.js                                                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 0);\n    let WebApp;\n    module.link(\"meteor/webapp\", {\n      WebApp(v) {\n        WebApp = v;\n      }\n    }, 1);\n    let sendNotification;\n    module.link(\"./firebase\", {\n      sendNotification(v) {\n        sendNotification = v;\n      }\n    }, 2);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 3);\n    module.link(\"../imports/api/deviceLogs.js\");\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 4);\n    let DeviceLogs;\n    module.link(\"../imports/api/deviceLogs.js\", {\n      DeviceLogs(v) {\n        DeviceLogs = v;\n      }\n    }, 5);\n    let NotificationHistory;\n    module.link(\"../imports/api/notificationHistory\", {\n      NotificationHistory(v) {\n        NotificationHistory = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    // Create a Map to store pending notifications\n    const pendingNotifications = new Map();\n    const responsePromises = new Map();\n    const saveUserNotificationHistory = async notification => {\n      const {\n        appId,\n        title,\n        body\n      } = notification;\n      const deviceLog = await DeviceLogs.findOneAsync({\n        appId\n      });\n      if (!deviceLog) {\n        console.error(\"No user found for appId:\", appId);\n        return;\n      }\n      const userId = deviceLog.userId;\n      const data = {\n        userId,\n        appId,\n        title,\n        body\n      };\n      Meteor.call(\"notificationHistory.insert\", data, (error, result) => {\n        if (error) {\n          console.error(\"Error inserting notification:\", error);\n        } else {\n          console.log(\"Notification inserted successfully:\", result);\n        }\n      });\n    };\n    WebApp.connectHandlers.use(\"/send-notification\", async (req, res) => {\n      let body = \"\";\n      req.on(\"data\", chunk => {\n        body += chunk;\n      });\n      req.on(\"end\", async () => {\n        try {\n          const requestBody = JSON.parse(body);\n          console.log(\"Received request body:\", requestBody);\n          const {\n            appId,\n            title,\n            body: messageBody,\n            actions\n          } = requestBody;\n          if (!appId || !title || !messageBody || !actions) {\n            throw new Error(\"Missing required fields\");\n          }\n\n          // Get FCM token\n          const fcmToken = await new Promise((resolve, reject) => {\n            Meteor.call(\"deviceLogs.getFCMTokenByAppId\", appId, (error, result) => {\n              if (error) reject(error);else resolve(result);\n            });\n          });\n\n          // Send notification\n          await sendNotification(fcmToken, title, messageBody, actions);\n          console.log(\"Notification sent successfully\");\n          saveUserNotificationHistory({\n            appId,\n            title,\n            body: messageBody\n          });\n\n          // Create promise for user response\n          const userResponsePromise = new Promise(resolve => {\n            // Store the FCM token as the appId since that's what we'll get back\n            console.log(\"FCM tokennnnnnnnnnnnn\", fcmToken);\n            responsePromises.set(fcmToken, resolve);\n\n            // Add timeout\n            setTimeout(() => {\n              if (responsePromises.has(fcmToken)) {\n                resolve(\"timeout\");\n                responsePromises.delete(fcmToken);\n              }\n            }, 300000); // 5 minute timeout\n          });\n\n          // Wait for user response\n          const userResponse = await userResponsePromise;\n          console.log(\"USER RESPONSE\", userResponse);\n\n          // Send final response\n          res.writeHead(200, {\n            \"Content-Type\": \"application/json\"\n          });\n          res.end(JSON.stringify({\n            success: true,\n            action: userResponse\n          }));\n        } catch (error) {\n          console.error(\"Error in /send-notification:\", error);\n          res.writeHead(400, {\n            \"Content-Type\": \"application/json\"\n          });\n          res.end(JSON.stringify({\n            success: false,\n            error: error.message\n          }));\n        }\n      });\n    });\n\n    // Meteor methods\n    Meteor.methods({\n      async \"notifications.handleResponse\"(appId, action) {\n        check(appId, String);\n        check(action, String);\n        console.log(\"Handling notification response for appId: \".concat(appId, \", action: \").concat(action));\n        console.log(\"Response promises\", responsePromises);\n\n        // If we have a pending promise for this notification, resolve it\n        if (responsePromises.has(appId)) {\n          const resolve = responsePromises.get(appId);\n          resolve(action);\n          responsePromises.delete(appId);\n          return {\n            success: true,\n            message: \"Response \".concat(action, \" processed successfully\")\n          };\n        } else {\n          console.log(\"No pending promise found for appId:\", appId);\n          return {\n            success: false,\n            message: \"No pending notification found\"\n          };\n        }\n      },\n      async userAction(action, requestId) {\n        let replyText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        check(action, String);\n        check(requestId, String);\n        if (replyText) check(replyText, String);\n        const validActions = [\"approve\", \"reject\", \"reply\"];\n        if (!validActions.includes(action)) {\n          throw new Meteor.Error(\"invalid-action\", \"Invalid action performed by the user.\");\n        }\n        const pendingNotification = pendingNotifications.get(requestId);\n        if (pendingNotification) {\n          clearTimeout(pendingNotification.timeout);\n          pendingNotification.resolve({\n            action,\n            replyText\n          });\n          pendingNotifications.delete(requestId);\n          return {\n            success: true,\n            action,\n            replyText\n          };\n        } else {\n          throw new Meteor.Error(\"invalid-request\", \"No pending notification found for this request.\");\n        }\n      },\n      async \"users.register\"(userDetails) {\n        check(userDetails, {\n          email: String,\n          pin: String,\n          firstName: String,\n          lastName: String,\n          sessionDeviceInfo: {\n            model: String,\n            platform: String,\n            uuid: String,\n            version: String,\n            manufacturer: String\n          },\n          fcmDeviceToken: String\n        });\n        const {\n          email,\n          pin,\n          firstName,\n          lastName,\n          sessionDeviceInfo\n        } = userDetails;\n        const fcmToken = userDetails.fcmDeviceToken;\n\n        // Check if user exists\n        if (await Meteor.users.findOneAsync({\n          \"emails.address\": email\n        })) {\n          throw new Meteor.Error(\"user-exists\", \"User already exists with this email\");\n        }\n        try {\n          // Create user in Meteor users collection\n          const userId = await Accounts.createUser({\n            email,\n            password: pin,\n            profile: {\n              firstName,\n              lastName,\n              deviceInfo: sessionDeviceInfo,\n              deviceToken: fcmToken\n            }\n          });\n          if (userId) {\n            console.log(\"user id in server is: \".concat(userId));\n\n            // Ensure userId is passed as a string\n            await Meteor.call(\"deviceLogs.upsert\", {\n              userId: userId.toString(),\n              email,\n              deviceUUID: sessionDeviceInfo.uuid,\n              fcmToken,\n              deviceInfo: sessionDeviceInfo\n            });\n          }\n          return {\n            success: true,\n            userId,\n            message: \"Registration successful\"\n          };\n        } catch (error) {\n          console.error(\"Error during registration:\", error);\n          throw new Meteor.Error(\"registration-failed\", error.message);\n        }\n      },\n      async getUserDetails(email) {\n        var _user$profile, _user$profile2;\n        if (!email) {\n          throw new Meteor.Error(\"Email is required\");\n        }\n        const user = await Meteor.users.findOneAsync({\n          \"emails.address\": email\n        });\n        if (!user) {\n          throw new Meteor.Error(\"User not found\");\n        }\n        return {\n          firstName: ((_user$profile = user.profile) === null || _user$profile === void 0 ? void 0 : _user$profile.firstName) || \"\",\n          lastName: ((_user$profile2 = user.profile) === null || _user$profile2 === void 0 ? void 0 : _user$profile2.lastName) || \"\",\n          email: user.emails[0].address || \"\"\n        };\n      },\n      async \"users.checkRegistration\"(fcmToken) {\n        check(fcmToken, String);\n        const user = Meteor.users.findOneAsync({\n          \"profile.fcmToken\": fcmToken\n        });\n        if (!user) {\n          throw new Meteor.Error(\"device-deregistered\", \"This device is deregistered. Please register again.\");\n        }\n        return user._id;\n      },\n      async updateUserProfile(_ref) {\n        let {\n          firstName,\n          lastName,\n          email\n        } = _ref;\n        check(firstName, String);\n        check(lastName, String);\n        check(email, String);\n        console.log(\"Updating profile for user:\", firstName, lastName, email);\n        if (!this.userId) {\n          throw new Meteor.Error(\"not-authorized\", \"You must be logged in to update your profile\");\n        }\n        try {\n          // Update the user's profile in the database\n          Meteor.users.updateAsync(this.userId, {\n            $set: {\n              \"profile.firstName\": firstName,\n              \"profile.lastName\": lastName,\n              \"emails.0.address\": email\n            }\n          });\n          return {\n            success: true,\n            message: \"Profile updated successfully\"\n          };\n        } catch (error) {\n          console.error(\"Error updating profile:\", error);\n          throw new Meteor.Error(\"update-failed\", \"Failed to update profile\", error);\n        }\n      },\n      async \"users.mapFCMTokenToUser\"(userId, fcmToken) {\n        check(userId, String);\n        check(fcmToken, String);\n        if (!this.userId) {\n          throw new Meteor.Error(\"not-authorized\", \"User must be logged in\");\n        }\n        const user = Meteor.users.findOne(userId);\n        if (!user) {\n          throw new Meteor.Error(\"user-not-found\", \"User not found\");\n        }\n\n        // Map token to the user\n        Meteor.users.update(userId, {\n          $set: {\n            \"profile.fcmToken\": fcmToken\n          }\n        });\n      },\n      async checkUsersExist() {\n        try {\n          const userCount = await Meteor.users.find().countAsync();\n          console.log(\"User count:\", userCount);\n          return userCount > 0;\n        } catch (error) {\n          console.error(\"Error in checkUsersExist:\", error);\n          throw new Meteor.Error(\"server-error\", \"Failed to check user existence\");\n        }\n      }\n    });\n    Meteor.startup(() => {\n      // Meteor.publish('deviceLogs', function (deviceUuid) {\n      //   console.log(\"Publishing deviceLogs for UUID:\", deviceUuid);\n      //   if (!deviceUuid) {\n      //     console.log(\"No UUID provided, returning empty set\");\n      //     return this.ready();\n      //   }\n      //   const query = { deviceUUID: deviceUuid };\n      //   console.log(\"MongoDB query:\", query);\n      //   const records = DeviceLogs.find(query, {\n      //     fields: {\n      //       deviceUUID: 1,\n      //       email: 1,\n      //       fcmToken: 1\n      //     }\n      //   });\n      //   console.log(\"Found records count:\", records.countAsync());\n      //   return records;\n      // });\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"private\":{\"miewebauthapp-b76936fb6ccc.json\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// server/private/miewebauthapp-b76936fb6ccc.json                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = {\n  \"type\": \"service_account\",\n  \"project_id\": \"miewebauthapp\",\n  \"private_key_id\": \"b76936fb6ccc4f8977a3bcd3ce2bf5322a8598aa\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDIyAZSRKQEzaFT\\nD8Ouz+hsBL1eV+Qi6w9Z1s5/Q5EL5WwXsNyxtqdu+EMDtdLLzIP5sM/xuMY+2mt0\\nizZz0H0I7xADfe7gpeR2qT3/3yLuLCyX8U+9l9sA5uooAzR6YhWpYAH8FBLPPPJm\\nNjKc0R/tLwX/pYNXfwgZjJvgYF+aqt9y90GgAkxNPdkxat1KGJLUeqyEoYYF+LiA\\n9pVfEplTxmlPxsP02nOz/EO08sCfl1wgCHUZSQtI6fM9LmQtp6Db/8utmdde/PMh\\nNfAn76TskSGLsEjRDzfY0ONrXbqJsH9cH088lTejx4TTcYywwrDxQr0UjFf71rgy\\nT5C3i/LjAgMBAAECggEACFMthUEOAUT6vhRBQNZOBMHi4tkyFGCQBQxAXkvRj8oL\\nbqVeq9+u7DhO+bBoSnBIaJSe3/Q8BA8lCsgFkffAYhvHcN2f3KCu6wdJaCU7BYpq\\nBELKfkn1mAFQZChTMgqEa2ltAPlew55Qo/xLTO/pgE7FfjwWngzJATDbUF+ulx27\\nuThneJH1Kl/uF5ZPpI8kycgHKxka+h7r9cerWVV7T1J1VTxovjF+sHdQ10+47FVm\\nhVHTbPnVEjRmn/As3r4OS0QKkXUe5Zw3R6vkqOAnO4yZmTqrbsNUiimbwxXxCqT5\\nf8O7zo/F0OS0ILnA7+aOTR/tkLq6QhISe3wnAiDjgQKBgQD7z39W/vLAdJ/RIpAK\\nFS6qhHjq+XgJTOJYmVEE//j6Bn4rFuAvCXsETpaAsC4iRIqmAsobkivbg8lykPRS\\nyVtqEV5irjVfhk0ScMvXSTeLHk61ORQ4UcSbH/a4YZGNSe27HKJUSpayDM2My/Tk\\nlE80uN/Ggh0Y6fDrZl4m3X+pWQKBgQDMHy9/g8ipldA7muAsX3w+5gm0sBEMXzh4\\nlaf4SOn0RDJzQojQNwhNS7WHWyMOxjrrXoejQAYh0s5F+rj8pFYKMywKRQL1dCeA\\n21OUxych/6Qq9QCeTirl0GQJLtGQ7kyNCLrysJba8a7hqTmsejTZFCAieYkXrYBg\\nv4Kji2x6mwKBgFYqqO6CC1tkDRQpeZSZrwBWmHH/r92u231p6VmGphIYirAAAfLW\\nkavloIakwwSi47bvGW3Z1Pwm2pZDl/eEQ63GB8BI0KbBdDotMvOWcFVAp7pHr+2d\\nvWM/ytNJP99TPvBaWgnyBCMlUmktmb1mKrxlzt1ExOQzmWdT/j/aZ8bxAoGBALFC\\nI61Ic+lRABPC2wmtoee9PJB8lVF5H0EYNVWXfBNzZZxSGx01rS/ynyF8M2WRH3lm\\nDcPmxWx59EcxA5Ph4hXZelUwuPEOfX+Y92wrxf/wUFA9ktvmZbpMzZJr5fFF/5Q6\\nEJ7QWzCm0IeGvV7agSpCH+XQRQ0aznE13ezIFtwhAoGBALVLpDyN4/4cCZWzoJmn\\nmRoR+fKOmhIYJo3h3lVaAD+QoCbFdjdJ4EQ9R3sCHfu8Kt5Pqkvq6P5qWrUMgbyq\\nNNSDAcW/6jeYXTC9vFbAR+dWgNzDvI/u9CN1yBIyquXYdjYMQ/mi0fNUuVyIrAmj\\nPS6dyf4pdr9y2FKg8jdfzSXQ\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"miewebauth@miewebauthapp.iam.gserviceaccount.com\",\n  \"client_id\": \"118099088806649443889\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/miewebauth%40miewebauthapp.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".ts\",\n    \".mjs\",\n    \".jsx\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  require: require,\n  eagerModulePaths: [\n    \"/server/main.js\"\n  ]\n}});\n","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/deviceLogs.js","imports/api/notificationHistory.js","server/firebase.js","server/main.js"],"names":["module","export","DeviceLogs","Mongo","link","v","check","SHA256","__reifyWaitForDeps__","Collection","generateAppId","deviceUUID","email","creationTime","combinedString","concat","substring","Meteor","isServer","startup","createIndex","userId","appId","methods","deviceLogs.upsert","data","String","fcmToken","deviceInfo","Object","Date","toISOString","console","log","upsertAsync","$set","lastUpdated","$setOnInsert","createdAt","deviceLogs.updateToken","updateAsync","deviceLogs.getFCMTokenByAppId","deviceLog","findOneAsync","Error","deviceLogs.getFCMTokenByDeviceId","deviceLogs.getByAppId","result","publish","find","__reify_async_result__","_reifyError","self","async","NotificationHistory","Random","notificationId","status","notificationHistory.insert","title","body","id","insertAsync","notificationHistory.updateStatus","includes","updatedAt","notificationHistory.getLastIdByUser","sort","fields","then","lastNotification","catch","error","notificationHistory.getByUser","fetch","notificationHistory.getByStatus","sendNotification","admin","default","serviceAccount","initializeApp","credential","cert","registrationToken","actions","message","token","JSON","stringify","messageFrom","notificationType","content_available","notId","android","priority","apns","payload","aps","alert","badge","sound","category","mutable_content","response","messaging","send","exportDefault","WebApp","Accounts","pendingNotifications","Map","responsePromises","saveUserNotificationHistory","notification","call","connectHandlers","use","req","res","on","chunk","requestBody","parse","messageBody","Promise","resolve","reject","userResponsePromise","set","setTimeout","has","delete","userResponse","writeHead","end","success","action","notifications.handleResponse","get","userAction","requestId","replyText","arguments","length","undefined","validActions","pendingNotification","clearTimeout","timeout","users.register","userDetails","pin","firstName","lastName","sessionDeviceInfo","model","platform","uuid","version","manufacturer","fcmDeviceToken","users","createUser","password","profile","deviceToken","toString","getUserDetails","_user$profile","_user$profile2","user","emails","address","users.checkRegistration","_id","updateUserProfile","_ref","users.mapFCMTokenToUser","findOne","update","checkUsersExist","userCount","countAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAAA,MAAM,CAACC,MAAM,CAAC;MAACC,UAAU,EAACA,CAAA,KAAIA;IAAU,CAAC,CAAC;IAAC,IAAIC,KAAK;IAACH,MAAM,CAACI,IAAI,CAAC,cAAc,EAAC;MAACD,KAAKA,CAACE,CAAC,EAAC;QAACF,KAAK,GAACE,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIC,KAAK;IAACN,MAAM,CAACI,IAAI,CAAC,cAAc,EAAC;MAACE,KAAKA,CAACD,CAAC,EAAC;QAACC,KAAK,GAACD,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIE,MAAM;IAACP,MAAM,CAACI,IAAI,CAAC,YAAY,EAAC;MAACG,MAAMA,CAACF,CAAC,EAAC;QAACE,MAAM,GAACF,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIG,oBAAoB,CAAC,CAAC,EAAE,CAAC,MAAMA,oBAAoB,CAAC,CAAC,EAAE,CAAC;IAIrR,MAAMN,UAAU,GAAG,IAAIC,KAAK,CAACM,UAAU,CAAC,YAAY,CAAC;IAI5D;IACA,MAAMC,aAAa,GAAGA,CAACC,UAAU,EAAEC,KAAK,EAAEC,YAAY,KAAK;MACvD,MAAMC,cAAc,MAAAC,MAAA,CAAMJ,UAAU,OAAAI,MAAA,CAAIH,KAAK,OAAAG,MAAA,CAAIF,YAAY,CAAE;MAC/D,OAAON,MAAM,CAACO,cAAc,CAAC,CAACE,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAChD,CAAC;;IAGH;IACA,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAACE,OAAO,CAAC,MAAM;QACnBjB,UAAU,CAACkB,WAAW,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC,CAAC;QACrCnB,UAAU,CAACkB,WAAW,CAAC;UAAET,UAAU,EAAE;QAAE,CAAC,CAAC;QACzCT,UAAU,CAACkB,WAAW,CAAC;UAAER,KAAK,EAAE;QAAE,CAAC,CAAC;QACpCV,UAAU,CAACkB,WAAW,CAAC;UAAEE,KAAK,EAAE;QAAE,CAAC,CAAC;MACtC,CAAC,CAAC;IACJ;;IAEA;IACAL,MAAM,CAACM,OAAO,CAAC;MACX,mBAAmB,EAAE,eAAAC,CAAeC,IAAI,EAAE;QACtCnB,KAAK,CAACmB,IAAI,EAAE;UACVJ,MAAM,EAAEK,MAAM;UACdd,KAAK,EAAEc,MAAM;UACbf,UAAU,EAAEe,MAAM;UAClBC,QAAQ,EAAED,MAAM;UAChBE,UAAU,EAAEC;QACd,CAAC,CAAC;QAEF,MAAMhB,YAAY,GAAG,IAAIiB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAC7C,MAAMT,KAAK,GAAGZ,aAAa,CAACe,IAAI,CAACd,UAAU,EAAEc,IAAI,CAACb,KAAK,EAAEC,YAAY,CAAC;QACtEmB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEX,KAAK,CAAC,CAAC,CAAC;;QAEtD,OAAOpB,UAAU,CAACgC,WAAW,CAC3B;UACEb,MAAM,EAAEI,IAAI,CAACJ,MAAM;UACnBV,UAAU,EAAEc,IAAI,CAACd;QACnB,CAAC,EACD;UACEwB,IAAI,EAAE;YACJvB,KAAK,EAAEa,IAAI,CAACb,KAAK;YACjBe,QAAQ,EAAEF,IAAI,CAACE,QAAQ;YACvBL,KAAK,EAAEA,KAAK;YACZc,WAAW,EAAE,IAAIN,IAAI,CAAC;UACxB,CAAC;UACDO,YAAY,EAAE;YACZC,SAAS,EAAE,IAAIR,IAAI,CAAC;UACtB;QACF,CACF,CAAC;MACH,CAAC;MACL,wBAAwBS,CAAClB,MAAM,EAAEV,UAAU,EAAEgB,QAAQ,EAAE;QACrDrB,KAAK,CAACe,MAAM,EAAEK,MAAM,CAAC;QACrBpB,KAAK,CAACK,UAAU,EAAEe,MAAM,CAAC;QACzBpB,KAAK,CAACqB,QAAQ,EAAED,MAAM,CAAC;QAEvB,OAAOxB,UAAU,CAACsC,WAAW,CAC3B;UACEnB,MAAM,EAAEA,MAAM;UACdV,UAAU,EAAEA;QACd,CAAC,EACD;UACEwB,IAAI,EAAE;YACJR,QAAQ,EAAEA,QAAQ;YAClBS,WAAW,EAAE,IAAIN,IAAI,CAAC;UACxB;QACF,CACF,CAAC;MACH,CAAC;MACD,+BAA+B,EAAE,eAAAW,CAAenB,KAAK,EAAE;QACrDhB,KAAK,CAACgB,KAAK,EAAEI,MAAM,CAAC;QAEpB,MAAMgB,SAAS,GAAG,MAAMxC,UAAU,CAACyC,YAAY,CAAC;UAAErB,KAAK,EAAEA;QAAM,CAAC,CAAC;QAEjE,IAAI,CAACoB,SAAS,EAAE;UACd,MAAM,IAAIzB,MAAM,CAAC2B,KAAK,CAAC,gBAAgB,EAAE,kCAAkC,CAAC;QAC9E;QAEA,OAAOF,SAAS,CAACf,QAAQ;MAC3B,CAAC;MACD,kCAAkC,EAAE,eAAAkB,CAAelC,UAAU,EAAE;QAC7DL,KAAK,CAACK,UAAU,EAAEe,MAAM,CAAC;QAEzB,MAAMgB,SAAS,GAAG,MAAMxC,UAAU,CAACyC,YAAY,CAAC;UAAEhC,UAAU,EAAEA;QAAW,CAAC,CAAC;QAE3E,IAAI,CAAC+B,SAAS,EAAE;UACd,MAAM,IAAIzB,MAAM,CAAC2B,KAAK,CAAC,gBAAgB,EAAE,qCAAqC,CAAC;QACjF;QAEA,OAAOF,SAAS,CAACf,QAAQ;MAC3B,CAAC;MAED;MACA,uBAAuB,EAAE,eAAAmB,CAAexB,KAAK,EAAE;QAC7ChB,KAAK,CAACgB,KAAK,EAAEI,MAAM,CAAC;QACpB,MAAMqB,MAAM,GAAG,MAAM7C,UAAU,CAACyC,YAAY,CAAC;UAAErB;QAAM,CAAC,CAAC;QACvDU,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEX,KAAK,CAAC;QACxCU,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,MAAM,CAAC;QACxC,OAAOA,MAAM;MACf;IACF,CAAC,CAAC;;IAEF;IACA,IAAI9B,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAAC+B,OAAO,CAAC,mBAAmB,EAAE,UAAS3B,MAAM,EAAE;QACnDf,KAAK,CAACe,MAAM,EAAEK,MAAM,CAAC;QACrB,OAAOxB,UAAU,CAAC+C,IAAI,CAAC;UAAE5B,MAAM,EAAEA;QAAO,CAAC,CAAC;MAC5C,CAAC,CAAC;MAEFJ,MAAM,CAAC+B,OAAO,CAAC,qBAAqB,EAAE,UAASrC,UAAU,EAAE;QACzDL,KAAK,CAACK,UAAU,EAAEe,MAAM,CAAC;QACzB,OAAOxB,UAAU,CAAC+C,IAAI,CAAC;UAAEtC,UAAU,EAAEA;QAAW,CAAC,CAAC;MACpD,CAAC,CAAC;IACJ;IAACuC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA,G;;;;;;;;;;;;;;ICxHDrD,MAAM,CAACC,MAAM,CAAC;MAACqD,mBAAmB,EAACA,CAAA,KAAIA;IAAmB,CAAC,CAAC;IAAC,IAAInD,KAAK;IAACH,MAAM,CAACI,IAAI,CAAC,cAAc,EAAC;MAACD,KAAKA,CAACE,CAAC,EAAC;QAACF,KAAK,GAACE,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIC,KAAK;IAACN,MAAM,CAACI,IAAI,CAAC,cAAc,EAAC;MAACE,KAAKA,CAACD,CAAC,EAAC;QAACC,KAAK,GAACD,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIkD,MAAM;IAACvD,MAAM,CAACI,IAAI,CAAC,eAAe,EAAC;MAACmD,MAAMA,CAAClD,CAAC,EAAC;QAACkD,MAAM,GAAClD,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIG,oBAAoB,CAAC,CAAC,EAAE,CAAC,MAAMA,oBAAoB,CAAC,CAAC,EAAE,CAAC;IAI1S,MAAM8C,mBAAmB,GAAG,IAAInD,KAAK,CAACM,UAAU,CAAC,qBAAqB,CAAC;IAE9E;IACA,IAAIQ,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAACE,OAAO,CAAC,MAAM;QACnBmC,mBAAmB,CAAClC,WAAW,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC,CAAC;QAC9CiC,mBAAmB,CAAClC,WAAW,CAAC;UAAEE,KAAK,EAAE;QAAE,CAAC,CAAC;QAC7CgC,mBAAmB,CAAClC,WAAW,CAAC;UAAEoC,cAAc,EAAE;QAAE,CAAC,CAAC;QACtDF,mBAAmB,CAAClC,WAAW,CAAC;UAAEqC,MAAM,EAAE;QAAE,CAAC,CAAC;MAChD,CAAC,CAAC;IACJ;IAEAxC,MAAM,CAACM,OAAO,CAAC;MACb;MACA,4BAA4B,EAAE,SAAAmC,CAAUjC,IAAI,EAAE;QAC5CnB,KAAK,CAACmB,IAAI,EAAE;UACVJ,MAAM,EAAEK,MAAM;UACdJ,KAAK,EAAEI,MAAM;UACbiC,KAAK,EAAEjC,MAAM;UACbkC,IAAI,EAAElC;QACR,CAAC,CAAC;;QAEF;QACA,MAAM8B,cAAc,GAAGD,MAAM,CAACM,EAAE,CAAC,CAAC;QAElC,OAAOP,mBAAmB,CAACQ,WAAW,CAAC;UACrCzC,MAAM,EAAEI,IAAI,CAACJ,MAAM;UACnBC,KAAK,EAAEG,IAAI,CAACH,KAAK;UACjBkC,cAAc,EAAEA,cAAc;UAC9BG,KAAK,EAAElC,IAAI,CAACkC,KAAK;UACjBC,IAAI,EAAEnC,IAAI,CAACmC,IAAI;UACfH,MAAM,EAAE,SAAS;UACjBnB,SAAS,EAAE,IAAIR,IAAI,CAAC;QACtB,CAAC,CAAC;MACJ,CAAC;MAED;MACA,kCAAkC,EAAE,SAAAiC,CAAUP,cAAc,EAAEC,MAAM,EAAE;QACpEnD,KAAK,CAACkD,cAAc,EAAE9B,MAAM,CAAC;QAC7BpB,KAAK,CAACmD,MAAM,EAAE/B,MAAM,CAAC;QAErB,IAAI,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAACsC,QAAQ,CAACP,MAAM,CAAC,EAAE;UACzD,MAAM,IAAIxC,MAAM,CAAC2B,KAAK,CAAC,gBAAgB,EAAE,+CAA+C,CAAC;QAC3F;QAEA,OAAOU,mBAAmB,CAACd,WAAW,CACpC;UAAEgB;QAAe,CAAC,EAClB;UACErB,IAAI,EAAE;YACJsB,MAAM,EAAEA,MAAM;YACdQ,SAAS,EAAE,IAAInC,IAAI,CAAC,CAAC,CAAE;UACzB;QACF,CACF,CAAC;MACH,CAAC;MAEH;MACA,qCAAqC,EAAE,SAAAoC,CAAU7C,MAAM,EAAE;QACvDf,KAAK,CAACe,MAAM,EAAEK,MAAM,CAAC;QAErB,OAAO4B,mBAAmB,CAACX,YAAY,CACrC;UAAEtB;QAAO,CAAC,EACV;UAAE8C,IAAI,EAAE;YAAE7B,SAAS,EAAE,CAAC;UAAE,CAAC;UAAE8B,MAAM,EAAE;YAAEZ,cAAc,EAAE;UAAE;QAAE,CAC3D,CAAC,CAACa,IAAI,CAAEC,gBAAgB,IAAK;UAC3B,OAAOA,gBAAgB,GAAGA,gBAAgB,CAACd,cAAc,GAAG,IAAI;QAClE,CAAC,CAAC,CAACe,KAAK,CAAEC,KAAK,IAAK;UAClBxC,OAAO,CAACwC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;UACzD,MAAM,IAAIvD,MAAM,CAAC2B,KAAK,CAAC,gBAAgB,EAAE,mCAAmC,CAAC;QAC/E,CAAC,CAAC;MACJ,CAAC;MAEC;MACA,+BAA+B,EAAE,SAAA6B,CAAUpD,MAAM,EAAE;QACjDf,KAAK,CAACe,MAAM,EAAEK,MAAM,CAAC;QACrB,OAAO4B,mBAAmB,CAACL,IAAI,CAAC;UAAE5B;QAAO,CAAC,CAAC,CAACqD,KAAK,CAAC,CAAC;MACrD,CAAC;MAED;MACA,iCAAiC,EAAE,SAAAC,CAAUlB,MAAM,EAAE;QACnDnD,KAAK,CAACmD,MAAM,EAAE/B,MAAM,CAAC;QAErB,IAAI,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAACsC,QAAQ,CAACP,MAAM,CAAC,EAAE;UACzD,MAAM,IAAIxC,MAAM,CAAC2B,KAAK,CAAC,gBAAgB,EAAE,+CAA+C,CAAC;QAC3F;QAEA,OAAOU,mBAAmB,CAACL,IAAI,CAAC;UAAEQ;QAAO,CAAC,CAAC,CAACiB,KAAK,CAAC,CAAC;MACrD;IACF,CAAC,CAAC;IAEF,IAAIzD,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAAC+B,OAAO,CAAC,4BAA4B,EAAE,UAAU3B,MAAM,EAAE;QAC7Df,KAAK,CAACe,MAAM,EAAEK,MAAM,CAAC;QACrB,OAAO4B,mBAAmB,CAACL,IAAI,CAAC;UAAE5B;QAAO,CAAC,CAAC;MAC7C,CAAC,CAAC;MAEFJ,MAAM,CAAC+B,OAAO,CAAC,8BAA8B,EAAE,UAAUS,MAAM,EAAE;QAC/DnD,KAAK,CAACmD,MAAM,EAAE/B,MAAM,CAAC;QACrB,OAAO4B,mBAAmB,CAACL,IAAI,CAAC;UAAEQ;QAAO,CAAC,CAAC;MAC7C,CAAC,CAAC;IACJ;IAACP,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA,G;;;;;;;;;;;;;;ICvGDrD,MAAM,CAACC,MAAM,CAAC;MAAC2E,gBAAgB,EAACA,CAAA,KAAIA;IAAgB,CAAC,CAAC;IAAC,IAAIC,KAAK;IAAC7E,MAAM,CAACI,IAAI,CAAC,gBAAgB,EAAC;MAAC0E,OAAOA,CAACzE,CAAC,EAAC;QAACwE,KAAK,GAACxE,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAI0E,cAAc;IAAC/E,MAAM,CAACI,IAAI,CAAC,mDAAmD,EAAC;MAAC0E,OAAOA,CAACzE,CAAC,EAAC;QAAC0E,cAAc,GAAC1E,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIG,oBAAoB,CAAC,CAAC,EAAE,CAAC,MAAMA,oBAAoB,CAAC,CAAC,EAAE,CAAC;IAIxSqE,KAAK,CAACG,aAAa,CAAC;MAClBC,UAAU,EAAEJ,KAAK,CAACI,UAAU,CAACC,IAAI,CAACH,cAAc;IAClD,CAAC,CAAC;IACF;AACA;AACA;AACA;AACA;AACA;AACA;IACO,MAAMH,gBAAgB,GAAG,MAAAA,CAAOO,iBAAiB,EAAExB,KAAK,EAAEC,IAAI,EAAEwB,OAAO,KAAK;MACjF,MAAMC,OAAO,GAAG;QACdC,KAAK,EAAEH,iBAAiB;QACxB1D,IAAI,EAAE;UACJkC,KAAK;UACLC,IAAI;UACJtC,KAAK,EAAE6D,iBAAiB;UACxBC,OAAO,EAAEG,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC;UAChCK,WAAW,EAAE,KAAK;UAClBC,gBAAgB,EAAE,UAAU;UAC5BC,iBAAiB,EAAE,GAAG;UACtBC,KAAK,EAAE;UACP;QACF,CAAC;QACDC,OAAO,EAAE;UACPC,QAAQ,EAAE;QACZ,CAAC;QACDC,IAAI,EAAE;UACJC,OAAO,EAAE;YACPC,GAAG,EAAE;cACHC,KAAK,EAAE;gBACLvC,KAAK;gBACLC;cACF,CAAC;cACDuC,KAAK,EAAE,CAAC;cACRC,KAAK,EAAE,SAAS;cAChBC,QAAQ,EAAE,UAAU;cACpBV,iBAAiB,EAAE,CAAC;cACpBW,eAAe,EAAE;YACnB;UACF;QACF;MACF,CAAC;MAED,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,SAAS,CAAC,CAAC,CAACC,IAAI,CAACpB,OAAO,CAAC;QACtDrD,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEsE,QAAQ,CAAC;QAC7D,OAAOA,QAAQ;MACjB,CAAC,CAAC,OAAO/B,KAAK,EAAE;QACdxC,OAAO,CAACwC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxD,MAAMA,KAAK;MACb;IACF,CAAC;IAxDDxE,MAAM,CAAC0G,aAAa,CAyDL7B,KAzDS,CAAC;IAAC3B,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA,G;;;;;;;;;;;;;;ICA1B,IAAIpC,MAAM;IAACjB,MAAM,CAACI,IAAI,CAAC,eAAe,EAAC;MAACa,MAAMA,CAACZ,CAAC,EAAC;QAACY,MAAM,GAACZ,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIsG,MAAM;IAAC3G,MAAM,CAACI,IAAI,CAAC,eAAe,EAAC;MAACuG,MAAMA,CAACtG,CAAC,EAAC;QAACsG,MAAM,GAACtG,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIuE,gBAAgB;IAAC5E,MAAM,CAACI,IAAI,CAAC,YAAY,EAAC;MAACwE,gBAAgBA,CAACvE,CAAC,EAAC;QAACuE,gBAAgB,GAACvE,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIuG,QAAQ;IAAC5G,MAAM,CAACI,IAAI,CAAC,sBAAsB,EAAC;MAACwG,QAAQA,CAACvG,CAAC,EAAC;QAACuG,QAAQ,GAACvG,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAACL,MAAM,CAACI,IAAI,CAAC,8BAA8B,CAAC;IAAC,IAAIE,KAAK;IAACN,MAAM,CAACI,IAAI,CAAC,cAAc,EAAC;MAACE,KAAKA,CAACD,CAAC,EAAC;QAACC,KAAK,GAACD,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIH,UAAU;IAACF,MAAM,CAACI,IAAI,CAAC,8BAA8B,EAAC;MAACF,UAAUA,CAACG,CAAC,EAAC;QAACH,UAAU,GAACG,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIiD,mBAAmB;IAACtD,MAAM,CAACI,IAAI,CAAC,oCAAoC,EAAC;MAACkD,mBAAmBA,CAACjD,CAAC,EAAC;QAACiD,mBAAmB,GAACjD,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIG,oBAAoB,CAAC,CAAC,EAAE,CAAC,MAAMA,oBAAoB,CAAC,CAAC,EAAE,CAAC;IASnqB;IACA,MAAMqG,oBAAoB,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtC,MAAMC,gBAAgB,GAAG,IAAID,GAAG,CAAC,CAAC;IAElC,MAAME,2BAA2B,GAAG,MAAOC,YAAY,IAAK;MAC1D,MAAM;QAAE3F,KAAK;QAAEqC,KAAK;QAAEC;MAAK,CAAC,GAAGqD,YAAY;MAE3C,MAAMvE,SAAS,GAAG,MAAMxC,UAAU,CAACyC,YAAY,CAAC;QAAErB;MAAM,CAAC,CAAC;MAC1D,IAAI,CAACoB,SAAS,EAAE;QACdV,OAAO,CAACwC,KAAK,CAAC,0BAA0B,EAAElD,KAAK,CAAC;QAChD;MACF;MAEA,MAAMD,MAAM,GAAGqB,SAAS,CAACrB,MAAM;MAE/B,MAAMI,IAAI,GAAG;QACXJ,MAAM;QACNC,KAAK;QACLqC,KAAK;QACLC;MACF,CAAC;MAED3C,MAAM,CAACiG,IAAI,CAAC,4BAA4B,EAAEzF,IAAI,EAAE,CAAC+C,KAAK,EAAEzB,MAAM,KAAK;QACjE,IAAIyB,KAAK,EAAE;UACTxC,OAAO,CAACwC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACvD,CAAC,MAAM;UACLxC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEc,MAAM,CAAC;QAC5D;MACF,CAAC,CAAC;IACJ,CAAC;IAED4D,MAAM,CAACQ,eAAe,CAACC,GAAG,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;MACnE,IAAI1D,IAAI,GAAG,EAAE;MAEbyD,GAAG,CAACE,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;QACxB5D,IAAI,IAAI4D,KAAK;MACf,CAAC,CAAC;MAEFH,GAAG,CAACE,EAAE,CAAC,KAAK,EAAE,YAAY;QACxB,IAAI;UACF,MAAME,WAAW,GAAGlC,IAAI,CAACmC,KAAK,CAAC9D,IAAI,CAAC;UACpC5B,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEwF,WAAW,CAAC;UAElD,MAAM;YAAEnG,KAAK;YAAEqC,KAAK;YAAEC,IAAI,EAAE+D,WAAW;YAAEvC;UAAQ,CAAC,GAAGqC,WAAW;UAEhE,IAAI,CAACnG,KAAK,IAAI,CAACqC,KAAK,IAAI,CAACgE,WAAW,IAAI,CAACvC,OAAO,EAAE;YAChD,MAAM,IAAIxC,KAAK,CAAC,yBAAyB,CAAC;UAC5C;;UAEA;UACA,MAAMjB,QAAQ,GAAG,MAAM,IAAIiG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;YACtD7G,MAAM,CAACiG,IAAI,CAAC,+BAA+B,EAAE5F,KAAK,EAAE,CAACkD,KAAK,EAAEzB,MAAM,KAAK;cACrE,IAAIyB,KAAK,EAAEsD,MAAM,CAACtD,KAAK,CAAC,CAAC,KACpBqD,OAAO,CAAC9E,MAAM,CAAC;YACtB,CAAC,CAAC;UACJ,CAAC,CAAC;;UAEF;UACA,MAAM6B,gBAAgB,CAACjD,QAAQ,EAAEgC,KAAK,EAAEgE,WAAW,EAAEvC,OAAO,CAAC;UAC7DpD,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;UAC7C+E,2BAA2B,CAAC;YAAE1F,KAAK;YAAEqC,KAAK;YAAEC,IAAI,EAAE+D;UAAY,CAAC,CAAC;;UAEhE;UACA,MAAMI,mBAAmB,GAAG,IAAIH,OAAO,CAAEC,OAAO,IAAK;YACnD;YACA7F,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEN,QAAQ,CAAC;YAC9CoF,gBAAgB,CAACiB,GAAG,CAACrG,QAAQ,EAAEkG,OAAO,CAAC;;YAEvC;YACAI,UAAU,CAAC,MAAM;cACf,IAAIlB,gBAAgB,CAACmB,GAAG,CAACvG,QAAQ,CAAC,EAAE;gBAClCkG,OAAO,CAAC,SAAS,CAAC;gBAClBd,gBAAgB,CAACoB,MAAM,CAACxG,QAAQ,CAAC;cACnC;YACF,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;UACd,CAAC,CAAC;;UAEF;UACA,MAAMyG,YAAY,GAAG,MAAML,mBAAmB;UAC9C/F,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEmG,YAAY,CAAC;;UAE1C;UACAd,GAAG,CAACe,SAAS,CAAC,GAAG,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC,CAAC;UAC1Df,GAAG,CAACgB,GAAG,CACL/C,IAAI,CAACC,SAAS,CAAC;YACb+C,OAAO,EAAE,IAAI;YACbC,MAAM,EAAEJ;UACV,CAAC,CACH,CAAC;QACH,CAAC,CAAC,OAAO5D,KAAK,EAAE;UACdxC,OAAO,CAACwC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACpD8C,GAAG,CAACe,SAAS,CAAC,GAAG,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC,CAAC;UAC1Df,GAAG,CAACgB,GAAG,CACL/C,IAAI,CAACC,SAAS,CAAC;YACb+C,OAAO,EAAE,KAAK;YACd/D,KAAK,EAAEA,KAAK,CAACa;UACf,CAAC,CACH,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACApE,MAAM,CAACM,OAAO,CAAC;MACb,MAAM,8BAA8BkH,CAACnH,KAAK,EAAEkH,MAAM,EAAE;QAClDlI,KAAK,CAACgB,KAAK,EAAEI,MAAM,CAAC;QACpBpB,KAAK,CAACkI,MAAM,EAAE9G,MAAM,CAAC;QAErBM,OAAO,CAACC,GAAG,8CAAAlB,MAAA,CACoCO,KAAK,gBAAAP,MAAA,CAAayH,MAAM,CACvE,CAAC;QACDxG,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE8E,gBAAgB,CAAC;;QAElD;QACA,IAAIA,gBAAgB,CAACmB,GAAG,CAAC5G,KAAK,CAAC,EAAE;UAC/B,MAAMuG,OAAO,GAAGd,gBAAgB,CAAC2B,GAAG,CAACpH,KAAK,CAAC;UAC3CuG,OAAO,CAACW,MAAM,CAAC;UACfzB,gBAAgB,CAACoB,MAAM,CAAC7G,KAAK,CAAC;UAC9B,OAAO;YACLiH,OAAO,EAAE,IAAI;YACblD,OAAO,cAAAtE,MAAA,CAAcyH,MAAM;UAC7B,CAAC;QACH,CAAC,MAAM;UACLxG,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEX,KAAK,CAAC;UACzD,OAAO;YAAEiH,OAAO,EAAE,KAAK;YAAElD,OAAO,EAAE;UAAgC,CAAC;QACrE;MACF,CAAC;MAED,MAAMsD,UAAUA,CAACH,MAAM,EAAEI,SAAS,EAAoB;QAAA,IAAlBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;QAClDxI,KAAK,CAACkI,MAAM,EAAE9G,MAAM,CAAC;QACrBpB,KAAK,CAACsI,SAAS,EAAElH,MAAM,CAAC;QACxB,IAAImH,SAAS,EAAEvI,KAAK,CAACuI,SAAS,EAAEnH,MAAM,CAAC;QAEvC,MAAMuH,YAAY,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC;QACnD,IAAI,CAACA,YAAY,CAACjF,QAAQ,CAACwE,MAAM,CAAC,EAAE;UAClC,MAAM,IAAIvH,MAAM,CAAC2B,KAAK,CACpB,gBAAgB,EAChB,uCACF,CAAC;QACH;QAEA,MAAMsG,mBAAmB,GAAGrC,oBAAoB,CAAC6B,GAAG,CAACE,SAAS,CAAC;QAC/D,IAAIM,mBAAmB,EAAE;UACvBC,YAAY,CAACD,mBAAmB,CAACE,OAAO,CAAC;UACzCF,mBAAmB,CAACrB,OAAO,CAAC;YAAEW,MAAM;YAAEK;UAAU,CAAC,CAAC;UAClDhC,oBAAoB,CAACsB,MAAM,CAACS,SAAS,CAAC;UACtC,OAAO;YAAEL,OAAO,EAAE,IAAI;YAAEC,MAAM;YAAEK;UAAU,CAAC;QAC7C,CAAC,MAAM;UACL,MAAM,IAAI5H,MAAM,CAAC2B,KAAK,CACpB,iBAAiB,EACjB,iDACF,CAAC;QACH;MACF,CAAC;MAED,MAAM,gBAAgByG,CAACC,WAAW,EAAE;QAClChJ,KAAK,CAACgJ,WAAW,EAAE;UACjB1I,KAAK,EAAEc,MAAM;UACb6H,GAAG,EAAE7H,MAAM;UACX8H,SAAS,EAAE9H,MAAM;UACjB+H,QAAQ,EAAE/H,MAAM;UAChBgI,iBAAiB,EAAE;YACjBC,KAAK,EAAEjI,MAAM;YACbkI,QAAQ,EAAElI,MAAM;YAChBmI,IAAI,EAAEnI,MAAM;YACZoI,OAAO,EAAEpI,MAAM;YACfqI,YAAY,EAAErI;UAChB,CAAC;UACDsI,cAAc,EAAEtI;QAClB,CAAC,CAAC;QAEF,MAAM;UAAEd,KAAK;UAAE2I,GAAG;UAAEC,SAAS;UAAEC,QAAQ;UAAEC;QAAkB,CAAC,GAAGJ,WAAW;QAC1E,MAAM3H,QAAQ,GAAG2H,WAAW,CAACU,cAAc;;QAE3C;QACA,IAAI,MAAM/I,MAAM,CAACgJ,KAAK,CAACtH,YAAY,CAAC;UAAE,gBAAgB,EAAE/B;QAAM,CAAC,CAAC,EAAE;UAChE,MAAM,IAAIK,MAAM,CAAC2B,KAAK,CACpB,aAAa,EACb,qCACF,CAAC;QACH;QAEA,IAAI;UACF;UACA,MAAMvB,MAAM,GAAG,MAAMuF,QAAQ,CAACsD,UAAU,CAAC;YACvCtJ,KAAK;YACLuJ,QAAQ,EAAEZ,GAAG;YACba,OAAO,EAAE;cACPZ,SAAS;cACTC,QAAQ;cACR7H,UAAU,EAAE8H,iBAAiB;cAC7BW,WAAW,EAAE1I;YACf;UACF,CAAC,CAAC;UAEF,IAAIN,MAAM,EAAE;YACVW,OAAO,CAACC,GAAG,0BAAAlB,MAAA,CAA0BM,MAAM,CAAE,CAAC;;YAE9C;YACA,MAAMJ,MAAM,CAACiG,IAAI,CAAC,mBAAmB,EAAE;cACrC7F,MAAM,EAAEA,MAAM,CAACiJ,QAAQ,CAAC,CAAC;cACzB1J,KAAK;cACLD,UAAU,EAAE+I,iBAAiB,CAACG,IAAI;cAClClI,QAAQ;cACRC,UAAU,EAAE8H;YACd,CAAC,CAAC;UACJ;UAEA,OAAO;YACLnB,OAAO,EAAE,IAAI;YACblH,MAAM;YACNgE,OAAO,EAAE;UACX,CAAC;QACH,CAAC,CAAC,OAAOb,KAAK,EAAE;UACdxC,OAAO,CAACwC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClD,MAAM,IAAIvD,MAAM,CAAC2B,KAAK,CAAC,qBAAqB,EAAE4B,KAAK,CAACa,OAAO,CAAC;QAC9D;MACF,CAAC;MAED,MAAMkF,cAAcA,CAAC3J,KAAK,EAAE;QAAA,IAAA4J,aAAA,EAAAC,cAAA;QAC1B,IAAI,CAAC7J,KAAK,EAAE;UACV,MAAM,IAAIK,MAAM,CAAC2B,KAAK,CAAC,mBAAmB,CAAC;QAC7C;QAEA,MAAM8H,IAAI,GAAG,MAAMzJ,MAAM,CAACgJ,KAAK,CAACtH,YAAY,CAAC;UAAE,gBAAgB,EAAE/B;QAAM,CAAC,CAAC;QAEzE,IAAI,CAAC8J,IAAI,EAAE;UACT,MAAM,IAAIzJ,MAAM,CAAC2B,KAAK,CAAC,gBAAgB,CAAC;QAC1C;QAEA,OAAO;UACL4G,SAAS,EAAE,EAAAgB,aAAA,GAAAE,IAAI,CAACN,OAAO,cAAAI,aAAA,uBAAZA,aAAA,CAAchB,SAAS,KAAI,EAAE;UACxCC,QAAQ,EAAE,EAAAgB,cAAA,GAAAC,IAAI,CAACN,OAAO,cAAAK,cAAA,uBAAZA,cAAA,CAAchB,QAAQ,KAAI,EAAE;UACtC7I,KAAK,EAAE8J,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,IAAI;QACnC,CAAC;MACH,CAAC;MAED,MAAM,yBAAyBC,CAAClJ,QAAQ,EAAE;QACxCrB,KAAK,CAACqB,QAAQ,EAAED,MAAM,CAAC;QAEvB,MAAMgJ,IAAI,GAAGzJ,MAAM,CAACgJ,KAAK,CAACtH,YAAY,CAAC;UAAE,kBAAkB,EAAEhB;QAAS,CAAC,CAAC;QACxE,IAAI,CAAC+I,IAAI,EAAE;UACT,MAAM,IAAIzJ,MAAM,CAAC2B,KAAK,CACpB,qBAAqB,EACrB,qDACF,CAAC;QACH;QACA,OAAO8H,IAAI,CAACI,GAAG;MACjB,CAAC;MAED,MAAMC,iBAAiBA,CAAAC,IAAA,EAAiC;QAAA,IAAhC;UAAExB,SAAS;UAAEC,QAAQ;UAAE7I;QAAM,CAAC,GAAAoK,IAAA;QACpD1K,KAAK,CAACkJ,SAAS,EAAE9H,MAAM,CAAC;QACxBpB,KAAK,CAACmJ,QAAQ,EAAE/H,MAAM,CAAC;QACvBpB,KAAK,CAACM,KAAK,EAAEc,MAAM,CAAC;QAEpBM,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEuH,SAAS,EAAEC,QAAQ,EAAE7I,KAAK,CAAC;QAErE,IAAI,CAAC,IAAI,CAACS,MAAM,EAAE;UAChB,MAAM,IAAIJ,MAAM,CAAC2B,KAAK,CACpB,gBAAgB,EAChB,8CACF,CAAC;QACH;QAEA,IAAI;UACF;UACA3B,MAAM,CAACgJ,KAAK,CAACzH,WAAW,CAAC,IAAI,CAACnB,MAAM,EAAE;YACpCc,IAAI,EAAE;cACJ,mBAAmB,EAAEqH,SAAS;cAC9B,kBAAkB,EAAEC,QAAQ;cAC5B,kBAAkB,EAAE7I;YACtB;UACF,CAAC,CAAC;UAEF,OAAO;YAAE2H,OAAO,EAAE,IAAI;YAAElD,OAAO,EAAE;UAA+B,CAAC;QACnE,CAAC,CAAC,OAAOb,KAAK,EAAE;UACdxC,OAAO,CAACwC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/C,MAAM,IAAIvD,MAAM,CAAC2B,KAAK,CACpB,eAAe,EACf,0BAA0B,EAC1B4B,KACF,CAAC;QACH;MACF,CAAC;MAED,MAAM,yBAAyByG,CAAC5J,MAAM,EAAEM,QAAQ,EAAE;QAChDrB,KAAK,CAACe,MAAM,EAAEK,MAAM,CAAC;QACrBpB,KAAK,CAACqB,QAAQ,EAAED,MAAM,CAAC;QAEvB,IAAI,CAAC,IAAI,CAACL,MAAM,EAAE;UAChB,MAAM,IAAIJ,MAAM,CAAC2B,KAAK,CAAC,gBAAgB,EAAE,wBAAwB,CAAC;QACpE;QAEA,MAAM8H,IAAI,GAAGzJ,MAAM,CAACgJ,KAAK,CAACiB,OAAO,CAAC7J,MAAM,CAAC;QACzC,IAAI,CAACqJ,IAAI,EAAE;UACT,MAAM,IAAIzJ,MAAM,CAAC2B,KAAK,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;QAC5D;;QAEA;QACA3B,MAAM,CAACgJ,KAAK,CAACkB,MAAM,CAAC9J,MAAM,EAAE;UAC1Bc,IAAI,EAAE;YACJ,kBAAkB,EAAER;UACtB;QACF,CAAC,CAAC;MACJ,CAAC;MACD,MAAMyJ,eAAeA,CAAA,EAAG;QACtB,IAAI;UACF,MAAMC,SAAS,GAAG,MAAMpK,MAAM,CAACgJ,KAAK,CAAChH,IAAI,CAAC,CAAC,CAACqI,UAAU,CAAC,CAAC;UACxDtJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEoJ,SAAS,CAAC;UACrC,OAAOA,SAAS,GAAG,CAAC;QACtB,CAAC,CAAC,OAAO7G,KAAK,EAAE;UACdxC,OAAO,CAACwC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACjD,MAAM,IAAIvD,MAAM,CAAC2B,KAAK,CAAC,cAAc,EAAE,gCAAgC,CAAC;QAC1E;MACF;IACF,CAAC,CAAC;IAEF3B,MAAM,CAACE,OAAO,CAAC,MAAM;MACnB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACD,CAAC;IAAC+B,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA,G","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\nimport { SHA256 } from 'meteor/sha'; \n\nexport const DeviceLogs = new Mongo.Collection('deviceLogs');\n\n\n\n// Add generateAppId utility function\nconst generateAppId = (deviceUUID, email, creationTime) => {\n    const combinedString = `${deviceUUID}:${email}:${creationTime}`;\n    return SHA256(combinedString).substring(0, 32);\n  };\n  \n\n// Create indexes for better query performance\nif (Meteor.isServer) {\n  Meteor.startup(() => {\n    DeviceLogs.createIndex({ userId: 1 });\n    DeviceLogs.createIndex({ deviceUUID: 1 });\n    DeviceLogs.createIndex({ email: 1 });\n    DeviceLogs.createIndex({ appId: 1 });\n  });\n}\n\n// Define methods for DeviceLogs\nMeteor.methods({\n    'deviceLogs.upsert': async function(data) {\n        check(data, {\n          userId: String,\n          email: String,\n          deviceUUID: String,\n          fcmToken: String,\n          deviceInfo: Object,\n        });\n      \n        const creationTime = new Date().toISOString();\n        const appId = generateAppId(data.deviceUUID, data.email, creationTime);\n        console.log('Generated appId during upsert:', appId); // Add this log\n        \n        return DeviceLogs.upsertAsync(\n          {\n            userId: data.userId,\n            deviceUUID: data.deviceUUID,\n          },\n          {\n            $set: {\n              email: data.email,\n              fcmToken: data.fcmToken,\n              appId: appId,\n              lastUpdated: new Date(),\n            },\n            $setOnInsert: {\n              createdAt: new Date(),\n            },\n          }\n        );\n      },\n  'deviceLogs.updateToken'(userId, deviceUUID, fcmToken) {\n    check(userId, String);\n    check(deviceUUID, String);\n    check(fcmToken, String);\n\n    return DeviceLogs.updateAsync(\n      { \n        userId: userId,\n        deviceUUID: deviceUUID \n      },\n      {\n        $set: {\n          fcmToken: fcmToken,\n          lastUpdated: new Date()\n        }\n      }\n    );\n  },\n  'deviceLogs.getFCMTokenByAppId': async function(appId) {\n    check(appId, String);\n    \n    const deviceLog = await DeviceLogs.findOneAsync({ appId: appId });\n    \n    if (!deviceLog) {\n      throw new Meteor.Error('invalid-app-id', 'No device found with this App ID');\n    }\n    \n    return deviceLog.fcmToken;\n  },\n  'deviceLogs.getFCMTokenByDeviceId': async function(deviceUUID) {\n    check(deviceUUID, String);\n    \n    const deviceLog = await DeviceLogs.findOneAsync({ deviceUUID: deviceUUID });\n    \n    if (!deviceLog) {\n      throw new Meteor.Error('invalid-app-id', 'No device found with this Device ID');\n    }\n    \n    return deviceLog.fcmToken;\n  },\n  \n  // Also fix the debug method\n  'deviceLogs.getByAppId': async function(appId) {\n    check(appId, String);\n    const result = await DeviceLogs.findOneAsync({ appId });\n    console.log('Looking for appId:', appId);\n    console.log('Found device log:', result);\n    return result;\n  }\n});\n\n// Publish device logs\nif (Meteor.isServer) {\n  Meteor.publish('deviceLogs.byUser', function(userId) {\n    check(userId, String);\n    return DeviceLogs.find({ userId: userId });\n  });\n\n  Meteor.publish('deviceLogs.byDevice', function(deviceUUID) {\n    check(deviceUUID, String);\n    return DeviceLogs.find({ deviceUUID: deviceUUID });\n  });\n}","import { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\nimport { Random } from 'meteor/random';\n\nexport const NotificationHistory = new Mongo.Collection('notificationHistory');\n\n// Create indexes for better query performance\nif (Meteor.isServer) {\n  Meteor.startup(() => {\n    NotificationHistory.createIndex({ userId: 1 });\n    NotificationHistory.createIndex({ appId: 1 });\n    NotificationHistory.createIndex({ notificationId: 1 });\n    NotificationHistory.createIndex({ status: 1 });\n  });\n}\n\nMeteor.methods({\n  // Insert a new notification into the history\n  'notificationHistory.insert': function (data) {\n    check(data, {\n      userId: String,\n      appId: String,\n      title: String,\n      body: String,\n    });\n\n    // Dynamically generate a unique notificationId\n    const notificationId = Random.id();\n\n    return NotificationHistory.insertAsync({\n      userId: data.userId,\n      appId: data.appId,\n      notificationId: notificationId,\n      title: data.title,\n      body: data.body,\n      status: 'pending',\n      createdAt: new Date()\n    });\n  },\n\n  // Update the status of a notification\n  'notificationHistory.updateStatus': function (notificationId, status) {\n    check(notificationId, String);\n    check(status, String);\n\n    if (!['pending', 'approved', 'rejected'].includes(status)) {\n      throw new Meteor.Error('invalid-status', 'Status must be pending, accepted, or rejected');\n    }\n\n    return NotificationHistory.updateAsync(\n      { notificationId },\n      {\n        $set: {\n          status: status,\n          updatedAt: new Date(), // Timestamp for status update\n        },\n      }\n    );\n  },\n\n// Fetch the last notification ID for a specific user\n'notificationHistory.getLastIdByUser': function (userId) {\n  check(userId, String);\n\n  return NotificationHistory.findOneAsync(\n    { userId },\n    { sort: { createdAt: -1 }, fields: { notificationId: 1 } }\n  ).then((lastNotification) => {\n    return lastNotification ? lastNotification.notificationId : null;\n  }).catch((error) => {\n    console.error(\"Error fetching last notification:\", error);\n    throw new Meteor.Error(\"database-error\", \"Failed to fetch last notification\");\n  });\n},\n\n  // Fetch all notifications for a user\n  'notificationHistory.getByUser': function (userId) {\n    check(userId, String);\n    return NotificationHistory.find({ userId }).fetch();\n  },\n\n  // Fetch notifications by their status\n  'notificationHistory.getByStatus': function (status) {\n    check(status, String);\n\n    if (!['pending', 'accepted', 'rejected'].includes(status)) {\n      throw new Meteor.Error('invalid-status', 'Status must be pending, accepted, or rejected');\n    }\n\n    return NotificationHistory.find({ status }).fetch();\n  },\n});\n\nif (Meteor.isServer) {\n  Meteor.publish('notificationHistory.byUser', function (userId) {\n    check(userId, String);\n    return NotificationHistory.find({ userId });\n  });\n\n  Meteor.publish('notificationHistory.byStatus', function (status) {\n    check(status, String);\n    return NotificationHistory.find({ status });\n  });\n}\n\n\n","import admin from 'firebase-admin';\nimport serviceAccount from '../server/private/miewebauthapp-b76936fb6ccc.json';\n\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount)\n});\n/**\n * Sends a push notification to a specific device.\n * @param {string} registrationToken - The target device token.\n * @param {string} title - The notification title.\n * @param {string} body - The notification body.\n * @param {Array} actions - The actions to include in the notification.\n */\nexport const sendNotification = async (registrationToken, title, body, actions) => {\n  const message = {\n    token: registrationToken,\n    data: {\n      title,\n      body,\n      appId: registrationToken,\n      actions: JSON.stringify(actions),\n      messageFrom: 'mie',\n      notificationType: 'approval',\n      content_available: '1',\n      notId: '10',\n      // surveyID: \"ewtawgreg-gragrag-rgarhthgbad\"\n    },\n    android: {\n      priority: 'high',\n    },\n    apns: {\n      payload: {\n        aps: {\n          alert: {\n            title,\n            body\n          },\n          badge: 1,\n          sound: \"default\",\n          category: \"APPROVAL\",\n          content_available: 1,\n          mutable_content: true\n        }\n      }\n    }\n  };\n\n  try {\n    const response = await admin.messaging().send(message);\n    console.log('Push notification sent successfully:', response);\n    return response;\n  } catch (error) {\n    console.error('Error sending push notification:', error);\n    throw error;\n  }\n};\nexport default admin;","import { Meteor } from \"meteor/meteor\";\nimport { WebApp } from \"meteor/webapp\";\nimport { sendNotification } from \"./firebase\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport \"../imports/api/deviceLogs.js\";\nimport { check } from \"meteor/check\";\nimport { DeviceLogs } from \"../imports/api/deviceLogs.js\";\nimport { NotificationHistory } from \"../imports/api/notificationHistory\";\n\n// Create a Map to store pending notifications\nconst pendingNotifications = new Map();\nconst responsePromises = new Map();\n\nconst saveUserNotificationHistory = async (notification) => {\n  const { appId, title, body } = notification;\n\n  const deviceLog = await DeviceLogs.findOneAsync({ appId });\n  if (!deviceLog) {\n    console.error(\"No user found for appId:\", appId);\n    return;\n  }\n\n  const userId = deviceLog.userId;\n\n  const data = {\n    userId,\n    appId,\n    title,\n    body,\n  };\n\n  Meteor.call(\"notificationHistory.insert\", data, (error, result) => {\n    if (error) {\n      console.error(\"Error inserting notification:\", error);\n    } else {\n      console.log(\"Notification inserted successfully:\", result);\n    }\n  });\n};\n\nWebApp.connectHandlers.use(\"/send-notification\", async (req, res) => {\n  let body = \"\";\n\n  req.on(\"data\", (chunk) => {\n    body += chunk;\n  });\n\n  req.on(\"end\", async () => {\n    try {\n      const requestBody = JSON.parse(body);\n      console.log(\"Received request body:\", requestBody);\n\n      const { appId, title, body: messageBody, actions } = requestBody;\n\n      if (!appId || !title || !messageBody || !actions) {\n        throw new Error(\"Missing required fields\");\n      }\n\n      // Get FCM token\n      const fcmToken = await new Promise((resolve, reject) => {\n        Meteor.call(\"deviceLogs.getFCMTokenByAppId\", appId, (error, result) => {\n          if (error) reject(error);\n          else resolve(result);\n        });\n      });\n\n      // Send notification\n      await sendNotification(fcmToken, title, messageBody, actions);\n      console.log(\"Notification sent successfully\");\n      saveUserNotificationHistory({ appId, title, body: messageBody });\n\n      // Create promise for user response\n      const userResponsePromise = new Promise((resolve) => {\n        // Store the FCM token as the appId since that's what we'll get back\n        console.log(\"FCM tokennnnnnnnnnnnn\", fcmToken);\n        responsePromises.set(fcmToken, resolve);\n\n        // Add timeout\n        setTimeout(() => {\n          if (responsePromises.has(fcmToken)) {\n            resolve(\"timeout\");\n            responsePromises.delete(fcmToken);\n          }\n        }, 300000); // 5 minute timeout\n      });\n\n      // Wait for user response\n      const userResponse = await userResponsePromise;\n      console.log(\"USER RESPONSE\", userResponse);\n\n      // Send final response\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          success: true,\n          action: userResponse,\n        })\n      );\n    } catch (error) {\n      console.error(\"Error in /send-notification:\", error);\n      res.writeHead(400, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          success: false,\n          error: error.message,\n        })\n      );\n    }\n  });\n});\n\n// Meteor methods\nMeteor.methods({\n  async \"notifications.handleResponse\"(appId, action) {\n    check(appId, String);\n    check(action, String);\n\n    console.log(\n      `Handling notification response for appId: ${appId}, action: ${action}`\n    );\n    console.log(\"Response promises\", responsePromises);\n\n    // If we have a pending promise for this notification, resolve it\n    if (responsePromises.has(appId)) {\n      const resolve = responsePromises.get(appId);\n      resolve(action);\n      responsePromises.delete(appId);\n      return {\n        success: true,\n        message: `Response ${action} processed successfully`,\n      };\n    } else {\n      console.log(\"No pending promise found for appId:\", appId);\n      return { success: false, message: \"No pending notification found\" };\n    }\n  },\n\n  async userAction(action, requestId, replyText = null) {\n    check(action, String);\n    check(requestId, String);\n    if (replyText) check(replyText, String);\n\n    const validActions = [\"approve\", \"reject\", \"reply\"];\n    if (!validActions.includes(action)) {\n      throw new Meteor.Error(\n        \"invalid-action\",\n        \"Invalid action performed by the user.\"\n      );\n    }\n\n    const pendingNotification = pendingNotifications.get(requestId);\n    if (pendingNotification) {\n      clearTimeout(pendingNotification.timeout);\n      pendingNotification.resolve({ action, replyText });\n      pendingNotifications.delete(requestId);\n      return { success: true, action, replyText };\n    } else {\n      throw new Meteor.Error(\n        \"invalid-request\",\n        \"No pending notification found for this request.\"\n      );\n    }\n  },\n\n  async \"users.register\"(userDetails) {\n    check(userDetails, {\n      email: String,\n      pin: String,\n      firstName: String,\n      lastName: String,\n      sessionDeviceInfo: {\n        model: String,\n        platform: String,\n        uuid: String,\n        version: String,\n        manufacturer: String,\n      },\n      fcmDeviceToken: String,\n    });\n\n    const { email, pin, firstName, lastName, sessionDeviceInfo } = userDetails;\n    const fcmToken = userDetails.fcmDeviceToken;\n\n    // Check if user exists\n    if (await Meteor.users.findOneAsync({ \"emails.address\": email })) {\n      throw new Meteor.Error(\n        \"user-exists\",\n        \"User already exists with this email\"\n      );\n    }\n\n    try {\n      // Create user in Meteor users collection\n      const userId = await Accounts.createUser({\n        email,\n        password: pin,\n        profile: {\n          firstName,\n          lastName,\n          deviceInfo: sessionDeviceInfo,\n          deviceToken: fcmToken,\n        },\n      });\n\n      if (userId) {\n        console.log(`user id in server is: ${userId}`);\n\n        // Ensure userId is passed as a string\n        await Meteor.call(\"deviceLogs.upsert\", {\n          userId: userId.toString(),\n          email,\n          deviceUUID: sessionDeviceInfo.uuid,\n          fcmToken,\n          deviceInfo: sessionDeviceInfo,\n        });\n      }\n\n      return {\n        success: true,\n        userId,\n        message: \"Registration successful\",\n      };\n    } catch (error) {\n      console.error(\"Error during registration:\", error);\n      throw new Meteor.Error(\"registration-failed\", error.message);\n    }\n  },\n\n  async getUserDetails(email) {\n    if (!email) {\n      throw new Meteor.Error(\"Email is required\");\n    }\n\n    const user = await Meteor.users.findOneAsync({ \"emails.address\": email });\n\n    if (!user) {\n      throw new Meteor.Error(\"User not found\");\n    }\n\n    return {\n      firstName: user.profile?.firstName || \"\",\n      lastName: user.profile?.lastName || \"\",\n      email: user.emails[0].address || \"\",\n    };\n  },\n\n  async \"users.checkRegistration\"(fcmToken) {\n    check(fcmToken, String);\n\n    const user = Meteor.users.findOneAsync({ \"profile.fcmToken\": fcmToken });\n    if (!user) {\n      throw new Meteor.Error(\n        \"device-deregistered\",\n        \"This device is deregistered. Please register again.\"\n      );\n    }\n    return user._id;\n  },\n\n  async updateUserProfile({ firstName, lastName, email }) {\n    check(firstName, String);\n    check(lastName, String);\n    check(email, String);\n\n    console.log(\"Updating profile for user:\", firstName, lastName, email);\n\n    if (!this.userId) {\n      throw new Meteor.Error(\n        \"not-authorized\",\n        \"You must be logged in to update your profile\"\n      );\n    }\n\n    try {\n      // Update the user's profile in the database\n      Meteor.users.updateAsync(this.userId, {\n        $set: {\n          \"profile.firstName\": firstName,\n          \"profile.lastName\": lastName,\n          \"emails.0.address\": email,\n        },\n      });\n\n      return { success: true, message: \"Profile updated successfully\" };\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      throw new Meteor.Error(\n        \"update-failed\",\n        \"Failed to update profile\",\n        error\n      );\n    }\n  },\n\n  async \"users.mapFCMTokenToUser\"(userId, fcmToken) {\n    check(userId, String);\n    check(fcmToken, String);\n\n    if (!this.userId) {\n      throw new Meteor.Error(\"not-authorized\", \"User must be logged in\");\n    }\n\n    const user = Meteor.users.findOne(userId);\n    if (!user) {\n      throw new Meteor.Error(\"user-not-found\", \"User not found\");\n    }\n\n    // Map token to the user\n    Meteor.users.update(userId, {\n      $set: {\n        \"profile.fcmToken\": fcmToken,\n      },\n    });\n  },\n  async checkUsersExist() {\n    try {\n      const userCount = await Meteor.users.find().countAsync();\n      console.log(\"User count:\", userCount);\n      return userCount > 0;\n    } catch (error) {\n      console.error(\"Error in checkUsersExist:\", error);\n      throw new Meteor.Error(\"server-error\", \"Failed to check user existence\");\n    }\n  },\n});\n\nMeteor.startup(() => {\n  // Meteor.publish('deviceLogs', function (deviceUuid) {\n  //   console.log(\"Publishing deviceLogs for UUID:\", deviceUuid);\n  //   if (!deviceUuid) {\n  //     console.log(\"No UUID provided, returning empty set\");\n  //     return this.ready();\n  //   }\n  //   const query = { deviceUUID: deviceUuid };\n  //   console.log(\"MongoDB query:\", query);\n  //   const records = DeviceLogs.find(query, {\n  //     fields: {\n  //       deviceUUID: 1,\n  //       email: 1,\n  //       fcmToken: 1\n  //     }\n  //   });\n  //   console.log(\"Found records count:\", records.countAsync());\n  //   return records;\n  // });\n});\n"]}}]