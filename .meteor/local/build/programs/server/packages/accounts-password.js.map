{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-password/email_templates.js","meteor://ðŸ’»app/packages/accounts-password/password_server.js"],"names":["_objectSpread","module","link","default","v","__reifyWaitForDeps__","greet","welcomeMsg","user","url","greeting","profile","name","concat","Accounts","emailTemplates","from","siteName","Meteor","absoluteUrl","replace","resetPassword","subject","text","verifyEmail","enrollAccount","__reify_async_result__","_reifyError","self","async","bcryptHash","bcryptCompare","hash","compare","getUserById","id","options","users","findOneAsync","_addDefaultFieldSelector","_bcryptRounds","_options","bcryptRounds","getPasswordString","password","SHA256","algorithm","Error","digest","hashPassword","getRoundsFromBcryptHash","rounds","hashSegments","split","length","parseInt","_checkPasswordUserFields","_id","services","checkPasswordAsync","result","userId","formattedPassword","bcrypt","hashRounds","error","_handleError","defer","updateAsync","$set","_checkPasswordAsync","findUserByUsername","username","_findUserByQuery","findUserByEmail","email","NonEmptyString","Match","Where","x","check","String","passwordValidator","OneOf","str","_Meteor$settings","_Meteor$settings$pack","_Meteor$settings$pack2","test","settings","packages","accounts","passwordMaxLength","registerLoginHandler","_Accounts$_check2faEn","_Accounts","undefined","_userQueryValidator","code","Optional","fields","_check2faEnabled","call","_isTokenValid","twoFactorAuthentication","secret","setUsername","newUsername","oldUsername","_checkForCaseInsensitiveDuplicates","ex","methods","changePassword","oldPassword","newPassword","hashed","currentToken","_getLoginToken","connection","$pull","hashedToken","$ne","$unset","passwordChanged","setPasswordAsync","newPlaintextPassword","_Meteor$settings2","_Meteor$settings2$pac","_Meteor$settings2$pac2","Maybe","logout","Boolean","update","pluckAddresses","emails","arguments","map","address","forgotPassword","caseSensitiveEmail","find","toLowerCase","sendResetPasswordEmail","generateResetToken","reason","extraTokenData","includes","token","Random","tokenRecord","when","Date","Object","assign","_ensure","enroll","reset","generateVerificationToken","emailRecord","e","verified","$push","verificationTokens","push","extraParams","realEmail","urls","generateOptionsForEmail","Email","sendAsync","isDevelopment","console","log","sendEnrollmentEmail","_len","args","Array","_key","_loginMethod","_Accounts$_check2faEn2","_Accounts2","isEnroll","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","_getPasswordEnrollTokenLifetimeMs","currentTimeMs","now","oldToken","_setLoginToken","resetToOldToken","affectedRecords","err","_clearAllLoginTokens","sendVerificationEmail","_len2","_key2","_Accounts$_check2faEn3","_Accounts3","t","emailsRecord","addEmailAsync","newEmail","caseInsensitiveRegExp","RegExp","_escapeRegExp","updatedEmail","updated","didUpdateOwnEmail","$addToSet","removeEmail","createUser","ObjectIncluding","_createUserCheckingDuplicates","_len3","_key3","forbidClientAccountCreation","createUserVerifyingEmail","createUserAsync","createIndexAsync","unique","sparse"],"mappings":"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","file":"/packages/accounts-password.js","sourcesContent":["const greet = welcomeMsg => (user, url) => {\n  const greeting =\n    user.profile && user.profile.name\n      ? `Hello ${user.profile.name},`\n      : 'Hello,';\n  return `${greeting}\n\n${welcomeMsg}, simply click the link below.\n\n${url}\n\nThank you.\n`;\n};\n\n/**\n * @summary Options to customize emails sent from the Accounts system.\n * @locus Server\n * @importFromPackage accounts-base\n */\nAccounts.emailTemplates = {\n  ...(Accounts.emailTemplates || {}),\n  from: 'Accounts Example <no-reply@example.com>',\n  siteName: Meteor.absoluteUrl()\n    .replace(/^https?:\\/\\//, '')\n    .replace(/\\/$/, ''),\n\n  resetPassword: {\n    subject: () =>\n      `How to reset your password on ${Accounts.emailTemplates.siteName}`,\n    text: greet('To reset your password'),\n  },\n  verifyEmail: {\n    subject: () =>\n      `How to verify email address on ${Accounts.emailTemplates.siteName}`,\n    text: greet('To verify your account email'),\n  },\n  enrollAccount: {\n    subject: () =>\n      `An account has been created for you on ${Accounts.emailTemplates.siteName}`,\n    text: greet('To start using the service'),\n  },\n};\n","import { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';\nimport { Accounts } from \"meteor/accounts-base\";\n\n// Utility for grabbing user\nconst getUserById =\n  async (id, options) =>\n    await Meteor.users.findOneAsync(id, Accounts._addDefaultFieldSelector(options));\n\n// User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords.\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = () => Accounts._options.bcryptRounds || 10;\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nconst getPasswordString = password => {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else { // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" +\n                      \"Only 'sha-256' is allowed.\");\n    }\n    password = password.digest;\n  }\n  return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nconst hashPassword = async password => {\n  password = getPasswordString(password);\n  return await bcryptHash(password, Accounts._bcryptRounds());\n};\n\n// Extract the number of rounds used in the specified bcrypt hash.\nconst getRoundsFromBcryptHash = hash => {\n  let rounds;\n  if (hash) {\n    const hashSegments = hash.split('$');\n    if (hashSegments.length > 2) {\n      rounds = parseInt(hashSegments[2], 10);\n    }\n  }\n  return rounds;\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\n// The user parameter needs at least user._id and user.services\nAccounts._checkPasswordUserFields = {_id: 1, services: 1};\n//\nconst checkPasswordAsync = async (user, password) => {\n  const result = {\n    userId: user._id\n  };\n\n  const formattedPassword = getPasswordString(password);\n  const hash = user.services.password.bcrypt;\n  const hashRounds = getRoundsFromBcryptHash(hash);\n\n  if (! await bcryptCompare(formattedPassword, hash)) {\n    result.error = Accounts._handleError(\"Incorrect password\", false);\n  } else if (hash && Accounts._bcryptRounds() != hashRounds) {\n    // The password checks out, but the user's bcrypt hash needs to be updated.\n\n    Meteor.defer(async () => {\n      await Meteor.users.updateAsync({ _id: user._id }, {\n        $set: {\n          'services.password.bcrypt':\n            await bcryptHash(formattedPassword, Accounts._bcryptRounds())\n        }\n      });\n    });\n  }\n\n  return result;\n};\n\nAccounts._checkPasswordAsync =  checkPasswordAsync;\n\n///\n/// LOGIN\n///\n\n\n/**\n * @summary Finds the user asynchronously with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Promise<Object>} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByUsername =\n  async (username, options) =>\n    await Accounts._findUserByQuery({ username }, options);\n\n/**\n * @summary Finds the user asynchronously with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Promise<Object>} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByEmail =\n  async (email, options) =>\n    await Accounts._findUserByQuery({ email }, options);\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\nconst passwordValidator = Match.OneOf(\n  Match.Where(str => Match.test(str, String) && str.length <= Meteor.settings?.packages?.accounts?.passwordMaxLength || 256), {\n    digest: Match.Where(str => Match.test(str, String) && str.length === 64),\n    algorithm: Match.OneOf('sha-256')\n  }\n);\n\n// Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"password\", async options => {\n  if (!options.password)\n    return undefined; // don't handle\n\n  check(options, {\n    user: Accounts._userQueryValidator,\n    password: passwordValidator,\n    code: Match.Optional(NonEmptyString),\n  });\n\n\n  const user = await Accounts._findUserByQuery(options.user, {fields: {\n    services: 1,\n    ...Accounts._checkPasswordUserFields,\n  }});\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n\n  if (!user.services || !user.services.password ||\n      !user.services.password.bcrypt) {\n    Accounts._handleError(\"User has no password set\");\n  }\n\n  const result = await checkPasswordAsync(user, options.password);\n  // This method is added by the package accounts-2fa\n  // First the login is validated, then the code situation is checked\n  if (\n    !result.error &&\n    Accounts._check2faEnabled?.(user)\n  ) {\n    if (!options.code) {\n      Accounts._handleError('2FA code must be informed', true, 'no-2fa-code');\n    }\n    if (\n      !Accounts._isTokenValid(\n        user.services.twoFactorAuthentication.secret,\n        options.code\n      )\n    ) {\n      Accounts._handleError('Invalid 2FA code', true, 'invalid-2fa-code');\n    }\n  }\n\n  return result;\n});\n\n///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username asynchronously. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\nAccounts.setUsername =\n  async (userId, newUsername) => {\n    check(userId, NonEmptyString);\n    check(newUsername, NonEmptyString);\n\n    const user = await getUserById(userId, {\n      fields: {\n        username: 1,\n      }\n    });\n\n    if (!user) {\n      Accounts._handleError(\"User not found\");\n    }\n\n    const oldUsername = user.username;\n\n    // Perform a case insensitive check for duplicates before update\n    await Accounts._checkForCaseInsensitiveDuplicates('username',\n      'Username', newUsername, user._id);\n\n    await Meteor.users.updateAsync({ _id: user._id }, { $set: { username: newUsername } });\n\n    // Perform another check after update, in case a matching user has been\n    // inserted in the meantime\n    try {\n      await Accounts._checkForCaseInsensitiveDuplicates('username',\n        'Username', newUsername, user._id);\n    } catch (ex) {\n      // Undo update if the check fails\n      await Meteor.users.updateAsync({ _id: user._id }, { $set: { username: oldUsername } });\n      throw ex;\n    }\n  };\n\n// Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\nMeteor.methods(\n  {\n    changePassword: async function (oldPassword, newPassword) {\n  check(oldPassword, passwordValidator);\n  check(newPassword, passwordValidator);\n\n  if (!this.userId) {\n    throw new Meteor.Error(401, \"Must be logged in\");\n  }\n\n  const user = await getUserById(this.userId, {fields: {\n    services: 1,\n    ...Accounts._checkPasswordUserFields,\n  }});\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password || !user.services.password.bcrypt) {\n    Accounts._handleError(\"User has no password set\");\n  }\n\n  const result = await checkPasswordAsync(user, oldPassword);\n  if (result.error) {\n    throw result.error;\n  }\n\n  const hashed = await hashPassword(newPassword);\n\n  // It would be better if this removed ALL existing tokens and replaced\n  // the token for the current connection with a new one, but that would\n  // be tricky, so we'll settle for just replacing all tokens other than\n  // the one for the current connection.\n  const currentToken = Accounts._getLoginToken(this.connection.id);\n  await Meteor.users.updateAsync(\n    { _id: this.userId },\n    {\n      $set: { 'services.password.bcrypt': hashed },\n      $pull: {\n        'services.resume.loginTokens': { hashedToken: { $ne: currentToken } }\n      },\n      $unset: { 'services.password.reset': 1 }\n    }\n  );\n\n  return {passwordChanged: true};\n}});\n\n\n// Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPasswordAsync =\n  async (userId, newPlaintextPassword, options) => {\n  check(userId, String);\n  check(newPlaintextPassword, Match.Where(str => Match.test(str, String) && str.length <= Meteor.settings?.packages?.accounts?.passwordMaxLength || 256));\n  check(options, Match.Maybe({ logout: Boolean }));\n  options = { logout: true , ...options };\n\n  const user = await getUserById(userId, { fields: { _id: 1 } });\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  const update = {\n    $unset: {\n      'services.password.reset': 1\n    },\n    $set: {'services.password.bcrypt': await hashPassword(newPlaintextPassword)}\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  await Meteor.users.updateAsync({_id: user._id}, update);\n};\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Utility for plucking addresses from emails\nconst pluckAddresses = (emails = []) => emails.map(email => email.address);\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: async options => {\n  check(options, {email: String})\n\n  const user = await Accounts.findUserByEmail(options.email, { fields: { emails: 1 } });\n\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  const emails = pluckAddresses(user.emails);\n  const caseSensitiveEmail = emails.find(\n    email => email.toLowerCase() === options.email.toLowerCase()\n  );\n\n  await Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n}});\n\n/**\n * @summary Asynchronously generates a reset token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the reset token for.\n * @param {String} email Which address of the user to generate the reset token for. This address must be in the user's `emails` list. If `null`, defaults to the first email in the list.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Promise<Object>} Promise of an object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateResetToken =\n  async (userId, email, reason, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = await getUserById(userId);\n  if (!user) {\n    Accounts._handleError(\"Can't find user\");\n  }\n\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email ||\n    !(pluckAddresses(user.emails).includes(email))) {\n    Accounts._handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    email,\n    when: new Date()\n  };\n\n  if (reason === 'resetPassword') {\n    tokenRecord.reason = 'reset';\n  } else if (reason === 'enrollAccount') {\n    tokenRecord.reason = 'enroll';\n  } else if (reason) {\n    // fallback so that this function can be used for unknown reasons as well\n    tokenRecord.reason = reason;\n  }\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n  // if this method is called from the enroll account work-flow then\n  // store the token record in 'services.password.enroll' db field\n  // else store the token record in in 'services.password.reset' db field\n  if(reason === 'enrollAccount') {\n    await Meteor.users.updateAsync({_id: user._id}, {\n      $set : {\n        'services.password.enroll': tokenRecord\n      }\n    });\n    // before passing to template, update user object with new token\n     Meteor._ensure(user, 'services', 'password').enroll = tokenRecord;\n  } else {\n    await Meteor.users.updateAsync({_id: user._id}, {\n      $set : {\n        'services.password.reset': tokenRecord\n      }\n    });\n    // before passing to template, update user object with new token\n     Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n  }\n\n  return {email, user, token};\n};\n\n/**\n * @summary Generates asynchronously an e-mail verification token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the  e-mail verification token for.\n * @param {String} email Which address of the user to generate the e-mail verification token for. This address must be in the user's `emails` list. If `null`, defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Promise<Object>} Promise of an object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateVerificationToken =\n  async (userId, email, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = await getUserById(userId);\n  if (!user) {\n    Accounts._handleError(\"Can't find user\");\n  }\n\n  // pick the first unverified email if we weren't passed an email.\n  if (!email) {\n    const emailRecord = (user.emails || []).find(e => !e.verified);\n    email = (emailRecord || {}).address;\n\n    if (!email) {\n      Accounts._handleError(\"That user has no unverified email addresses.\");\n    }\n  }\n\n  // make sure we have a valid email\n  if (!email ||\n    !(pluckAddresses(user.emails).includes(email))) {\n    Accounts._handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    // TODO: This should probably be renamed to \"email\" to match reset token record.\n    address: email,\n    when: new Date()\n  };\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n\n  await Meteor.users.updateAsync({_id: user._id}, {$push: {\n    'services.email.verificationTokens': tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  return {email, user, token};\n};\n\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email asynchronously with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the reset url.\n * @returns {Promise<Object>} Promise of an object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendResetPasswordEmail =\n  async (userId, email, extraTokenData, extraParams) => {\n    const { email: realEmail, user, token } =\n      await Accounts.generateResetToken(userId, email, 'resetPassword', extraTokenData);\n    const url = Accounts.urls.resetPassword(token, extraParams);\n    const options = await Accounts.generateOptionsForEmail(realEmail, user, url, 'resetPassword');\n    await Email.sendAsync(options);\n\n    if (Meteor.isDevelopment) {\n      console.log(`\\nReset password URL: ${ url }`);\n    }\n    return { email: realEmail, user, token, url, options };\n  };\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email asynchronously with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the enrollment url.\n * @returns {Promise<Object>} Promise of an object {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendEnrollmentEmail =\n  async (userId, email, extraTokenData, extraParams) => {\n\n    const { email: realEmail, user, token } =\n      await Accounts.generateResetToken(userId, email, 'enrollAccount', extraTokenData);\n\n    const url = Accounts.urls.enrollAccount(token, extraParams);\n\n    const options =\n      await Accounts.generateOptionsForEmail(realEmail, user, url, 'enrollAccount');\n\n    await Email.sendAsync(options);\n    if (Meteor.isDevelopment) {\n      console.log(`\\nEnrollment email URL: ${ url }`);\n    }\n    return { email: realEmail, user, token, url, options };\n  };\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods(\n  {\n    resetPassword:\n      async function (...args) {\n        const token = args[0];\n        const newPassword = args[1];\n        return await Accounts._loginMethod(\n          this,\n          \"resetPassword\",\n          args,\n          \"password\",\n          async () => {\n            check(token, String);\n            check(newPassword, passwordValidator);\n            let user = await Meteor.users.findOneAsync(\n              { \"services.password.reset.token\": token },\n              {\n                fields: {\n                  services: 1,\n                  emails: 1,\n                }\n              }\n            );\n\n            let isEnroll = false;\n            // if token is in services.password.reset db field implies\n            // this method is was not called from enroll account workflow\n            // else this method is called from enroll account workflow\n            if (!user) {\n              user = await Meteor.users.findOneAsync(\n                { \"services.password.enroll.token\": token },\n                {\n                  fields: {\n                    services: 1,\n                    emails: 1,\n                  }\n                }\n              );\n              isEnroll = true;\n            }\n            if (!user) {\n              throw new Meteor.Error(403, \"Token expired\");\n            }\n            let tokenRecord = {};\n            if (isEnroll) {\n              tokenRecord = user.services.password.enroll;\n            } else {\n              tokenRecord = user.services.password.reset;\n            }\n            const { when, email } = tokenRecord;\n            let tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n            if (isEnroll) {\n              tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n            }\n            const currentTimeMs = Date.now();\n            if ((currentTimeMs - when) > tokenLifetimeMs)\n              throw new Meteor.Error(403, \"Token expired\");\n            if (!(pluckAddresses(user.emails).includes(email)))\n              return {\n                userId: user._id,\n                error: new Meteor.Error(403, \"Token has invalid email address\")\n              };\n\n            const hashed = await hashPassword(newPassword);\n\n            // NOTE: We're about to invalidate tokens on the user, who we might be\n            // logged in as. Make sure to avoid logging ourselves out if this\n            // happens. But also make sure not to leave the connection in a state\n            // of having a bad token set if things fail.\n            const oldToken = Accounts._getLoginToken(this.connection.id);\n            Accounts._setLoginToken(user._id, this.connection, null);\n            const resetToOldToken = () =>\n              Accounts._setLoginToken(user._id, this.connection, oldToken);\n\n            try {\n              // Update the user record by:\n              // - Changing the password to the new one\n              // - Forgetting about the reset token or enroll token that was just used\n              // - Verifying their email, since they got the password reset via email.\n              let affectedRecords = {};\n              // if reason is enroll then check services.password.enroll.token field for affected records\n              if (isEnroll) {\n                affectedRecords = await Meteor.users.updateAsync(\n                  {\n                    _id: user._id,\n                    'emails.address': email,\n                    'services.password.enroll.token': token\n                  },\n                  {\n                    $set: {\n                      'services.password.bcrypt': hashed,\n                      'emails.$.verified': true\n                    },\n                    $unset: { 'services.password.enroll': 1 }\n                  });\n              } else {\n                affectedRecords = await Meteor.users.updateAsync(\n                  {\n                    _id: user._id,\n                    'emails.address': email,\n                    'services.password.reset.token': token\n                  },\n                  {\n                    $set: {\n                      'services.password.bcrypt': hashed,\n                      'emails.$.verified': true\n                    },\n                    $unset: { 'services.password.reset': 1 }\n                  });\n              }\n              if (affectedRecords !== 1)\n                return {\n                  userId: user._id,\n                  error: new Meteor.Error(403, \"Invalid email\")\n                };\n            } catch (err) {\n              resetToOldToken();\n              throw err;\n            }\n\n            // Replace all valid login tokens with new ones (changing\n            // password should invalidate existing sessions).\n            await Accounts._clearAllLoginTokens(user._id);\n\n            if (Accounts._check2faEnabled?.(user)) {\n        return {\n          userId: user._id,\n          error: Accounts._handleError(\n            'Changed password, but user not logged in because 2FA is enabled',\n            false,\n            '2fa-enabled'\n          ),\n        };\n      }return { userId: user._id };\n          }\n        );\n      }\n  }\n);\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email asynchronously with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the verification url.\n * @returns {Promise<Object>} Promise of an object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendVerificationEmail =\n  async (userId, email, extraTokenData, extraParams) => {\n    // XXX Also generate a link using which someone can delete this\n    // account if they own said address but weren't those who created\n    // this account.\n\n    const { email: realEmail, user, token } =\n      await Accounts.generateVerificationToken(userId, email, extraTokenData);\n    const url = Accounts.urls.verifyEmail(token, extraParams);\n    const options = await Accounts.generateOptionsForEmail(realEmail, user, url, 'verifyEmail');\n    await Email.sendAsync(options);\n    if (Meteor.isDevelopment) {\n      console.log(`\\nVerification email URL: ${ url }`);\n    }\n    return { email: realEmail, user, token, url, options };\n  };\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods(\n  {\n    verifyEmail: async function (...args) {\n      const token = args[0];\n      return await Accounts._loginMethod(\n        this,\n        \"verifyEmail\",\n        args,\n        \"password\",\n        async () => {\n          check(token, String);\n\n          const user = await Meteor.users.findOneAsync(\n            { 'services.email.verificationTokens.token': token },\n            {\n              fields: {\n                services: 1,\n                emails: 1,\n              }\n            }\n          );\n          if (!user)\n            throw new Meteor.Error(403, \"Verify email link expired\");\n\n          const tokenRecord =\n            await user\n              .services.email.verificationTokens.find(t => t.token == token);\n\n          if (!tokenRecord)\n            return {\n              userId: user._id,\n              error: new Meteor.Error(403, \"Verify email link expired\")\n            };\n\n          const emailsRecord =\n            user.emails.find(e => e.address == tokenRecord.address);\n\n          if (!emailsRecord)\n            return {\n              userId: user._id,\n              error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n            };\n\n          // By including the address in the query, we can use 'emails.$' in the\n          // modifier to get a reference to the specific object in the emails\n          // array. See\n          // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n          // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n          await Meteor.users.updateAsync(\n            {\n              _id: user._id,\n              'emails.address': tokenRecord.address\n            },\n            {\n              $set: { 'emails.$.verified': true },\n              $pull: { 'services.email.verificationTokens': { address: tokenRecord.address } }\n            });\n\n          if (Accounts._check2faEnabled?.(user)) {\n        return {\n          userId: user._id,\n          error: Accounts._handleError(\n            'Email verified, but user not logged in because 2FA is enabled',\n            false,\n            '2fa-enabled'\n          ),\n        };\n      }return { userId: user._id };\n        }\n      );\n    }\n  });\n\n/**\n * @summary Asynchronously add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\nAccounts.addEmailAsync = async (userId, newEmail, verified) => {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (verified === void 0) {\n    verified = false;\n  }\n\n  const user = await getUserById(userId, { fields: { emails: 1 } });\n  if (!user) throw new Meteor.Error(403, \"User not found\");\n\n  // Allow users to change their own email to a version with a different case\n\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n  const caseInsensitiveRegExp = new RegExp(\n    `^${Meteor._escapeRegExp(newEmail)}$`,\n    \"i\"\n  );\n\n  // TODO: This is a linear search. If we have a lot of emails.\n  //  we should consider using a different data structure.\n  const updatedEmail = async (emails = [], _id) => {\n    let updated = false;\n    for (const email of emails) {\n      if (caseInsensitiveRegExp.test(email.address)) {\n        await Meteor.users.updateAsync(\n          {\n            _id: _id,\n            \"emails.address\": email.address,\n          },\n          {\n            $set: {\n              \"emails.$.address\": newEmail,\n              \"emails.$.verified\": verified,\n            },\n          }\n        );\n        updated = true;\n      }\n    }\n    return updated;\n  };\n  const didUpdateOwnEmail = await updatedEmail(user.emails, user._id);\n\n  // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  }\n\n  // Perform a case insensitive check for duplicates before update\n  await Accounts._checkForCaseInsensitiveDuplicates(\n    \"emails.address\",\n    \"Email\",\n    newEmail,\n    user._id\n  );\n\n  await Meteor.users.updateAsync(\n    {\n      _id: user._id,\n    },\n    {\n      $addToSet: {\n        emails: {\n          address: newEmail,\n          verified: verified,\n        },\n      },\n    }\n  );\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    await Accounts._checkForCaseInsensitiveDuplicates(\n      \"emails.address\",\n      \"Email\",\n      newEmail,\n      user._id\n    );\n  } catch (ex) {\n    // Undo update if the check fails\n    await Meteor.users.updateAsync(\n      { _id: user._id },\n      { $pull: { emails: { address: newEmail } } }\n    );\n    throw ex;\n  }\n};\n\n/**\n * @summary Remove an email address asynchronously for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\nAccounts.removeEmail =\n  async (userId, email) => {\n    check(userId, NonEmptyString);\n    check(email, NonEmptyString);\n\n    const user = await getUserById(userId, { fields: { _id: 1 } });\n    if (!user)\n      throw new Meteor.Error(403, \"User not found\");\n\n    await Meteor.users.updateAsync({ _id: user._id },\n      { $pull: { emails: { address: email } } });\n  }\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nconst createUser =\n  async options => {\n    // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n    // options.\n    check(options, Match.ObjectIncluding({\n      username: Match.Optional(String),\n      email: Match.Optional(String),\n      password: Match.Optional(passwordValidator)\n    }));\n\n    const { username, email, password } = options;\n    if (!username && !email)\n      throw new Meteor.Error(400, \"Need to set a username or email\");\n\n    const user = { services: {} };\n    if (password) {\n      const hashed = await hashPassword(password);\n      user.services.password = { bcrypt: hashed };\n    }\n\n    return await Accounts._createUserCheckingDuplicates({ user, email, username, options });\n  };\n\n// method for create user. Requests come from the client.\nMeteor.methods(\n  {\n    createUser: async function (...args) {\n      const options = args[0];\n      return await Accounts._loginMethod(\n        this,\n        \"createUser\",\n        args,\n        \"password\",\n        async () => {\n          // createUser() above does more checking.\n          check(options, Object);\n          if (Accounts._options.forbidClientAccountCreation)\n            return {\n              error: new Meteor.Error(403, \"Signups forbidden\")\n            };\n\n          const userId = await Accounts.createUserVerifyingEmail(options);\n\n          // client gets logged in as the new user afterwards.\n          return { userId: userId };\n        }\n      );\n    }\n  });\n\n/**\n * @summary Creates an user asynchronously and sends an email if `options.email` is informed.\n * Then if the `sendVerificationEmail` option from the `Accounts` package is\n * enabled, you'll send a verification email if `options.password` is informed,\n * otherwise you'll send an enrollment email.\n * @locus Server\n * @param {Object} options The options object to be passed down when creating\n * the user\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @importFromPackage accounts-base\n * */\nAccounts.createUserVerifyingEmail =\n  async (options) => {\n    options = { ...options };\n    // Create user. result contains id and token.\n    const userId = await createUser(options);\n    // safety belt. createUser is supposed to throw on error. send 500 error\n    // instead of sending a verification email with empty userid.\n    if (!userId)\n      throw new Error(\"createUser failed to insert new user\");\n\n    // If `Accounts._options.sendVerificationEmail` is set, register\n    // a token to verify the user's primary email, and send it to\n    // that address.\n    if (options.email && Accounts._options.sendVerificationEmail) {\n      if (options.password) {\n        await Accounts.sendVerificationEmail(userId, options.email);\n      } else {\n        await Accounts.sendEnrollmentEmail(userId, options.email);\n      }\n    }\n\n    return userId;\n  };\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns Promise<userId> or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\n\nAccounts.createUserAsync = createUser\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\n\nAccounts.createUser = Accounts.createUserAsync;\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nawait Meteor.users.createIndexAsync('services.email.verificationTokens.token',\n  { unique: true, sparse: true });\nawait Meteor.users.createIndexAsync('services.password.reset.token',\n  { unique: true, sparse: true });\nawait Meteor.users.createIndexAsync('services.password.enroll.token',\n  { unique: true, sparse: true });\n\n"]}